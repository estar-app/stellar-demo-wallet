{"version":3,"sources":["types/types.d.ts","ducks/settings.ts","helpers/normalizeHomeDomainUrl.ts","methods/getToml.ts","helpers/getAssetSettingsFromToml.ts","helpers/normalizeAssetProps.ts","helpers/getAssetData.ts","helpers/getErrorMessage.ts","helpers/getErrorString.ts","helpers/getNetworkConfig.ts","helpers/Sep9Fields.ts","ducks/account.ts","ducks/activeAsset.ts","helpers/getAssetOverridesData.ts","helpers/searchKeyPairStringToArray.ts","ducks/assetOverrides.ts","helpers/getUntrustedAssetData.ts","ducks/untrustedAssets.ts","ducks/allAssets.ts","methods/claimClaimableBalance.ts","methods/trustAsset.ts","ducks/claimAsset.ts","ducks/claimableBalances.ts","methods/checkDepositWithdrawInfo.ts","methods/sep6/pollDepositUntilComplete.ts","methods/sep6/pollWithdrawUntilComplete.ts","methods/sep6/programmaticDepositFlow.ts","methods/sep6/programmaticWithdrawFlow.ts","methods/sep10Auth/start.ts","methods/sep10Auth/sign.ts","methods/sep10Auth/send.ts","methods/sep12/collectSep12Fields.ts","methods/sep12/putSep12FieldsRequest.ts","methods/getHomeDomainFromAssetIssuer.ts","methods/checkTomlForFields.ts","ducks/sep6DepositAsset.ts","ducks/sep6WithdrawAsset.ts","helpers/getSep8NextStepOnSuccess.ts","methods/submitPaymentTransaction.ts","methods/sep8Send/revisePaymentTransaction.ts","methods/sep8Send/sendActionRequiredFields.ts","methods/sep8Send/submitRevisedTransaction.ts","ducks/sep8Send.ts","methods/sep24/checkInfo.ts","methods/sep24/interactiveDepositFlow.ts","methods/sep24/interactiveWithdrawFlow.ts","methods/sep24/createPopup.ts","methods/sep24/pollDepositUntilComplete.ts","methods/sep24/pollWithdrawUntilComplete.ts","ducks/sep24DepositAsset.ts","ducks/sep24WithdrawAsset.ts","methods/sep31Send/checkInfo.ts","helpers/isEmptyObject.ts","methods/sep31Send/getSep12Fields.ts","methods/sep31Send/putSep12Fields.ts","methods/sep31Send/postTransaction.ts","methods/sep31Send/pollTransactionUntilReady.ts","methods/sep31Send/pollTransactionUntilComplete.ts","ducks/sep31Send.ts","ducks/logs.ts","ducks/sendPayment.ts","ducks/trustAsset.ts","config/store.ts","components/SignOutModal.tsx","helpers/getCurrentSessionParams.ts","hooks/useRedux.ts","components/Header.tsx","helpers/searchParam.ts","components/ConfigurationModal.tsx","components/Footer.tsx","components/Json.tsx","components/LogItem/index.tsx","components/Sep31Send.tsx","helpers/sanitizeHtml.ts","components/Logs.tsx","components/PrivateRoute.tsx","components/SettingsHandler.tsx","components/WarningBanner.tsx","components/ToastBanner/index.tsx","helpers/shortenStellarKey.ts","components/AccountInfo.tsx","helpers/checkAssetExists.ts","helpers/getCurrenciesFromDomain.ts","helpers/getOverrideHomeDomain.ts","helpers/getAssetFromHomeDomain.ts","helpers/getValidatedUntrustedAsset.ts","components/AddAsset.tsx","constants/presetAssets.ts","helpers/getPresetAssets.ts","components/AddPresetAsset.tsx","components/ConfirmAssetAction.tsx","components/HomeDomainOverrideModal.tsx","components/HomeDomainOverrideButtons.tsx","components/BalanceRow.tsx","components/Balance.tsx","components/ClaimableBalance.tsx","components/UntrustedBalance.tsx","components/Assets.tsx","components/ErrorMessage/index.tsx","components/SendPayment.tsx","components/Sep6/Sep6Deposit.tsx","components/Sep6/Sep6Withdraw.tsx","components/Sep8Send/Sep8ActionRequiredForm.tsx","components/Sep8Send/Sep8Approval.tsx","components/Sep8Send/Sep8Review.tsx","components/Sep8Send/index.tsx","helpers/capitalizeString.ts","pages/Account.tsx","constants/metricNames.ts","components/ConnectAccount.tsx","pages/Landing.tsx","pages/NotFound.tsx","App.tsx","reportWebVitals.ts","index.tsx","methods/createMemoFromType.ts","constants/settings.ts","helpers/log.ts","methods/sep31Send/sendPayment.ts"],"names":["SearchParams","AssetCategory","TomlFields","LogType","NetworkType","ActionStatus","AssetActionId","AssetType","TransactionStatus","MemoTypeString","AnchorActionType","Sep8ApprovalStatus","Sep8Step","Sep8ActionRequiredResultType","Sep12CustomerStatus","Sep12CustomerFieldStatus","settingsSlice","createSlice","name","initialState","assetOverrides","pubnet","secretKey","untrustedAssets","claimableBalanceSupported","reducers","updateSettingsAction","state","action","payload","settingsSelector","settings","reducer","actions","normalizeHomeDomainUrl","homeDomain","_homeDomain","includes","startsWith","URL","replace","getToml","a","tomlURL","pathname","protocol","StellarTomlResolver","resolve","host","allowHttp","tomlResponse","getAssetSettingsFromToml","assetId","networkUrl","homeDomainOverride","server","Server","NATIVE","undefined","supportedActions","split","assetIssuer","loadAccount","accountRecord","home_domain","toml","CURRENCIES","TRANSFER_SERVER","TRANSFER_SERVER_SEP0024","DIRECT_PAYMENT_SERVER","sep6","Boolean","sep8","isSep8Asset","currencies","sep24","sep31","assetCode","currency","find","c","code","issuer","regulated","normalizeAssetProps","source","isUntrusted","assetType","_assetCode","token","_assetType","type","Error","_assetIssuer","key","assetString","total","available","toString","getAssetData","balances","allAssets","Object","entries","assets","length","i","data","push","getErrorMessage","error","e","getCatchError","message","TX_ERROR_TEXT","buy_not_authorized","op_malformed","op_sell_no_trust","op_line_full","op_no_destination","op_no_trust","op_underfunded","op_under_dest_min","op_over_source_max","op_cross_self","op_sell_no_issuer","buy_no_issuer","op_offer_not_found","op_low_reserve","op_not_authorized","tx_bad_auth","tx_bad_seq","tx_too_late","getErrorString","err","response","status","extras","result_codes","resultCodes","operations","codes","ignoredCodes","filter","map","join","transaction","detail","errors","Sep9FieldType","networkConfig","testnet","network","StellarSdk","Networks","TESTNET","url","public","PUBLIC","getNetworkConfig","fetchAccountAction","createAsyncThunk","publicKey","rejectWithValue","getState","dataProvider","DataProvider","serverUrl","accountOrKey","networkPassphrase","stellarAccount","isUnfunded","log","request","title","body","fetchAccountDetails","instruction","id","errorMessage","errorString","createRandomAccount","_","Keypair","random","secret","fundTestnetAccount","fetch","isAuthenticated","accountSlice","resetAccountAction","resetAccountStatusAction","extraReducers","builder","addCase","pending","PENDING","fulfilled","SUCCESS","rejected","ERROR","accountSelector","account","activeAssetSlice","setActiveAssetAction","setActiveAssetStatusAction","resetActiveAssetAction","getAssetOverridesData","forCode","forIssuer","call","assetResponse","records","asset_type","searchKeyPairStringToArray","keyPairString","valuesArray","reduce","result","item","paramArr","values","splice","paramRes","val","URL_KEY_PAIR_SEPARATOR_CHAR","value","addAssetOverridesAction","assetOverridesString","assetOverridesSlice","resetAssetOverridesStatusAction","resetAssetOverridesAction","getUntrustedAssetData","assetsToAdd","accountAssets","notExist","removeExistingAssets","assetsString","assetsArray","untrustedAssetsList","ua","asset","addUntrustedAssetAction","accountData","untrustedAssetsSelector","assetsListToAdd","removeUntrustedAssetAction","removeAssetString","untrustedAssetsSlice","resetUntrustedAssetStatusAction","resetUntrustedAssetsAction","includeAssetOverrides","assetCategory","overrideAsset","ao","updatedAsset","category","isOverride","getAllAssetsAction","trusted","TRUSTED","untrusted","UNTRUSTED","allAssetsSlice","resetAllAssetsStatusAction","claimClaimableBalance","balance","fee","sponsor","keypair","fromSecret","accounts","accountId","Account","sequence","TransactionBuilder","addOperation","Operation","balanceId","setTimeout","build","sign","submitTransaction","trustAsset","untrustedAsset","BASE_FEE","changeTrust","Asset","claimAssetAction","trustedAssetAdded","claimAssetSlice","resetClaimAssetAction","fetchClaimableBalancesAction","claimableBalances","claimant","claimableBalanceResponse","cleanedRecords","forEach","record","cleanedRecord","amount","lastModifiedLedger","last_modified_ledger","isClaimableBalance","claimableBalancesSlice","resetClaimableBalancesAction","checkDepositWithdrawInfo","transferServerUrl","DEPOSIT","infoURL","info","json","infoJson","get","pollDepositUntilComplete","transactionId","trustAssetCallback","currentStatus","INCOMPLETE","transactionUrl","endStatuses","PENDING_EXTERNAL","COMPLETED","headers","Authorization","transactionJson","PENDING_USER_TRANSFER_START","PENDING_ANCHOR","PENDING_STELLAR","PENDING_TRUST","PENDING_USER","Promise","pollWithdrawUntilComplete","memo","createMemoFromType","withdraw_memo","withdraw_memo_type","txn","payment","destination","withdraw_anchor_account","addMemo","horizonResponse","programmaticDepositFlow","depositFields","API_METHOD","REQUEST_URL_STR","REQUEST_URL","getDepositParams","asset_code","claimable_balance_supported","each","searchParams","append","method","depositJson","programmaticWithdrawFlow","withdrawFields","getWithdrawParams","withdrawJson","start","authEndpoint","serverSigningKey","params","authURL","resultJson","Utils","readChallengeTx","network_passphrase","tx","challengeTransaction","envelope","toEnvelope","toXDR","Transaction","send","signedChallengeTransaction","urlParams","URLSearchParams","collectSep12Fields","kycServer","isNewCustomer","memo_type","Origin","NEEDS_INFO","fieldsToCollect","fields","collectResult","field","props","NOT_PROVIDED","REJECTED","keys","putSep12FieldsRequest","isSender","FormData","getHomeDomainFromAssetIssuer","checkTomlForFields","sepName","requiredKeys","homeDomainParam","missingKeys","res","initiateDepositAction","infoData","assetInfoData","isAuthenticationRequired","authentication_required","min_amount","minAmount","max_amount","maxAmount","infoFields","customerFields","NEEDS_INPUT","WEB_AUTH_ENDPOINT","SIGNING_KEY","KYC_SERVER","webAuthTomlResponse","sep10AuthStart","sep10AuthSign","sep10AuthSend","sep12Fields","submitSep6DepositFields","depositType","sep6DepositSelector","sep6Data","depositResponse","CAN_PROCEED","sep6DepositAction","how","choices","sep6DepositAssetSlice","resetSep6DepositAction","sep6DepositAsset","initiateWithdrawAction","WITHDRAWAL","withdrawTypes","types","submitSep6WithdrawFields","withdrawType","sepWithdrawSelector","withdrawResponse","sep6WithdrawAction","transactionResponse","account_id","sep6WithdrawAssetSlice","resetSep6WithdrawAction","sep6WithdrawAsset","getSep8NextStepOnSuccess","currentStep","approvalStatus","didUndergoKyc","DISABLED","STARTING","nextStepAfterApprovalServer","TRANSACTION_REVISED","COMPLETE","ACTION_REQUIRED","SENT_ACTION_REQUIRED_FIELDS","REVISED","Sep9FieldsDict","STRING","description","COUNTRY_CODE","PHONE_NUMBER","DATE","NUMBER","LANGUAGE_CODE","BINARY","sep9Field","submitPaymentTransaction","isPubnet","buildPaymentTransaction","isDestinationFunded","native","operation","withMuxing","createAccount","startingBalance","fetchTimebounds","timebounds","revisePaymentTransaction","approvalServer","submittedTxXdr","JSON","stringify","sep8ApprovalResult","sep8ApprovalResultJson","actionFields","action_fields","fieldName","actionRequiredInfo","actionMethod","action_method","actionUrl","action_url","revisedTransaction","revisedTxXdr","pendingApprovalBody","timeout","dateStr","Date","toLocaleString","sendActionRequiredFields","contentType","some","formData","fieldValue","sep8ActionRequiredResult","NO_FURTHER_ACTION_REQUIRED","FOLLOW_NEXT_URL","validatedResponse","next_url","nextUrl","defaultCompletionMessage","submitRevisedTransaction","fromXDR","initiateSep8SendAction","approvalCriteria","approval_criteria","approval_server","isRegulated","sep8ReviseTransactionAction","sep8SubmitRevisedTransactionAction","sep8SendSelector","sep8SendActionRequiredFieldsAction","sep8Step","actionRequiredResult","sep8SendSlice","resetSep8SendAction","sep8ClearErrorAction","sep8Send","checkInfo","interactiveDepositFlow","sep24TransferServerUrl","postDepositParams","lang","interactiveJson","interactiveWithdrawFlow","postWithdrawParams","createPopup","popupUrl","popup","open","closed","location","href","more_info_url","amount_in","depositAssetAction","interactiveResponse","sep24DepositAssetSlice","resetSep24DepositAssetAction","withdrawAssetAction","sep24WithdrawAssetSlice","resetSep24WithdrawAssetAction","sendServer","receive","enabled","obj","sep12","sender","_senderTypes","senderType","multipleSenderTypes","s","receiver","_receiverTypes","receiverType","multipleReceiverTypes","r","sender_sep12_type","receiver_sep12_type","getSep12Fields","senderSep12Fields","receiverSep12Fields","senderSep12Memo","receiverSep12Memo","crypto","randomBytes","putSep12Fields","senderMemo","receiverMemo","senderSep12Id","receiverSep12Id","postTransaction","senderId","receiverId","transactionFormData","sender_id","receiver_id","prop","sendMemoType","stellar_memo_type","sendMemo","stellar_memo","receiverAddress","stellar_account_id","pollTransactionUntilReady","PENDING_SENDER","transactionStatus","pollTransactionUntilComplete","PENDING_CUSTOMER_INFO_UPDATE","PENDING_TRANSACTION_INFO_UPDATE","PENDING_RECEIVER","initiateSendAction","infoResponse","isTypeSelected","setCustomerTypesAction","fetchSendFieldsAction","sep31SendSelector","submitSep31SendTransactionAction","putSep12FieldsResponse","postResponse","sendPayment","sep31SendSlice","resetSep31SendAction","sep31Send","items","addLogAction","logItem","logsSlice","clearLogsAction","logAction","sendPaymentAction","sendPaymentSlice","resetSendPaymentAction","trustAssetAction","trustAssetSlice","resetTrustAssetAction","RESET_STORE_ACTION_TYPE","combineReducers","activeAsset","claimAsset","logs","sep24DepositAsset","sep24WithdrawAsset","resetStoreAction","createAction","store","configureStore","newState","middleware","getDefaultMiddleware","serializableCheck","isSerializable","BigNumber","isBigNumber","isPlain","SignOutModal","onClose","useState","sessionParams","setSessionParams","dispatch","useDispatch","history","useHistory","useEffect","ASSET_OVERRIDES","UNTRUSTED_ASSETS","CLAIMABLE_BALANCE_SUPPORTED","queryParams","window","search","has","getCurrentSessionParams","Body","variant","InfoBlock","warning","paramText","getMessageText","className","textToCopy","tooltipPosition","CopyText","right","showTooltip","iconLeft","Copy","Footer","onClick","Button","secondary","useRedux","useSelector","pick","isEqual","Header","modalVisible","setModalVisible","handleCloseModal","projectTitle","onSignOut","hasDarkModeToggle","visible","parentId","CSS_MODAL_PARENT_ID","updateValue","currentVal","newVal","removeVal","getKeyPairString","keyPairs","arr","URL_ITEM_SEPARATOR_CHAR","searchParam","update","param","urlSearchParams","currentParamValue","PUBNET","set","delete","SECRET_KEY","remove","removeValue","updatedValue","updateKeyPair","itemId","assetArray","v","updatedValuesString","removeKeyPair","assetsToKeep","ConfigurationModal","Heading","htmlFor","checked","onChange","configModalVisible","setConfigModalVisible","handleConfigModalClose","gitHubLink","hideTopBorder","defaultTheme","base00","base01","base02","base03","base04","base05","base06","base07","base08","base09","base0A","base0B","base0C","base0D","base0E","base0F","Json","src","collapseStringsAfterLength","displayDataTypes","collapsed","theme","marked","setOptions","gfm","CustomerType","LogItemIcon","MessageSquare","XCircle","ArrowRight","ArrowLeft","light","dark","LogItem","isFadeReady","setIsFadeReady","t","clearTimeout","html","bodyParsed","parse","DOMPurify","sanitize","USE_PROFILES","INSTRUCTION","Logs","onLogEventMessage","timestamp","document","addEventListener","LOG_MESSAGE_EVENT","removeEventListener","Inset","index","filename","now","content","logItems","date","contentHeader","isLastItem","logsToMarkdown","element","createElement","setAttribute","encodeURIComponent","style","display","appendChild","click","removeChild","disabled","PrivateRoute","children","rest","useLocation","render","to","SettingsHandler","pubnetParam","secretKeyParam","untrustedAssetsParam","assetOverridesParam","claimableBalanceSupportedParam","cleanedAssets","unique","WarningBanner","StatusBar","ToastBanner","parent","getElementById","isVisible","setIsVisible","useLayoutEffect","ReactDOM","createPortal","shortenStellarKey","slice","AccountInfo","isAccountDetailsVisible","setIsAccountDetailsVisible","handleRefreshAccount","useCallback","isPending","details","checkAssetExists","accountBalances","getCurrenciesFromDomain","domainURL","getOverrideHomeDomain","assetHomeDomain","getAssetListString","getAssetFromHomeDomain","issuerPublicKey","tomlCurrencies","matchingAssets","availableAssetsString","availableIssuersString","m","getValidatedUntrustedAsset","AddAsset","isValidating","setIsValidating","setAssetCode","setHomeDomain","setIssuerPublicKey","setErrorMessage","handleSetUntrustedAsset","errorMsg","label","isInline","DetailsTooltip","left","target","placeholder","isLoading","PRESET_ASSETS","getPresetAssets","pAsset","AddPresetAsset","presetAssets","setPresetAssets","checkedAssets","setCheckedAssets","getAssetId","handleAddUntrustedAssets","assetList","all","validatedAssetValues","newSearchQ","issuerLink","displayLink","updatedCheckedAssets","flatMap","isChecked","ConfirmAssetAction","callback","options","HomeDomainOverrideModal","setIsPending","handleOverride","HomeDomainOverrideButtons","ModalType","activeModal","setActiveModal","showModal","modalType","ASSET_OVERRIDE","REMOVE_ASSET_OVERRIDE","handleRemove","icon","Edit2","altText","IconButton","BalanceRow","activeAction","onAction","isActive","selectValue","setSelectValue","handleSelectChange","TextLink","underline","SEND_PAYMENT","SEP6_DEPOSIT","SEP6_WITHDRAW","SEP8_SEND_PAYMENT","SEP24_DEPOSIT","SEP24_WITHDRAW","SEP31_SEND","renderActionsSelect","Balance","onAssetAction","onSend","allBalances","handleAction","actionId","defaultProps","initiateSep6SendAction","initiateSep6WithdrawAction","sortedBalances","other","groupBalances","ClaimableBalance","handleClaim","UntrustedBalance","allUntrustedAssets","TRUSTED_ASSET_EXPLANATION","handleSep6Deposit","handleDepositAsset","TRUST_ASSET","handleTrustAsset","REMOVE_ASSET","handleRemoveAsset","disabledButton","assetItem","Assets","onSendPayment","toastMessage","setToastMessage","handleRemoveUntrustedAsset","removeAsset","handleFetchClaimableBalances","handleAssetAction","CONFIRM_ACTION","setActiveAssetStatusAndToastMessage","ADD_ASSET","ADD_PRESET_ASSET","ErrorMessage","marginTop","marginBottom","textAlign","SendPayment","setDestination","setAmount","setAssetIssuer","setIsDestinationFunded","resetFormState","checkAndSetIsDestinationFunded","StrKey","isValidEd25519PublicKey","isAccountFunded","onBlur","Sep6Deposit","formInitialState","setFormData","depositTypeChoices","useMemo","handleClose","handleDepositTypeChange","event","updatedState","handleInfoFieldChange","handleCustomerFieldChange","note","renderMinMaxAmount","input","choice","required","preventDefault","extra_info","Sep6Withdraw","withdrawAmount","setWithdrawAmount","activeWithdrawType","setActiveWithdrawType","withdrawTypesArr","initialWithdrawType","fieldInfo","external_extra_text","amount_fee","amount_out","Sep8ActionRequiredForm","fieldValues","setFieldValues","shouldOpenActionUrl","handleSubmitActionRequiredFields","fieldType","inputValue","inputType","getInputParams","files","buffFieldValue","handleOnChangeField","multiple","Sep8Approval","handleSubmitPayment","Sep8Review","submittedTx","setSubmittedTx","revisedTx","setRevisedTx","isApproved","setIsApproved","Sep8Send","capitalizeString","phrase","firstLetter","restOfWord","toUpperCase","Sep31Send","customerTypes","setCustomerTypes","resetLocalState","handleChange","section","handleTypeChange","typeId","updatedTypes","SENDER","renderSenderOptions","RECEIVER","renderReceiverOptions","allFields","sectionTitle","sectionItems","optional","sendPaymentModalVisible","setSendPaymentModalVisible","currentAsset","setCurrentAsset","METRIC_NAMES","ConnectAccount","setSecretKey","Landing","isConnectAccountModalVisible","setIsConnectAccountModalVisible","metrics","emitMetric","NotFound","errorReporting","reportErrors","projectName","tracingOrigins","App","Content","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","memoString","memoType","Memo","MemoHash","Buffer","from","MemoID","MemoText","dispatchLog","dispatchEvent","CustomEvent","console","getTime","REQUEST","RESPONSE","sentryCaptureMessage","accountBalance","b","getCode","asset_issuer","getIssuer","Number","TEXT","text","ID","HASH","hash","txStatus","codesList"],"mappings":"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","file":"static/js/main.6df29935.chunk.js","sourcesContent":["import React, { ReactNode } from \"react\";\nimport { Horizon } from \"stellar-sdk\";\nimport { Types } from \"@stellar/wallet-sdk\";\nimport { Sep9Field } from \"helpers/Sep9Fields\";\n\nexport enum SearchParams {\n  SECRET_KEY = \"secretKey\",\n  PUBNET = \"pubnet\",\n  UNTRUSTED_ASSETS = \"untrustedAssets\",\n  ASSET_OVERRIDES = \"assetOverrides\",\n  CLAIMABLE_BALANCE_SUPPORTED = \"claimableBalanceSupported\",\n}\n\nexport enum AssetCategory {\n  TRUSTED = \"trusted\",\n  UNTRUSTED = \"untrusted\",\n}\n\nexport enum TomlFields {\n  ACCOUNTS = \"ACCOUNTS\",\n  AUTH_SERVER = \"AUTH_SERVER\",\n  DIRECT_PAYMENT_SERVER = \"DIRECT_PAYMENT_SERVER\",\n  FEDERATION_SERVER = \"FEDERATION_SERVER\",\n  HORIZON_URL = \"HORIZON_URL\",\n  KYC_SERVER = \"KYC_SERVER\",\n  NETWORK_PASSPHRASE = \"NETWORK_PASSPHRASE\",\n  SIGNING_KEY = \"SIGNING_KEY\",\n  TRANSFER_SERVER = \"TRANSFER_SERVER\",\n  TRANSFER_SERVER_SEP0024 = \"TRANSFER_SERVER_SEP0024\",\n  URI_REQUEST_SIGNING_KEY = \"URI_REQUEST_SIGNING_KEY\",\n  VERSION = \"VERSION\",\n  WEB_AUTH_ENDPOINT = \"WEB_AUTH_ENDPOINT\",\n}\n\nexport interface presetAsset {\n  assetCode: string;\n  homeDomain?: string;\n  issuerPublicKey?: string;\n}\n\nexport interface Asset {\n  assetString: string;\n  assetCode: string;\n  assetIssuer: string;\n  assetType: string;\n  total: string;\n  homeDomain?: string;\n  supportedActions?: AssetSupportedActions;\n  isUntrusted?: boolean;\n  isOverride?: boolean;\n  isClaimableBalance?: boolean;\n  notExist?: boolean;\n  source: any;\n  category?: AssetCategory;\n}\n\nexport interface SearchParamAsset {\n  assetString: string;\n  homeDomain?: string;\n}\n\nexport interface AssetSupportedActions {\n  sep6?: boolean;\n  sep8?: boolean;\n  sep24?: boolean;\n  sep31?: boolean;\n}\n\nexport interface AccountInitialState {\n  data: Types.AccountDetails | null;\n  assets: Asset[];\n  errorString?: string;\n  isAuthenticated: boolean;\n  isUnfunded: boolean;\n  secretKey: string;\n  status: ActionStatus | undefined;\n}\n\nexport interface ActiveAssetInitialState {\n  action: ActiveAssetAction | undefined;\n  status: ActionStatus | undefined;\n}\n\nexport interface AllAssetsInitialState {\n  data: Asset[];\n  errorString?: string;\n  status: ActionStatus | undefined;\n}\n\nexport interface AssetOverridesInitialState {\n  data: Asset[];\n  errorString?: string;\n  status: ActionStatus | undefined;\n}\n\nexport interface ClaimAssetInitialState {\n  data: {\n    result: any;\n    trustedAssetAdded?: string;\n  };\n  errorString?: string;\n  status: ActionStatus | undefined;\n}\n\nexport interface ClaimableBalancesInitialState {\n  data: {\n    records: ClaimableAsset[] | null;\n  };\n  errorString?: string;\n  status: ActionStatus | undefined;\n}\n\nexport interface Sep24DepositAssetInitialState {\n  data: {\n    currentStatus: string;\n    trustedAssetAdded?: string;\n  };\n  errorString?: string;\n  status: ActionStatus | undefined;\n}\n\nexport interface LogsInitialState {\n  items: LogItemProps[];\n  errorString?: string;\n  status: ActionStatus | undefined;\n}\n\nexport interface SendPaymentInitialState {\n  data: Horizon.TransactionResponse | null;\n  errorString?: string;\n  status: ActionStatus | undefined;\n}\n\nexport interface SettingsInitialState {\n  assetOverrides: string;\n  pubnet: boolean;\n  secretKey: string;\n  untrustedAssets: string;\n  claimableBalanceSupported: boolean;\n}\n\nexport interface UntrustedAssetsInitialState {\n  data: Asset[];\n  errorString?: string;\n  status: ActionStatus | undefined;\n}\n\nexport interface AnyObject {\n  [key: string]: any;\n}\n\nexport interface AssetsObject {\n  [key: string]: Asset;\n}\n\nexport interface StringObject {\n  [key: string]: string;\n}\n\nexport interface NestedStringObject {\n  [key: string]: {\n    [key: string]: string;\n  };\n}\n\nexport interface CustomerTypeItem {\n  type: string;\n  description: string;\n}\n\ninterface Sep6DepositResponse {\n  /* eslint-disable camelcase */\n  how: string;\n  id?: string;\n  eta?: number;\n  min_amount?: number;\n  max_amount?: number;\n  fee_fixed?: number;\n  fee_percent?: number;\n  extra_info?: { message?: string };\n  /* eslint-enable camelcase */\n}\n\nexport interface Sep6DepositAssetInitialState {\n  data: {\n    assetCode: string;\n    assetIssuer: string;\n    currentStatus: string;\n    kycServer: string;\n    token: string;\n    transferServerUrl: string;\n    infoFields: {\n      [key: string]: AnyObject;\n    };\n    minAmount: number;\n    maxAmount: number;\n    customerFields: {\n      [key: string]: AnyObject;\n    };\n    depositResponse: Sep6DepositResponse;\n    trustedAssetAdded: string;\n  };\n  errorString?: string;\n  status: ActionStatus;\n}\n\ninterface Sep6WithdrawResponse {\n  /* eslint-disable camelcase */\n  account_id: string;\n  id?: string;\n  eta?: number;\n  memo_type?: string;\n  memo?: string;\n  min_amount?: number;\n  max_amount?: number;\n  fee_fixed?: number;\n  fee_percent?: number;\n  extra_info?: { message?: string };\n  /* eslint-enable camelcase */\n}\n\nexport interface Sep6WithdrawAssetInitialState {\n  data: {\n    assetCode: string;\n    assetIssuer: string;\n    currentStatus: string;\n    fields: {\n      [key: string]: AnyObject;\n    };\n    kycServer: string;\n    token: string;\n    transferServerUrl: string;\n    trustedAssetAdded: string;\n    withdrawTypes: {\n      types: {\n        [key: string]: {\n          fields: {\n            [key: string]: {\n              description: string;\n            };\n          };\n        };\n      };\n    };\n    transactionResponse: AnyObject;\n    withdrawResponse: Sep6WithdrawResponse;\n  };\n  errorString?: string;\n  status: ActionStatus | undefined;\n}\n\nexport interface Sep31SendInitialState {\n  data: {\n    publicKey: string;\n    homeDomain: string;\n    assetCode: string;\n    assetIssuer: string;\n    token: string;\n    fields: {\n      transaction: AnyObject;\n      sender: AnyObject;\n      receiver: AnyObject;\n    };\n    isTypeSelected: boolean;\n    senderType: string | undefined;\n    receiverType: string | undefined;\n    senderMemo: string;\n    receiverMemo: string;\n    multipleSenderTypes: CustomerTypeItem[] | undefined;\n    multipleReceiverTypes: CustomerTypeItem[] | undefined;\n    authEndpoint: string;\n    sendServer: string;\n    kycServer: string;\n    serverSigningKey: string;\n  };\n  errorString?: string;\n  status: ActionStatus | undefined;\n}\n\nexport interface Setting {\n  [key: string]: any;\n}\n\nexport interface TrustAssetInitialState {\n  assetString: string;\n  data: any;\n  errorString?: string;\n  status: ActionStatus | undefined;\n}\n\nexport interface Sep24WithdrawAssetInitialState {\n  data: {\n    currentStatus: string;\n  };\n  errorString?: string;\n  status: ActionStatus | undefined;\n}\n\nexport interface TrustAssetParam {\n  assetString: string;\n  assetCode: string;\n  assetIssuer: string;\n}\n\nexport enum LogType {\n  REQUEST = \"request\",\n  RESPONSE = \"response\",\n  INSTRUCTION = \"instruction\",\n  ERROR = \"error\",\n}\n\nexport interface LogItemProps {\n  timestamp: number;\n  type: LogType;\n  title: string;\n  body?: string | AnyObject;\n}\n\nexport interface Store {\n  account: AccountInitialState;\n  activeAsset: ActiveAssetInitialState;\n  allAssets: AllAssetsInitialState;\n  assetOverrides: AssetOverridesInitialState;\n  claimAsset: ClaimAssetInitialState;\n  claimableBalances: ClaimableBalancesInitialState;\n  logs: LogsInitialState;\n  sendPayment: SendPaymentInitialState;\n  sep6DepositAsset: Sep6DepositAssetInitialState;\n  sep6WithdrawAsset: Sep6WithdrawAssetInitialState;\n  sep8Send: Sep8SendInitialState;\n  sep31Send: Sep31SendInitialState;\n  sep24DepositAsset: Sep24DepositAssetInitialState;\n  sep24WithdrawAsset: Sep24WithdrawAssetInitialState;\n  settings: SettingsInitialState;\n  trustAsset: TrustAssetInitialState;\n  untrustedAssets: UntrustedAssetsInitialState;\n}\n\nexport type StoreKey = keyof Store;\n\nexport enum NetworkType {\n  PUBLIC = \"public\",\n  TESTNET = \"testnet\",\n}\n\nexport enum ActionStatus {\n  ERROR = \"ERROR\",\n  PENDING = \"PENDING\",\n  SUCCESS = \"SUCCESS\",\n  NEEDS_INPUT = \"NEEDS_INPUT\",\n  CAN_PROCEED = \"CAN_PROCEED\",\n}\n\nexport interface RejectMessage {\n  errorString: string;\n}\n\nexport interface PaymentTransactionParams {\n  amount: string;\n  assetCode?: string;\n  assetIssuer?: string;\n  destination: string;\n  isDestinationFunded: boolean;\n  publicKey: string;\n}\n\nexport interface ClaimableAsset extends Asset {\n  id: string;\n  sponsor: string;\n  lastModifiedLedger: number;\n  claimants: any[];\n}\n\nexport interface ActiveAssetAction {\n  assetString: string;\n  title: string;\n  description?: string | React.ReactNode;\n  callback: (args?: any) => void;\n  options?: ReactNode;\n}\n\nexport interface AssetActionItem extends ActiveAssetAction {\n  balance: Asset;\n}\n\nexport enum AssetActionId {\n  SEND_PAYMENT = \"send-payment\",\n  SEP6_DEPOSIT = \"sep6-deposit\",\n  SEP6_WITHDRAW = \"sep6-withdraw\",\n  SEP8_SEND_PAYMENT = \"sep8-send-payment\",\n  SEP24_DEPOSIT = \"sep24-deposit\",\n  SEP24_WITHDRAW = \"sep24-withdraw\",\n  SEP31_SEND = \"sep31-send\",\n  TRUST_ASSET = \"trust-asset\",\n  REMOVE_ASSET = \"remove-asset\",\n  ADD_ASSET_OVERRIDE = \"add-asset-override\",\n  REMOVE_ASSET_OVERRIDE = \"remove-asset-override\",\n}\n\nexport enum AssetType {\n  NATIVE = \"native\",\n}\n\nexport enum TransactionStatus {\n  COMPLETED = \"completed\",\n  ERROR = \"error\",\n  INCOMPLETE = \"incomplete\",\n  PENDING_ANCHOR = \"pending_anchor\",\n  PENDING_CUSTOMER_INFO_UPDATE = \"pending_customer_info_update\",\n  PENDING_EXTERNAL = \"pending_external\",\n  PENDING_RECEIVER = \"pending_receiver\",\n  PENDING_SENDER = \"pending_sender\",\n  PENDING_STELLAR = \"pending_stellar\",\n  PENDING_TRANSACTION_INFO_UPDATE = \"pending_transaction_info_update\",\n  PENDING_TRUST = \"pending_trust\",\n  PENDING_USER = \"pending_user\",\n  PENDING_USER_TRANSFER_START = \"pending_user_transfer_start\",\n}\n\nexport enum MemoTypeString {\n  TEXT = \"text\",\n  ID = \"id\",\n  HASH = \"hash\",\n}\n\nexport enum AnchorActionType {\n  DEPOSIT = \"deposit\",\n  WITHDRAWAL = \"withdraw\",\n}\n\ninterface InfoTypeData {\n  // eslint-disable-next-line camelcase\n  authentication_required: boolean;\n  enabled: boolean;\n  fields: AnyObject;\n  types: AnyObject;\n  // eslint-disable-next-line camelcase\n  min_amount?: number;\n  // eslint-disable-next-line camelcase\n  max_amount?: number;\n}\n\nexport interface CheckInfoData {\n  [AnchorActionType.DEPOSIT]: {\n    [asset: string]: InfoTypeData;\n  };\n  [AnchorActionType.WITHDRAWAL]: {\n    [asset: string]: InfoTypeData;\n  };\n}\n\nexport enum Sep8ApprovalStatus {\n  ACTION_REQUIRED = \"action_required\",\n  PENDING = \"pending\",\n  REJECTED = \"rejected\",\n  REVISED = \"revised\",\n  SUCCESS = \"success\",\n}\n\nexport enum Sep8Step {\n  DISABLED = \"disabled\",\n  STARTING = \"starting\",\n  PENDING = \"pending\",\n  TRANSACTION_REVISED = \"transaction_revised\",\n  ACTION_REQUIRED = \"action_required\",\n  SENT_ACTION_REQUIRED_FIELDS = \"sent_action_required_fields\",\n  COMPLETE = \"complete\",\n}\n\nexport interface Sep8PaymentTransactionParams extends PaymentTransactionParams {\n  approvalServer: string;\n  assetCode: string;\n  assetIssuer: string;\n}\n\nexport interface Sep8SendInitialState {\n  data: {\n    sep8Step: Sep8Step;\n    approvalCriteria: string;\n    approvalServer: string;\n    assetCode: string;\n    assetIssuer: string;\n    homeDomain: string;\n    isRegulated: boolean;\n    revisedTransaction: {\n      amount: string;\n      destination: string;\n      revisedTxXdr: string;\n      submittedTxXdr: string;\n    };\n    actionRequiredInfo: {\n      actionFields?: Sep9Field[];\n      actionMethod: string;\n      actionUrl: string;\n      message: string;\n    };\n    actionRequiredResult: {\n      result: string;\n      nextUrl?: string;\n      message?: string;\n    };\n  };\n  errorString?: string;\n  status?: ActionStatus;\n}\n\nexport interface Sep8RevisedTransactionInfo {\n  amount: string;\n  destination: string;\n  revisedTxXdr: string;\n  submittedTxXdr: string;\n}\n\nexport interface Sep8ApprovalResponse {\n  status: Sep8ApprovalStatus;\n  revisedTransaction?: Sep8RevisedTransactionInfo;\n  actionRequiredInfo?: Sep8ActionRequiredInfo;\n}\n\nexport interface Sep8ActionRequiredInfo {\n  actionFields?: Sep9Field[];\n  actionMethod: string;\n  actionUrl: string;\n  message: string;\n}\n\nexport interface Sep8ActionRequiredSendParams {\n  actionFields: { [key: string]: string | File };\n  actionMethod: string;\n  actionUrl: string;\n}\n\nexport enum Sep8ActionRequiredResultType {\n  FOLLOW_NEXT_URL = \"follow_next_url\",\n  NO_FURTHER_ACTION_REQUIRED = \"no_further_action_required\",\n}\n\nexport interface Sep8ActionRequiredSentResult {\n  result: string;\n  nextUrl?: string;\n  message?: string;\n}\n\nexport enum Sep12CustomerStatus {\n  ACCEPTED = \"ACCEPTED\",\n  PROCESSING = \"PROCESSING\",\n  NEEDS_INFO = \"NEEDS_INFO\",\n  REJECTED = \"REJECTED\",\n}\n\nexport enum Sep12CustomerFieldStatus {\n  ACCEPTED = \"ACCEPTED\",\n  PROCESSING = \"PROCESSING\",\n  NOT_PROVIDED = \"NOT_PROVIDED\",\n  REJECTED = \"REJECTED\",\n  VERIFICATION_REQUIRED = \"VERIFICATION_REQUIRED\",\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"config/store\";\nimport { SettingsInitialState, Setting } from \"types/types.d\";\n\nconst initialState: SettingsInitialState = {\n  assetOverrides: \"\",\n  pubnet: false,\n  secretKey: \"\",\n  untrustedAssets: \"\",\n  claimableBalanceSupported: false,\n};\n\nconst settingsSlice = createSlice({\n  name: \"settings\",\n  initialState,\n  reducers: {\n    updateSettingsAction: (state, action: PayloadAction<Setting>) => ({\n      ...state,\n      ...action.payload,\n    }),\n  },\n});\n\nexport const settingsSelector = (state: RootState) => state.settings;\n\nexport const { reducer } = settingsSlice;\nexport const { updateSettingsAction } = settingsSlice.actions;\n","export const normalizeHomeDomainUrl = (homeDomain: string): URL => {\n  let _homeDomain = homeDomain;\n\n  // default localhost to http instead of https\n  if (_homeDomain.includes(\"localhost\")) {\n    _homeDomain = _homeDomain.startsWith(\"http\")\n      ? _homeDomain\n      : `http://${_homeDomain}`;\n  } else {\n    _homeDomain = _homeDomain.startsWith(\"http\")\n      ? _homeDomain\n      : `https://${_homeDomain}`;\n  }\n\n  return new URL(_homeDomain.replace(/\\/$/, \"\"));\n};\n","import { StellarTomlResolver } from \"stellar-sdk\";\nimport { normalizeHomeDomainUrl } from \"helpers/normalizeHomeDomainUrl\";\n\nexport const getToml = async (homeDomain: string) => {\n  const tomlURL = normalizeHomeDomainUrl(homeDomain);\n  tomlURL.pathname = \"/.well-known/stellar.toml\";\n\n  const tomlResponse =\n    tomlURL.protocol === \"http:\"\n      ? await StellarTomlResolver.resolve(tomlURL.host, {\n          allowHttp: true,\n        })\n      : await StellarTomlResolver.resolve(tomlURL.host);\n\n  return tomlResponse;\n};\n","import { Server } from \"stellar-sdk\";\nimport { getToml } from \"methods/getToml\";\nimport { AssetSupportedActions, AnyObject, AssetType } from \"types/types.d\";\n\ninterface GetAssetSettingsFromToml {\n  assetId: string;\n  networkUrl: string;\n  homeDomainOverride?: string;\n}\n\nexport const getAssetSettingsFromToml = async ({\n  assetId,\n  networkUrl,\n  homeDomainOverride,\n}: GetAssetSettingsFromToml): Promise<{\n  homeDomain: string | undefined;\n  supportedActions: AssetSupportedActions | AnyObject;\n}> => {\n  const server = new Server(networkUrl);\n\n  // Native (XLM) asset\n  if (assetId === AssetType.NATIVE) {\n    return {\n      homeDomain: undefined,\n      supportedActions: {},\n    };\n  }\n\n  // Other assets\n  let supportedActions: AssetSupportedActions | AnyObject = {};\n  const [, assetIssuer] = assetId.split(\":\");\n  let homeDomain = homeDomainOverride;\n\n  if (!homeDomainOverride) {\n    const accountRecord = await server.loadAccount(assetIssuer);\n    homeDomain = accountRecord.home_domain;\n  }\n\n  if (homeDomain) {\n    const toml = await getToml(homeDomain);\n    const {\n      CURRENCIES,\n      TRANSFER_SERVER,\n      TRANSFER_SERVER_SEP0024,\n      DIRECT_PAYMENT_SERVER,\n    } = toml;\n\n    supportedActions = {\n      sep6: Boolean(TRANSFER_SERVER),\n      sep8: isSep8Asset({ assetId, currencies: CURRENCIES }),\n      sep24: Boolean(TRANSFER_SERVER_SEP0024),\n      sep31: Boolean(DIRECT_PAYMENT_SERVER),\n    };\n  }\n\n  return {\n    homeDomain,\n    ...{ supportedActions },\n  };\n};\n\nconst isSep8Asset = ({\n  currencies,\n  assetId,\n}: {\n  currencies: any;\n  assetId: string;\n}): boolean => {\n  const [assetCode, assetIssuer] = assetId.split(\":\");\n\n  const currency = (currencies as any[]).find(\n    (c) => c.code === assetCode && c.issuer === assetIssuer,\n  );\n\n  return Boolean(currency?.regulated);\n};\n","import { Types } from \"@stellar/wallet-sdk\";\nimport {\n  Asset,\n  AssetSupportedActions,\n  AnyObject,\n  AssetType,\n} from \"types/types.d\";\n\ninterface NormalizeAssetProps {\n  source?: Types.AssetBalance | Types.NativeBalance;\n  homeDomain?: string;\n  supportedActions?: AssetSupportedActions | AnyObject;\n  isUntrusted?: boolean;\n  assetCode?: string;\n  assetIssuer?: string;\n  assetType?: string;\n}\n\nexport const normalizeAssetProps = ({\n  source,\n  homeDomain,\n  supportedActions,\n  isUntrusted = false,\n  assetCode = \"\",\n  assetIssuer = \"\",\n  assetType = \"\",\n}: NormalizeAssetProps): Asset => {\n  const _assetCode = assetCode || source?.token.code;\n  const _assetType = assetType || source?.token.type;\n\n  if (!(_assetCode && _assetType)) {\n    throw new Error(\"Asset code and asset type are required\");\n  }\n\n  let _assetIssuer = assetIssuer;\n\n  if (!_assetIssuer && _assetType !== AssetType.NATIVE) {\n    _assetIssuer = (source as Types.AssetBalance).token.issuer.key;\n  }\n\n  return {\n    assetString:\n      _assetType === AssetType.NATIVE\n        ? \"native\"\n        : `${_assetCode}:${_assetIssuer}`,\n    assetCode: _assetCode,\n    assetIssuer: _assetIssuer,\n    assetType: _assetType,\n    total: source?.available?.toString() || \"0\",\n    homeDomain,\n    supportedActions,\n    isUntrusted,\n    source,\n  };\n};\n","import { Types } from \"@stellar/wallet-sdk\";\nimport { getAssetSettingsFromToml } from \"helpers/getAssetSettingsFromToml\";\nimport { normalizeAssetProps } from \"helpers/normalizeAssetProps\";\nimport { Asset } from \"types/types.d\";\n\nexport const getAssetData = async ({\n  balances,\n  networkUrl,\n}: {\n  balances: Types.BalanceMap;\n  networkUrl: string;\n}) => {\n  const allAssets = Object.entries(balances);\n  const assets: Asset[] = [];\n\n  if (!allAssets?.length) {\n    return assets;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < allAssets.length; i++) {\n    const [assetId, data] = allAssets[i];\n\n    // eslint-disable-next-line no-await-in-loop\n    const { homeDomain, supportedActions } = await getAssetSettingsFromToml({\n      assetId,\n      networkUrl,\n    });\n\n    assets.push(\n      normalizeAssetProps({\n        source: data,\n        homeDomain,\n        supportedActions,\n      }),\n    );\n  }\n\n  return assets;\n};\n","import { getCatchError } from \"@stellar/frontend-helpers\";\n\nexport const getErrorMessage = (error: Error | unknown) => {\n  const e = getCatchError(error);\n  return e.message || e.toString();\n};\n","import { Horizon } from \"stellar-sdk\";\n\ninterface ErrorTextObject {\n  [key: string]: string;\n}\n\nexport const TX_ERROR_TEXT: ErrorTextObject = {\n  buy_not_authorized:\n    \"The issuer must authorize you to trade this token. Visit the issuer’s site more info.\",\n  op_malformed: \"The input is incorrect and would result in an invalid offer.\",\n  op_sell_no_trust: \"You are not authorized to sell this asset.\",\n  op_line_full: \"You have reached the limit allowed for buying that asset.\",\n  op_no_destination: \"The destination account doesn't exist.\",\n  op_no_trust:\n    \"One or more accounts in this transaction doesn't have a trustline with the desired asset.\",\n  op_underfunded: \"You don’t have enough to cover that transaction.\",\n  op_under_dest_min:\n    \"We couldn’t complete your transaction at this time because the exchange rate offered is no longer available. Please try again.\",\n  op_over_source_max:\n    \"We couldn’t complete your transaction at this time because the exchange rate offered is no longer available. Please try again.\",\n  op_cross_self:\n    \"You already have an offer out that would immediately cross this one.\",\n  op_sell_no_issuer: \"The issuer of that token doesn’t exist.\",\n  buy_no_issuer: \"The issuer of that token doesn’t exist.\",\n  op_offer_not_found: \"We couldn’t find that offer.\",\n  op_low_reserve: \"That offer would take you below the minimum XLM reserve.\",\n  op_not_authorized:\n    \"This operation was not authorized, please make sure the asset you used complies with the Regulated Assets protocol (SEP-8).\",\n  tx_bad_auth: \"Something went wrong while signing a transaction.\",\n  tx_bad_seq:\n    \"The app has gotten out of sync with the network. Please try again later.\",\n  tx_too_late: \"This transaction has expired.\",\n};\n\n/**\n * Given a Horizon error object, return a human-readable string that summarizes\n * it.\n *\n * @param {Error} err - error object from horizon\n * @returns {string} error string\n */\nexport function getErrorString(err: any): string {\n  const e = err && err.response ? err.response : err;\n\n  // timeout errors return timeout\n  if (e && e.status === 504) {\n    return \"Sorry, the request timed out! Please try again later.\";\n  }\n\n  // first, try to parse the errors in extras\n  if (e && e.data && e.data.extras && e.data.extras.result_codes) {\n    const resultCodes = e.data.extras.result_codes;\n\n    if (resultCodes.operations) {\n      // Map all errors into a single message string.\n      const codes = resultCodes.operations;\n      // Transactions with multiple operations might have mixed successes and\n      // errors. Ignore some codes to only handle codes we have messages for.\n      const ignoredCodes = [\"op_success\"];\n      const message = codes\n        .filter((code: string) => !ignoredCodes.includes(code))\n        .map((code: string) => TX_ERROR_TEXT[code] || `Error code '${code}'.`)\n        .join(\" \");\n\n      if (message) {\n        return message;\n      }\n    }\n\n    if (resultCodes.transaction) {\n      return (\n        TX_ERROR_TEXT[resultCodes.transaction] ||\n        `Error code '${resultCodes.transaction}'`\n      );\n    }\n  }\n\n  if (e && e.data && e.data.detail) {\n    return e.data.detail;\n  }\n\n  if (e && e.detail) {\n    return e.detail;\n  }\n\n  if (e && e.message) {\n    return e.message;\n  }\n\n  if (e && e.errors) {\n    return e.errors[0].message;\n  }\n\n  if (e && e.error) {\n    return e.error;\n  }\n\n  return e.toString();\n}\n\n/**\n * Given a Horizon error object, return the error code\n *\n * @param {Error} err - error object from horizon\n * @returns {string} error code\n */\nexport function getErrorCodeString(err: any): string {\n  const errors = getErrorCodes(err);\n  return errors.map((e) => `[Error code: '${e}']`).join(`, `);\n}\n\n/**\n * Given a Horizon error object, return a list of the error codes.\n *\n * @param {Error} err - error object from horizon\n * @returns {string[]} error code\n */\nexport function getErrorCodes(err: any): string[] {\n  const e = err && err.response ? err.response : err;\n\n  let errors: string[] = [];\n\n  // timeout errors return timeout\n  if (e && e.status === 504) {\n    return [\"request_timeout\"];\n  }\n\n  // first, try to parse the errors in extras\n  // eslint-disable-next-line camelcase\n  if (e?.data?.extras?.result_codes) {\n    const { result_codes: resultCodes }: Horizon.TransactionFailedExtras =\n      e.data.extras;\n\n    if (resultCodes.operations) {\n      const codes = resultCodes.operations;\n      // Transactions with multiple operations might have mixed successes and\n      // errors. Ignore the success codes and add only the errors.\n      const ignoredCodes = [\"op_success\"];\n      errors = [\n        ...errors,\n        ...codes.filter((code: string) => !ignoredCodes.includes(code)),\n      ];\n    }\n\n    if (errors.length) {\n      return errors;\n    }\n\n    if (resultCodes.transaction) {\n      return [resultCodes.transaction];\n    }\n  }\n\n  if (e?.data?.detail) {\n    return [e.data.detail];\n  }\n\n  if (e?.detail) {\n    return [e.detail];\n  }\n\n  if (e?.message) {\n    return [e.message];\n  }\n\n  if (e?.errors) {\n    return e.errors.map((messageError: any) => messageError.message);\n  }\n\n  if (e?.error) {\n    return [e.error];\n  }\n\n  return [];\n}\n","import StellarSdk from \"stellar-sdk\";\nimport { NetworkType } from \"types/types.d\";\n\ninterface NetworkItemConfig {\n  network: string;\n  url: string;\n}\n\ninterface NetworkConfig {\n  public: NetworkItemConfig;\n  testnet: NetworkItemConfig;\n}\n\nconst networkConfig: NetworkConfig = {\n  testnet: {\n    network: StellarSdk.Networks.TESTNET,\n    url: \"https://horizon-testnet.stellar.org\",\n  },\n  public: {\n    network: StellarSdk.Networks.PUBLIC,\n    url: \"https://horizon.stellar.org\",\n  },\n};\n\nexport const getNetworkConfig = (pubnet: boolean) => {\n  const network = pubnet ? NetworkType.PUBLIC : NetworkType.TESTNET;\n  return networkConfig[network];\n};\n","export enum Sep9FieldType {\n  STRING = \"string\",\n  COUNTRY_CODE = \"country_code\",\n  PHONE_NUMBER = \"phone number\",\n  DATE = \"date\",\n  NUMBER = \"number\",\n  BINARY = \"binary\",\n  LANGUAGE_CODE = \"language_code\",\n}\n\nexport interface Sep9Field {\n  name: string;\n  type: Sep9FieldType;\n  description: string;\n}\n\n/**\n * Sep9Fields contains a list of all SEP-9 fields from v1.3.2 (https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0009.md).\n */\nexport const Sep9Fields: Sep9Field[] = [\n  {\n    name: \"family_name\",\n    type: Sep9FieldType.STRING,\n    description: \"Family name\",\n  },\n  {\n    name: \"last_name\",\n    type: Sep9FieldType.STRING,\n    description: \"Last name\",\n  },\n  {\n    name: \"given_name\",\n    type: Sep9FieldType.STRING,\n    description: \"Given name\",\n  },\n  {\n    name: \"first_name\",\n    type: Sep9FieldType.STRING,\n    description: \"First name\",\n  },\n  {\n    name: \"additional_name\",\n    type: Sep9FieldType.STRING,\n    description: \"Middle name or other additional name\",\n  },\n  {\n    name: \"address_country_code\",\n    type: Sep9FieldType.COUNTRY_CODE,\n    description: \"Country code for current address\",\n  },\n  {\n    name: \"state_or_province\",\n    type: Sep9FieldType.STRING,\n    description: \"Name of state/province/region/prefecture\",\n  },\n  {\n    name: \"city\",\n    type: Sep9FieldType.STRING,\n    description: \"Name of city/town\",\n  },\n  {\n    name: \"postal_code\",\n    type: Sep9FieldType.STRING,\n    description: \"Postal or other code identifying user's locale\",\n  },\n  {\n    name: \"address\",\n    type: Sep9FieldType.STRING,\n    description:\n      \"Entire address (country, state, postal code, street address, etc...) as a multi-line string\",\n  },\n  {\n    name: \"mobile_number\",\n    type: Sep9FieldType.PHONE_NUMBER,\n    description: \"Mobile phone number with country code, in E.164 format\",\n  },\n  {\n    name: \"email_address\",\n    type: Sep9FieldType.STRING,\n    description: \"Email address\",\n  },\n  {\n    name: \"birth_date\",\n    type: Sep9FieldType.DATE,\n    description: \"Date of birth, e.g. 1976-07-04\",\n  },\n  {\n    name: \"birth_place\",\n    type: Sep9FieldType.STRING,\n    description: \"Place of birth (city, state, country; as on passport)\",\n  },\n  {\n    name: \"birth_country_code\",\n    type: Sep9FieldType.COUNTRY_CODE,\n    description: \"ISO Code of country of birth\",\n  },\n  {\n    name: \"bank_account_number\",\n    type: Sep9FieldType.STRING,\n    description: \"Number identifying bank account\",\n  },\n  {\n    name: \"bank_number\",\n    type: Sep9FieldType.STRING,\n    description:\n      \"Number identifying bank in national banking system (routing number in US)\",\n  },\n  {\n    name: \"bank_phone_number\",\n    type: Sep9FieldType.STRING,\n    description: \"Phone number with country code for bank\",\n  },\n  {\n    name: \"bank_branch_number\",\n    type: Sep9FieldType.STRING,\n    description: \"Number identifying bank branch\",\n  },\n  {\n    name: \"tax_id\",\n    type: Sep9FieldType.STRING,\n    description:\n      \"Tax identifier of user in their country (social security number in US)\",\n  },\n  {\n    name: \"tax_id_name\",\n    type: Sep9FieldType.STRING,\n    description: \"Name of the tax ID (SSN or ITIN in the US)\",\n  },\n  {\n    name: \"occupation\",\n    type: Sep9FieldType.NUMBER,\n    description: \"Occupation ISCO code\",\n  },\n  {\n    name: \"employer_name\",\n    type: Sep9FieldType.STRING,\n    description: \"Name of employer\",\n  },\n  {\n    name: \"employer_address\",\n    type: Sep9FieldType.STRING,\n    description: \"Address of employer\",\n  },\n  {\n    name: \"language_code\",\n    type: Sep9FieldType.LANGUAGE_CODE,\n    description: \"Primary language\",\n  },\n  {\n    name: \"id_type\",\n    type: Sep9FieldType.STRING,\n    description: \"Passport, drivers_license, id_card, etc...\",\n  },\n  {\n    name: \"id_country_code\",\n    type: Sep9FieldType.COUNTRY_CODE,\n    description:\n      \"Country issuing passport or photo ID as ISO 3166-1 alpha-3 code\",\n  },\n  {\n    name: \"id_issue_date\",\n    type: Sep9FieldType.DATE,\n    description: \"ID issue date\",\n  },\n  {\n    name: \"id_expiration_date\",\n    type: Sep9FieldType.DATE,\n    description: \"ID expiration date\",\n  },\n  {\n    name: \"id_number\",\n    type: Sep9FieldType.STRING,\n    description: \"Passport or ID number\",\n  },\n  {\n    name: \"photo_id_front\",\n    type: Sep9FieldType.BINARY,\n    description: \"Image of front of user's photo ID or passport\",\n  },\n  {\n    name: \"photo_id_back\",\n    type: Sep9FieldType.BINARY,\n    description: \"Image of back of user's photo ID or passport\",\n  },\n  {\n    name: \"notary_approval_of_photo_id\",\n    type: Sep9FieldType.BINARY,\n    description: \"Image of notary's approval of photo ID or passport\",\n  },\n  {\n    name: \"ip_address\",\n    type: Sep9FieldType.STRING,\n    description: \"IP address of customer's computer\",\n  },\n  {\n    name: \"photo_proof_residence\",\n    type: Sep9FieldType.BINARY,\n    description:\n      \"Image of a utility bill, bank statement or similar with the user's name and address\",\n  },\n];\n\n/**\n * Sep9FieldsDict contains a dictionary with all SEP-9 fields from v1.3.2 (https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0009.md).\n */\nexport const Sep9FieldsDict: {\n  [key: string]: Sep9Field;\n} = Sep9Fields.reduce(\n  (result: { [key: string]: Sep9Field }, sep9Field: Sep9Field) => ({\n    ...result,\n    [sep9Field.name]: sep9Field,\n  }),\n  {},\n);\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { DataProvider, Types } from \"@stellar/wallet-sdk\";\nimport { getCatchError } from \"@stellar/frontend-helpers\";\nimport { Keypair } from \"stellar-sdk\";\n\nimport { RootState } from \"config/store\";\nimport { settingsSelector } from \"ducks/settings\";\nimport { getAssetData } from \"helpers/getAssetData\";\nimport { getErrorMessage } from \"helpers/getErrorMessage\";\nimport { getErrorString } from \"helpers/getErrorString\";\nimport { getNetworkConfig } from \"helpers/getNetworkConfig\";\nimport { log } from \"helpers/log\";\nimport {\n  ActionStatus,\n  Asset,\n  RejectMessage,\n  AccountInitialState,\n} from \"types/types.d\";\n\ninterface UnfundedAccount extends Types.AccountDetails {\n  id: string;\n}\n\ninterface AccountKeyPair {\n  publicKey: string;\n  secretKey: string;\n}\n\ninterface AccountActionBaseResponse {\n  data: Types.AccountDetails | UnfundedAccount;\n  assets: Asset[];\n  isUnfunded: boolean;\n}\n\ninterface FetchAccountActionResponse extends AccountActionBaseResponse {\n  secretKey: string;\n}\n\ninterface ResponseError extends Error {\n  isUnfunded?: boolean;\n}\n\nexport const fetchAccountAction = createAsyncThunk<\n  FetchAccountActionResponse,\n  AccountKeyPair,\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"account/fetchAccountAction\",\n  async ({ publicKey, secretKey }, { rejectWithValue, getState }) => {\n    const { pubnet } = settingsSelector(getState());\n    const networkConfig = getNetworkConfig(pubnet);\n\n    const dataProvider = new DataProvider({\n      serverUrl: networkConfig.url,\n      accountOrKey: publicKey,\n      networkPassphrase: networkConfig.network,\n    });\n\n    let stellarAccount: Types.AccountDetails | null = null;\n    let assets: Asset[] = [];\n    let isUnfunded = false;\n\n    log.request({\n      title: `Fetching account info`,\n      body: `Public key: ${publicKey}`,\n    });\n\n    try {\n      stellarAccount = await dataProvider.fetchAccountDetails();\n      assets = await getAssetData({\n        balances: stellarAccount.balances,\n        networkUrl: networkConfig.url,\n      });\n    } catch (e) {\n      const error: ResponseError = getCatchError(e);\n\n      if (error.isUnfunded) {\n        log.instruction({ title: `Account is not funded` });\n\n        stellarAccount = {\n          id: publicKey,\n        } as UnfundedAccount;\n\n        isUnfunded = true;\n      } else {\n        const errorMessage = getErrorString(error);\n        log.error({\n          title: `Fetching account \\`${publicKey}\\` failed`,\n          body: errorMessage,\n        });\n        return rejectWithValue({\n          errorString: errorMessage,\n        });\n      }\n    }\n\n    log.response({\n      title: `Account info fetched`,\n      body: stellarAccount,\n    });\n\n    return { data: stellarAccount, assets, isUnfunded, secretKey };\n  },\n);\n\nexport const createRandomAccount = createAsyncThunk<\n  string,\n  undefined,\n  { rejectValue: RejectMessage; state: RootState }\n>(\"account/createRandomAccount\", (_, { rejectWithValue }) => {\n  try {\n    log.instruction({ title: \"Generating new keypair\" });\n    const keypair = Keypair.random();\n    return keypair.secret();\n  } catch (error) {\n    log.error({\n      title: \"Generating new keypair failed\",\n      body: getErrorMessage(error),\n    });\n    return rejectWithValue({\n      errorString:\n        \"Something went wrong while creating random account, please try again.\",\n    });\n  }\n});\n\nexport const fundTestnetAccount = createAsyncThunk<\n  AccountActionBaseResponse,\n  string,\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"account/fundTestnetAccount\",\n  async (publicKey, { rejectWithValue, getState }) => {\n    log.instruction({\n      title: \"The friendbot is funding testnet account\",\n      body: `Public key: ${publicKey}`,\n    });\n\n    const { pubnet } = settingsSelector(getState());\n    const networkConfig = getNetworkConfig(pubnet);\n\n    const dataProvider = new DataProvider({\n      serverUrl: networkConfig.url,\n      accountOrKey: publicKey,\n      networkPassphrase: networkConfig.network,\n    });\n\n    try {\n      await fetch(`https://friendbot.stellar.org?addr=${publicKey}`);\n      const stellarAccount = await dataProvider.fetchAccountDetails();\n      const assets = await getAssetData({\n        balances: stellarAccount.balances,\n        networkUrl: networkConfig.url,\n      });\n\n      log.response({\n        title: \"The friendbot funded account\",\n        body: stellarAccount,\n      });\n\n      return { data: stellarAccount, assets, isUnfunded: false };\n    } catch (error) {\n      log.error({\n        title: \"The friendbot funding of the account failed\",\n        body: getErrorMessage(error),\n      });\n\n      return rejectWithValue({\n        errorString:\n          \"Something went wrong with funding the account, please try again.\",\n      });\n    }\n  },\n);\n\nconst initialState: AccountInitialState = {\n  data: null,\n  assets: [],\n  errorString: undefined,\n  isAuthenticated: false,\n  isUnfunded: false,\n  secretKey: \"\",\n  status: undefined,\n};\n\nconst accountSlice = createSlice({\n  name: \"account\",\n  initialState,\n  reducers: {\n    resetAccountAction: () => initialState,\n    resetAccountStatusAction: (state) => {\n      state.status = undefined;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchAccountAction.pending, (state = initialState) => {\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(fetchAccountAction.fulfilled, (state, action) => {\n      state.data = action.payload.data;\n      state.assets = action.payload.assets;\n      state.isAuthenticated = Boolean(action.payload.data);\n      state.isUnfunded = action.payload.isUnfunded;\n      state.secretKey = action.payload.secretKey;\n      state.status = ActionStatus.SUCCESS;\n    });\n    builder.addCase(fetchAccountAction.rejected, (state, action) => {\n      state.errorString = action.payload?.errorString;\n      state.status = ActionStatus.ERROR;\n    });\n\n    builder.addCase(createRandomAccount.pending, (state = initialState) => {\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(createRandomAccount.fulfilled, (state, action) => {\n      state.secretKey = action.payload;\n      state.status = ActionStatus.SUCCESS;\n    });\n    builder.addCase(createRandomAccount.rejected, (state, action) => {\n      state.errorString = action.payload?.errorString;\n      state.status = ActionStatus.ERROR;\n    });\n\n    builder.addCase(fundTestnetAccount.pending, (state) => {\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(fundTestnetAccount.fulfilled, (state, action) => {\n      state.data = action.payload.data;\n      state.assets = action.payload.assets;\n      state.isUnfunded = action.payload.isUnfunded;\n      state.status = ActionStatus.SUCCESS;\n    });\n    builder.addCase(fundTestnetAccount.rejected, (state, action) => {\n      state.errorString = action.payload?.errorString;\n      state.status = ActionStatus.ERROR;\n    });\n  },\n});\n\nexport const accountSelector = (state: RootState) => state.account;\n\nexport const { reducer } = accountSlice;\nexport const { resetAccountAction, resetAccountStatusAction } =\n  accountSlice.actions;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"config/store\";\nimport { ActiveAssetInitialState } from \"types/types.d\";\n\nconst initialState: ActiveAssetInitialState = {\n  action: undefined,\n  status: undefined,\n};\n\nconst activeAssetSlice = createSlice({\n  name: \"activeAsset\",\n  initialState,\n  reducers: {\n    setActiveAssetAction: (state, action) => {\n      state.action = action.payload;\n    },\n    setActiveAssetStatusAction: (state, action) => {\n      if (state.action) {\n        state.status = action.payload;\n      }\n    },\n    resetActiveAssetAction: () => initialState,\n  },\n});\n\nexport const activeAssetSelector = (state: RootState) => state.activeAsset;\n\nexport const { reducer } = activeAssetSlice;\nexport const {\n  setActiveAssetAction,\n  setActiveAssetStatusAction,\n  resetActiveAssetAction,\n} = activeAssetSlice.actions;\n","import { Server } from \"stellar-sdk\";\nimport { getAssetSettingsFromToml } from \"helpers/getAssetSettingsFromToml\";\nimport { log } from \"helpers/log\";\nimport { normalizeAssetProps } from \"helpers/normalizeAssetProps\";\nimport { Asset, SearchParamAsset } from \"types/types.d\";\n\ntype GetAssetOverridesDataProps = {\n  assetOverrides: SearchParamAsset[];\n  networkUrl: string;\n};\n\nexport const getAssetOverridesData = async ({\n  assetOverrides,\n  networkUrl,\n}: GetAssetOverridesDataProps) => {\n  if (!assetOverrides.length) {\n    return [];\n  }\n\n  let response: Asset[] = [];\n\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < assetOverrides.length; i++) {\n    const { assetString, homeDomain } = assetOverrides[i];\n    const [assetCode, assetIssuer] = assetString.split(\":\");\n\n    const server = new Server(networkUrl);\n\n    // eslint-disable-next-line no-await-in-loop\n    const assetResponse = await server\n      .assets()\n      .forCode(assetCode)\n      .forIssuer(assetIssuer)\n      .call();\n\n    if (!assetResponse.records.length) {\n      log.error({\n        title: `Asset \\`${assetString}\\` does not exist.`,\n      });\n      break;\n    }\n\n    // eslint-disable-next-line no-await-in-loop\n    const { supportedActions } = await getAssetSettingsFromToml({\n      assetId: assetString,\n      networkUrl,\n      homeDomainOverride: homeDomain,\n    });\n\n    // eslint-disable-next-line no-await-in-loop\n    const data = normalizeAssetProps({\n      assetCode,\n      assetIssuer,\n      assetType: assetResponse.records[0].asset_type,\n      homeDomain,\n      supportedActions,\n    });\n\n    response = [...response, data];\n  }\n\n  return response;\n};\n","import { URL_KEY_PAIR_SEPARATOR_CHAR } from \"constants/settings\";\nimport { SearchParamAsset } from \"types/types.d\";\n\n// eslint-disable-next-line max-len\n// keyPairsString example:SRT:GCDNJUBQSX7AJWLJACMJ7I4BC3Z47BQUTMHEICZLE6MU4KQBRYG5JY6B|homeDomain>testanchor.stellar.org|someKey>someValue\nexport const searchKeyPairStringToArray = (\n  keyPairString: string,\n): SearchParamAsset[] => {\n  const valuesArray = keyPairString ? keyPairString.split(\",\") : [];\n\n  if (!valuesArray.length) {\n    return [];\n  }\n\n  return valuesArray.reduce((result: SearchParamAsset[], item) => {\n    const paramArr = item.split(\"|\");\n    const id = paramArr[0];\n    const values = paramArr\n      .splice(1, paramArr.length - 1)\n      .reduce((paramRes, val) => {\n        const [key, value] = val.split(URL_KEY_PAIR_SEPARATOR_CHAR);\n\n        return { ...paramRes, [key]: value };\n      }, {});\n\n    return [...result, { assetString: id, ...values }];\n  }, []);\n};\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"config/store\";\nimport { settingsSelector } from \"ducks/settings\";\nimport { getErrorMessage } from \"helpers/getErrorMessage\";\nimport { getAssetOverridesData } from \"helpers/getAssetOverridesData\";\nimport { getNetworkConfig } from \"helpers/getNetworkConfig\";\nimport { log } from \"helpers/log\";\nimport { searchKeyPairStringToArray } from \"helpers/searchKeyPairStringToArray\";\nimport {\n  ActionStatus,\n  Asset,\n  AssetOverridesInitialState,\n  RejectMessage,\n} from \"types/types.d\";\n\nexport const addAssetOverridesAction = createAsyncThunk<\n  Asset[],\n  string,\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"assetOverrides/addAssetOverridesAction\",\n  async (assetOverridesString, { rejectWithValue, getState }) => {\n    const { pubnet } = settingsSelector(getState());\n\n    try {\n      const assetOverrides = searchKeyPairStringToArray(assetOverridesString);\n\n      const response = await getAssetOverridesData({\n        assetOverrides,\n        networkUrl: getNetworkConfig(pubnet).url,\n      });\n\n      return response;\n    } catch (error) {\n      const errorMessage = getErrorMessage(error);\n      log.error({ title: errorMessage });\n      return rejectWithValue({\n        errorString: errorMessage,\n      });\n    }\n  },\n);\n\nconst initialState: AssetOverridesInitialState = {\n  data: [],\n  errorString: undefined,\n  status: undefined,\n};\n\nconst assetOverridesSlice = createSlice({\n  name: \"assetOverrides\",\n  initialState,\n  reducers: {\n    resetAssetOverridesStatusAction: (state) => {\n      state.status = undefined;\n    },\n    resetAssetOverridesAction: () => initialState,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(addAssetOverridesAction.pending, (state = initialState) => {\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(addAssetOverridesAction.fulfilled, (state, action) => {\n      state.data = action.payload;\n      state.status = ActionStatus.SUCCESS;\n    });\n    builder.addCase(addAssetOverridesAction.rejected, (state, action) => {\n      state.errorString = action.payload?.errorString;\n      state.status = ActionStatus.ERROR;\n    });\n  },\n});\n\nexport const assetOverridesSelector = (state: RootState) =>\n  state.assetOverrides;\n\nexport const { reducer } = assetOverridesSlice;\nexport const {\n  resetAssetOverridesStatusAction,\n  resetAssetOverridesAction,\n} = assetOverridesSlice.actions;\n","import { Server } from \"stellar-sdk\";\nimport { Types } from \"@stellar/wallet-sdk\";\nimport { getAssetSettingsFromToml } from \"helpers/getAssetSettingsFromToml\";\nimport { normalizeAssetProps } from \"helpers/normalizeAssetProps\";\nimport { log } from \"helpers/log\";\nimport { Asset } from \"types/types.d\";\n\ninterface GetUntrustedAssetDataProps {\n  assetsToAdd: string[];\n  accountAssets?: Types.BalanceMap;\n  networkUrl: string;\n}\n\nexport const getUntrustedAssetData = async ({\n  assetsToAdd,\n  accountAssets,\n  networkUrl,\n}: GetUntrustedAssetDataProps) => {\n  if (!assetsToAdd.length) {\n    log.instruction({ title: `No assets to fetch` });\n  }\n\n  let response: Asset[] = [];\n\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < assetsToAdd.length; i++) {\n    const assetString = assetsToAdd[i];\n    const [assetCode, assetIssuer] = assetString.split(\":\");\n\n    if (accountAssets?.[assetString]) {\n      log.instruction({ title: `Asset \\`${assetString}\\` is already trusted` });\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    log.request({ title: `Fetching asset \\`${assetString}\\` record` });\n\n    const server = new Server(networkUrl);\n\n    // eslint-disable-next-line no-await-in-loop\n    const assetResponse = await server\n      .assets()\n      .forCode(assetCode)\n      .forIssuer(assetIssuer)\n      .call();\n\n    if (!assetResponse.records.length) {\n      log.error({\n        title: `Asset \\`${assetString}\\` does not exist`,\n      });\n\n      response = [\n        ...response,\n        {\n          assetString,\n          assetCode,\n          assetIssuer,\n          assetType: \"none\",\n          total: \"0\",\n          notExist: true,\n          source: {},\n        },\n      ];\n    } else {\n      log.response({\n        title: `Asset \\`${assetString}\\` record fetched`,\n        body: assetResponse.records[0],\n      });\n\n      // eslint-disable-next-line no-await-in-loop\n      const { homeDomain, supportedActions } = await getAssetSettingsFromToml({\n        assetId: assetString,\n        networkUrl,\n      });\n\n      // eslint-disable-next-line no-await-in-loop\n      const data = normalizeAssetProps({\n        assetCode,\n        assetIssuer,\n        assetType: assetResponse.records[0].asset_type,\n        homeDomain,\n        supportedActions,\n        isUntrusted: true,\n      });\n\n      response = [...response, data];\n\n      log.instruction({\n        title: `Asset \\`${assetString}\\` added`,\n      });\n    }\n  }\n\n  return response;\n};\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { getCatchError } from \"@stellar/frontend-helpers\";\nimport { RootState } from \"config/store\";\nimport { accountSelector } from \"ducks/account\";\nimport { settingsSelector } from \"ducks/settings\";\nimport { getErrorMessage } from \"helpers/getErrorMessage\";\nimport { getUntrustedAssetData } from \"helpers/getUntrustedAssetData\";\nimport { getNetworkConfig } from \"helpers/getNetworkConfig\";\nimport { log } from \"helpers/log\";\nimport {\n  ActionStatus,\n  RejectMessage,\n  Asset,\n  UntrustedAssetsInitialState,\n} from \"types/types.d\";\n\nconst removeExistingAssets = ({\n  assetsString,\n  untrustedAssets,\n}: {\n  assetsString: string;\n  untrustedAssets: Asset[];\n}) => {\n  const assetsArray = assetsString.split(\",\");\n\n  if (!untrustedAssets.length) {\n    return assetsArray;\n  }\n\n  const untrustedAssetsList = untrustedAssets.map((ua) => ua.assetString);\n\n  return assetsArray.filter(\n    (asset: string) => !untrustedAssetsList.includes(asset),\n  );\n};\n\nexport const addUntrustedAssetAction = createAsyncThunk<\n  Asset[],\n  string,\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"untrustedAssets/addUntrustedAssetAction\",\n  async (assetsString, { rejectWithValue, getState }) => {\n    const { data: accountData } = accountSelector(getState());\n    const { pubnet } = settingsSelector(getState());\n    const { data } = untrustedAssetsSelector(getState());\n\n    try {\n      const assetsListToAdd = removeExistingAssets({\n        assetsString,\n        untrustedAssets: data,\n      });\n\n      if (!assetsListToAdd.length) {\n        return [];\n      }\n\n      log.instruction({ title: \"Adding untrusted asset\" });\n\n      let response;\n\n      try {\n        response = await getUntrustedAssetData({\n          assetsToAdd: assetsListToAdd,\n          accountAssets: accountData?.balances,\n          networkUrl: getNetworkConfig(pubnet).url,\n        });\n      } catch (e) {\n        const error = getCatchError(e);\n        throw new Error(error.message);\n      }\n\n      if (!response.length) {\n        log.instruction({ title: \"No new assets to add\" });\n        return [];\n      }\n\n      return response;\n    } catch (e) {\n      const error = getCatchError(e);\n      log.error({ title: error.toString() });\n      return rejectWithValue({\n        errorString: getErrorMessage(error),\n      });\n    }\n  },\n);\n\nexport const removeUntrustedAssetAction = createAsyncThunk<\n  Asset[],\n  string,\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"untrustedAssets/removeUntrustedAssetAction\",\n  (removeAssetString, { getState }) => {\n    const { data } = untrustedAssetsSelector(getState());\n    return data.filter((ua) => ua.assetString !== removeAssetString);\n  },\n);\n\nconst initialState: UntrustedAssetsInitialState = {\n  data: [],\n  errorString: undefined,\n  status: undefined,\n};\n\nconst untrustedAssetsSlice = createSlice({\n  name: \"untrustedAssets\",\n  initialState,\n  reducers: {\n    resetUntrustedAssetStatusAction: (state) => {\n      state.status = undefined;\n    },\n    resetUntrustedAssetsAction: () => initialState,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(addUntrustedAssetAction.pending, (state = initialState) => {\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(addUntrustedAssetAction.fulfilled, (state, action) => {\n      state.data = [...state.data, ...action.payload];\n      state.status = ActionStatus.SUCCESS;\n    });\n    builder.addCase(addUntrustedAssetAction.rejected, (state, action) => {\n      state.errorString = action.payload?.errorString;\n      state.status = ActionStatus.ERROR;\n    });\n\n    builder.addCase(\n      removeUntrustedAssetAction.pending,\n      (state = initialState) => {\n        state.status = ActionStatus.PENDING;\n      },\n    );\n    builder.addCase(removeUntrustedAssetAction.fulfilled, (state, action) => {\n      state.data = action.payload;\n      state.status = ActionStatus.SUCCESS;\n    });\n  },\n});\n\nexport const untrustedAssetsSelector = (state: RootState) =>\n  state.untrustedAssets;\n\nexport const { reducer } = untrustedAssetsSlice;\nexport const { resetUntrustedAssetStatusAction, resetUntrustedAssetsAction } =\n  untrustedAssetsSlice.actions;\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"config/store\";\nimport { accountSelector } from \"ducks/account\";\nimport { assetOverridesSelector } from \"ducks/assetOverrides\";\nimport { untrustedAssetsSelector } from \"ducks/untrustedAssets\";\nimport { getErrorMessage } from \"helpers/getErrorMessage\";\nimport { log } from \"helpers/log\";\nimport {\n  ActionStatus,\n  RejectMessage,\n  Asset,\n  AllAssetsInitialState,\n  AssetCategory,\n} from \"types/types.d\";\n\ntype IncludeAssetOverridesProps = {\n  assets: Asset[];\n  assetCategory: AssetCategory;\n  assetOverrides: Asset[];\n};\n\nconst includeAssetOverrides = ({\n  assets,\n  assetCategory,\n  assetOverrides,\n}: IncludeAssetOverridesProps) =>\n  assets.reduce((result: Asset[], asset) => {\n    const overrideAsset = assetOverrides.find(\n      (ao) => ao.assetString === asset.assetString,\n    );\n    const updatedAsset = overrideAsset\n      ? {\n          ...overrideAsset,\n          category: assetCategory,\n          isUntrusted: asset.isUntrusted,\n          isOverride: true,\n          total: asset.total,\n        }\n      : { ...asset, category: assetCategory };\n\n    return [...result, updatedAsset];\n  }, []);\n\nexport const getAllAssetsAction = createAsyncThunk<\n  Asset[],\n  undefined,\n  { rejectValue: RejectMessage; state: RootState }\n>(\"allAssets/getAllAssetsAction\", (_, { rejectWithValue, getState }) => {\n  const { assets } = accountSelector(getState());\n  const { data: untrustedAssets } = untrustedAssetsSelector(getState());\n  const { data: assetOverrides } = assetOverridesSelector(getState());\n\n  const trusted = includeAssetOverrides({\n    assets,\n    assetCategory: AssetCategory.TRUSTED,\n    assetOverrides,\n  });\n\n  const untrusted = includeAssetOverrides({\n    assets: untrustedAssets,\n    assetCategory: AssetCategory.UNTRUSTED,\n    assetOverrides,\n  });\n\n  try {\n    return [...trusted, ...untrusted];\n  } catch (error) {\n    const errorMessage = getErrorMessage(error);\n    log.error({ title: errorMessage });\n    return rejectWithValue({\n      errorString: errorMessage,\n    });\n  }\n});\n\nconst initialState: AllAssetsInitialState = {\n  data: [],\n  errorString: undefined,\n  status: undefined,\n};\n\nconst allAssetsSlice = createSlice({\n  name: \"allAssets\",\n  initialState,\n  reducers: {\n    resetAllAssetsStatusAction: (state) => {\n      state.status = undefined;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(getAllAssetsAction.pending, (state = initialState) => {\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(getAllAssetsAction.fulfilled, (state, action) => {\n      state.data = action.payload;\n      state.status = ActionStatus.SUCCESS;\n    });\n    builder.addCase(getAllAssetsAction.rejected, (state, action) => {\n      state.errorString = action.payload?.errorString;\n      state.status = ActionStatus.ERROR;\n    });\n  },\n});\n\nexport const allAssetsSelector = (state: RootState) => state.allAssets;\n\nexport const { reducer } = allAssetsSlice;\nexport const { resetAllAssetsStatusAction } = allAssetsSlice.actions;\n","import StellarSdk, {\n  Account,\n  Keypair,\n  Operation,\n  TransactionBuilder,\n} from \"stellar-sdk\";\nimport { getErrorMessage } from \"helpers/getErrorMessage\";\nimport { log } from \"helpers/log\";\nimport { ClaimableAsset } from \"types/types.d\";\n\ninterface ClaimClaimableBalanceProps {\n  secretKey: string;\n  balance: ClaimableAsset;\n  assetCode: string;\n  networkPassphrase: string;\n  networkUrl: string;\n  fee: string;\n}\n\nexport const claimClaimableBalance = async ({\n  secretKey,\n  balance,\n  assetCode,\n  networkPassphrase,\n  networkUrl,\n  fee,\n}: ClaimClaimableBalanceProps) => {\n  log.instruction({\n    title: `Claiming ${balance.total} ${assetCode}`,\n    body: `Balance ID: ${balance.id}, sponsor: ${balance.sponsor}`,\n  });\n\n  try {\n    const keypair = Keypair.fromSecret(secretKey);\n    const server = new StellarSdk.Server(networkUrl);\n    const accountRecord = await server\n      .accounts()\n      .accountId(keypair.publicKey())\n      .call();\n\n    log.instruction({\n      title:\n        \"Loading account to get a sequence number for `claimClaimableBalance` transaction\",\n    });\n\n    const account = new Account(keypair.publicKey(), accountRecord.sequence);\n    log.instruction({ title: \"Building `claimClaimableBalance` transaction\" });\n\n    const transaction = new TransactionBuilder(account, {\n      fee,\n      networkPassphrase,\n    })\n      .addOperation(\n        Operation.claimClaimableBalance({\n          balanceId: balance.id,\n        }),\n      )\n      .setTimeout(0)\n      .build();\n\n    transaction.sign(keypair);\n\n    log.request({\n      title: \"Submitting `claimClaimableBalance` transaction\",\n      body: transaction,\n    });\n\n    const result = await server.submitTransaction(transaction);\n    log.response({\n      title: \"Submitted `claimClaimableBalance` transaction\",\n      body: result,\n    });\n    log.instruction({ title: `Claimed ${balance.total} ${assetCode}` });\n\n    return result;\n  } catch (error) {\n    const errorMessage = getErrorMessage(error);\n\n    log.error({\n      title: \"`claimClaimableBalance` transaction failed\",\n      body: errorMessage,\n    });\n    throw new Error(errorMessage);\n  }\n};\n","import StellarSdk, {\n  TransactionBuilder,\n  BASE_FEE,\n  Operation,\n  Asset,\n  Keypair,\n} from \"stellar-sdk\";\nimport { getErrorMessage } from \"helpers/getErrorMessage\";\nimport { log } from \"helpers/log\";\nimport { TrustAssetParam } from \"types/types.d\";\n\nexport const trustAsset = async ({\n  secretKey,\n  untrustedAsset,\n  networkUrl,\n  networkPassphrase,\n}: {\n  secretKey: string;\n  untrustedAsset: TrustAssetParam;\n  networkUrl: string;\n  networkPassphrase: string;\n}) => {\n  try {\n    log.instruction({\n      title: `Adding \\`${untrustedAsset.assetCode}:${untrustedAsset.assetIssuer}\\` trustline`,\n    });\n    const keypair = Keypair.fromSecret(secretKey);\n    const server = new StellarSdk.Server(networkUrl);\n\n    log.instruction({\n      title:\n        \"Loading account to get a sequence number for add trustline transaction\",\n    });\n    const account = await server.loadAccount(keypair.publicKey());\n\n    log.instruction({ title: \"Building add trustline transaction\" });\n    const transaction = new TransactionBuilder(account, {\n      fee: BASE_FEE,\n      networkPassphrase,\n    })\n      .addOperation(\n        Operation.changeTrust({\n          asset: new Asset(\n            untrustedAsset.assetCode,\n            untrustedAsset.assetIssuer,\n          ),\n        }),\n      )\n      .setTimeout(0)\n      .build();\n\n    transaction.sign(keypair);\n\n    log.request({\n      title: \"Submitting add trustline transaction\",\n      body: transaction,\n    });\n    const result = await server.submitTransaction(transaction);\n\n    log.response({\n      title: \"Submitted add trustline transaction\",\n      body: result,\n    });\n    log.instruction({\n      title: `Asset \\`${untrustedAsset.assetCode}:${untrustedAsset.assetIssuer}\\` trustline added`,\n    });\n\n    return result;\n  } catch (error) {\n    const errorMessage = getErrorMessage(error);\n    log.error({\n      title: \"Add trustline transaction failed\",\n      body: errorMessage,\n    });\n    throw new Error(errorMessage);\n  }\n};\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { BASE_FEE } from \"stellar-sdk\";\nimport { RootState } from \"config/store\";\nimport { accountSelector } from \"ducks/account\";\nimport { settingsSelector } from \"ducks/settings\";\nimport { getErrorMessage } from \"helpers/getErrorMessage\";\nimport { getNetworkConfig } from \"helpers/getNetworkConfig\";\nimport { log } from \"helpers/log\";\nimport { claimClaimableBalance } from \"methods/claimClaimableBalance\";\nimport { trustAsset } from \"methods/trustAsset\";\nimport {\n  ActionStatus,\n  ClaimAssetInitialState,\n  ClaimableAsset,\n  RejectMessage,\n} from \"types/types.d\";\n\nexport const claimAssetAction = createAsyncThunk<\n  { result: any },\n  ClaimableAsset,\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"claimAsset/claimAssetAction\",\n  async (balance, { rejectWithValue, getState }) => {\n    const { data, secretKey } = accountSelector(getState());\n    const { pubnet } = settingsSelector(getState());\n\n    const networkConfig = getNetworkConfig(pubnet);\n    const { assetCode, assetIssuer } = balance;\n    // Cannot use balance.assetString because it's an id\n    const assetString = assetIssuer ? `${assetCode}:${assetIssuer}` : assetCode;\n\n    log.instruction({\n      title: `Claiming asset \\`${assetString}\\``,\n    });\n\n    let trustedAssetAdded;\n\n    try {\n      if (assetString !== \"XLM\" && !data?.balances[assetString]) {\n        log.instruction({\n          title: \"Not a trusted asset, need to add a trustline\",\n        });\n\n        try {\n          await trustAsset({\n            secretKey,\n            networkPassphrase: networkConfig.network,\n            networkUrl: networkConfig.url,\n            untrustedAsset: {\n              assetString,\n              assetCode,\n              assetIssuer,\n            },\n          });\n\n          trustedAssetAdded = `${assetString}`;\n        } catch (error) {\n          throw new Error(getErrorMessage(error));\n        }\n      }\n\n      try {\n        const result = await claimClaimableBalance({\n          secretKey,\n          balance,\n          assetCode,\n          networkPassphrase: networkConfig.network,\n          networkUrl: networkConfig.url,\n          fee: BASE_FEE,\n        });\n\n        return { result, trustedAssetAdded };\n      } catch (error) {\n        throw new Error(getErrorMessage(error));\n      }\n    } catch (error) {\n      const errorMessage = getErrorMessage(error);\n      log.error({ title: errorMessage });\n      return rejectWithValue({\n        errorString: errorMessage,\n      });\n    }\n  },\n);\n\nconst initialState: ClaimAssetInitialState = {\n  data: {\n    result: null,\n    trustedAssetAdded: undefined,\n  },\n  status: undefined,\n  errorString: undefined,\n};\n\nconst claimAssetSlice = createSlice({\n  name: \"claimAsset\",\n  initialState,\n  reducers: {\n    resetClaimAssetAction: () => initialState,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(claimAssetAction.pending, (state) => {\n      state.errorString = undefined;\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(claimAssetAction.fulfilled, (state, action) => {\n      state.data = action.payload;\n      state.status = ActionStatus.SUCCESS;\n    });\n    builder.addCase(claimAssetAction.rejected, (state, action) => {\n      state.errorString = action.payload?.errorString;\n      state.status = ActionStatus.ERROR;\n    });\n  },\n});\n\nexport const { reducer } = claimAssetSlice;\nexport const { resetClaimAssetAction } = claimAssetSlice.actions;\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport StellarSdk, { ServerApi } from \"stellar-sdk\";\nimport { RootState } from \"config/store\";\nimport { settingsSelector } from \"ducks/settings\";\nimport { getErrorMessage } from \"helpers/getErrorMessage\";\nimport { getNetworkConfig } from \"helpers/getNetworkConfig\";\nimport { log } from \"helpers/log\";\nimport {\n  ActionStatus,\n  AssetType,\n  ClaimableAsset,\n  ClaimableBalancesInitialState,\n  RejectMessage,\n} from \"types/types.d\";\n\nexport const fetchClaimableBalancesAction = createAsyncThunk<\n  { records: any[] },\n  { publicKey: string },\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"claimableBalances/fetchClaimableBalancesAction\",\n  async ({ publicKey }, { rejectWithValue, getState }) => {\n    const { pubnet } = settingsSelector(getState());\n    const networkConfig = getNetworkConfig(pubnet);\n    const server = new StellarSdk.Server(networkConfig.url);\n\n    try {\n      const claimableBalanceResponse = await server\n        .claimableBalances()\n        .claimant(publicKey)\n        .call();\n\n      const cleanedRecords: ClaimableAsset[] = [];\n\n      claimableBalanceResponse.records.forEach(\n        (record: ServerApi.ClaimableBalanceRecord) => {\n          let assetCode;\n          let assetIssuer;\n\n          if (record.asset === AssetType.NATIVE) {\n            assetCode = \"XLM\";\n          } else {\n            [assetCode, assetIssuer] = record.asset.split(\":\");\n          }\n\n          const cleanedRecord = {\n            id: record.id,\n            // assetString needs to be a record.id to have a unique ID for\n            // active asset, assetCode:assetIssuer would conflict with other\n            // assets\n            assetString: record.id,\n            assetCode,\n            assetIssuer,\n            total: record.amount,\n            sponsor: record.sponsor,\n            lastModifiedLedger: record.last_modified_ledger,\n            isClaimableBalance: true,\n            source: record,\n          };\n\n          log.response({\n            title: `Claimable balance of ${record.amount} ${assetCode} available`,\n            body: cleanedRecord,\n          });\n\n          cleanedRecords.push(cleanedRecord as ClaimableAsset);\n        },\n      );\n\n      return {\n        records: cleanedRecords,\n      };\n    } catch (error) {\n      const errorMessage = getErrorMessage(error);\n      log.error({ title: errorMessage });\n      return rejectWithValue({\n        errorString: getErrorMessage(error),\n      });\n    }\n  },\n);\n\nconst initialState: ClaimableBalancesInitialState = {\n  data: {\n    records: null,\n  },\n  errorString: undefined,\n  status: undefined,\n};\n\nconst claimableBalancesSlice = createSlice({\n  name: \"claimableBalances\",\n  initialState,\n  reducers: {\n    resetClaimableBalancesAction: () => initialState,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(\n      fetchClaimableBalancesAction.pending,\n      (state = initialState) => {\n        state.status = ActionStatus.PENDING;\n      },\n    );\n    builder.addCase(fetchClaimableBalancesAction.fulfilled, (state, action) => {\n      state.data = action.payload;\n      state.status = ActionStatus.SUCCESS;\n    });\n    builder.addCase(fetchClaimableBalancesAction.rejected, (state, action) => {\n      state.errorString = action.payload?.errorString;\n      state.status = ActionStatus.ERROR;\n    });\n  },\n});\n\nexport const accountSelector = (state: RootState) => state.account;\n\nexport const { reducer } = claimableBalancesSlice;\nexport const { resetClaimableBalancesAction } = claimableBalancesSlice.actions;\n","import { get } from \"lodash\";\nimport { log } from \"helpers/log\";\nimport { CheckInfoData, AnchorActionType } from \"types/types.d\";\n\nexport const checkDepositWithdrawInfo = async ({\n  type,\n  transferServerUrl,\n  assetCode,\n}: {\n  type: AnchorActionType;\n  transferServerUrl: string;\n  assetCode: string;\n}): Promise<CheckInfoData> => {\n  log.instruction({\n    title: `Checking \\`/info\\` endpoint to ensure this currency is enabled for ${\n      type === AnchorActionType.DEPOSIT ? \"deposit\" : \"withdrawal\"\n    }`,\n  });\n  const infoURL = `${transferServerUrl}/info`;\n  log.request({ title: `GET \\`${infoURL}\\`` });\n\n  const info = await fetch(infoURL);\n  const infoJson = await info.json();\n  log.response({ title: `GET \\`${infoURL}\\``, body: infoJson });\n\n  if (!get(infoJson, [type, assetCode, \"enabled\"])) {\n    throw new Error(\"Asset is not enabled in the `/info` endpoint\");\n  }\n\n  return infoJson;\n};\n","import { getErrorMessage } from \"helpers/getErrorMessage\";\nimport { log } from \"helpers/log\";\nimport { TransactionStatus } from \"types/types.d\";\n\nexport const pollDepositUntilComplete = async ({\n  transactionId,\n  token,\n  transferServerUrl,\n  trustAssetCallback,\n}: {\n  transactionId: string;\n  token: string;\n  transferServerUrl: string;\n  trustAssetCallback: () => Promise<string>;\n}) => {\n  let currentStatus = TransactionStatus.INCOMPLETE;\n  let trustedAssetAdded;\n\n  const transactionUrl = new URL(\n    `${transferServerUrl}/transaction?id=${transactionId}`,\n  );\n  log.instruction({\n    title: `Polling for updates \\`${transactionUrl.toString()}\\``,\n  });\n\n  const endStatuses = [\n    TransactionStatus.PENDING_EXTERNAL,\n    TransactionStatus.COMPLETED,\n    TransactionStatus.ERROR,\n  ];\n\n  while (!endStatuses.includes(currentStatus)) {\n    // eslint-disable-next-line no-await-in-loop\n    const response = await fetch(transactionUrl.toString(), {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n\n    // eslint-disable-next-line no-await-in-loop\n    const transactionJson = await response.json();\n\n    if (transactionJson.transaction.status !== currentStatus) {\n      currentStatus = transactionJson.transaction.status;\n      // eslint-disable-next-line no-param-reassign\n      // popup.location.href = transactionJson.transaction.more_info_url;\n      log.instruction({\n        title: `Transaction \\`${transactionId}\\` is in \\`${transactionJson.transaction.status}\\` status`,\n      });\n\n      switch (currentStatus) {\n        case TransactionStatus.PENDING_USER_TRANSFER_START: {\n          log.instruction({\n            title:\n              \"The anchor is waiting on you to take the action described in the popup\",\n          });\n          break;\n        }\n        case TransactionStatus.PENDING_ANCHOR: {\n          log.instruction({\n            title: \"The anchor is processing the transaction\",\n          });\n          break;\n        }\n        case TransactionStatus.PENDING_STELLAR: {\n          log.instruction({\n            title: \"The Stellar network is processing the transaction\",\n          });\n          break;\n        }\n        case TransactionStatus.PENDING_EXTERNAL: {\n          log.instruction({\n            title: \"The transaction is being processed by an external system\",\n          });\n          break;\n        }\n        case TransactionStatus.PENDING_TRUST: {\n          log.instruction({\n            title:\n              \"You must add a trustline to the asset in order to receive your deposit\",\n          });\n\n          try {\n            // eslint-disable-next-line no-await-in-loop\n            trustedAssetAdded = await trustAssetCallback();\n          } catch (error) {\n            throw new Error(getErrorMessage(error));\n          }\n          break;\n        }\n        case TransactionStatus.PENDING_USER: {\n          log.instruction({\n            title:\n              \"The anchor is waiting for you to take the action described in the popup\",\n          });\n          break;\n        }\n        case TransactionStatus.ERROR: {\n          log.instruction({\n            title: \"There was a problem processing your transaction\",\n          });\n          break;\n        }\n        default:\n        // do nothing\n      }\n    }\n\n    // run loop every 2 seconds\n    // eslint-disable-next-line no-await-in-loop\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n  }\n\n  log.instruction({ title: `Transaction status \\`${currentStatus}\\`` });\n  return { currentStatus, trustedAssetAdded };\n};\n","import StellarSdk, {\n  Account,\n  Asset,\n  BASE_FEE,\n  Keypair,\n  Operation,\n  TransactionBuilder,\n} from \"stellar-sdk\";\nimport { log } from \"helpers/log\";\nimport { createMemoFromType } from \"methods/createMemoFromType\";\nimport { AnyObject, TransactionStatus } from \"types/types.d\";\n\nexport const pollWithdrawUntilComplete = async ({\n  amount,\n  secretKey,\n  transactionId,\n  token,\n  transferServerUrl,\n  networkPassphrase,\n  networkUrl,\n  assetCode,\n  assetIssuer,\n}: {\n  amount: string;\n  secretKey: string;\n  transactionId: string;\n  token: string;\n  transferServerUrl: string;\n  networkPassphrase: string;\n  networkUrl: string;\n  assetCode: string;\n  assetIssuer: string;\n}) => {\n  const keypair = Keypair.fromSecret(secretKey);\n  const server = new StellarSdk.Server(networkUrl);\n  let currentStatus = TransactionStatus.INCOMPLETE;\n\n  const transactionUrl = new URL(\n    `${transferServerUrl}/transaction?id=${transactionId}`,\n  );\n  log.instruction({\n    title: `Polling for updates \\`${transactionUrl.toString()}\\``,\n  });\n\n  const endStatuses = [TransactionStatus.COMPLETED, TransactionStatus.ERROR];\n  let transactionJson = { transaction: {} as AnyObject };\n\n  while (!endStatuses.includes(currentStatus)) {\n    // eslint-disable-next-line no-await-in-loop\n    const response = await fetch(transactionUrl.toString(), {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    // eslint-disable-next-line no-await-in-loop\n    transactionJson = await response.json();\n\n    if (transactionJson.transaction.status !== currentStatus) {\n      currentStatus = transactionJson.transaction.status;\n\n      log.instruction({\n        title: `Transaction \\`${transactionId}\\` is in \\`${transactionJson.transaction.status}\\` status`,\n      });\n\n      switch (currentStatus) {\n        case TransactionStatus.PENDING_USER_TRANSFER_START: {\n          log.instruction({\n            title: \"The anchor is waiting for the funds for withdrawal\",\n          });\n\n          const memo = createMemoFromType(\n            transactionJson.transaction.withdraw_memo,\n            transactionJson.transaction.withdraw_memo_type,\n          );\n\n          log.request({\n            title: \"Fetching account sequence number\",\n            body: keypair.publicKey(),\n          });\n\n          // eslint-disable-next-line no-await-in-loop\n          const { sequence } = await server\n            .accounts()\n            .accountId(keypair.publicKey())\n            .call();\n\n          log.response({\n            title: \"Fetching account sequence number\",\n            body: sequence,\n          });\n\n          const account = new Account(keypair.publicKey(), sequence);\n          const txn = new TransactionBuilder(account, {\n            fee: BASE_FEE,\n            networkPassphrase,\n          })\n            .addOperation(\n              Operation.payment({\n                destination:\n                  transactionJson.transaction.withdraw_anchor_account,\n                asset: new Asset(assetCode, assetIssuer),\n                amount,\n              }),\n            )\n            .addMemo(memo)\n            .setTimeout(0)\n            .build();\n\n          txn.sign(keypair);\n\n          log.request({\n            title: \"Submitting withdrawal transaction to Stellar\",\n            body: txn,\n          });\n\n          // eslint-disable-next-line no-await-in-loop\n          const horizonResponse = await server.submitTransaction(txn);\n\n          log.response({\n            title: \"Submitted withdrawal transaction to Stellar\",\n            body: horizonResponse,\n          });\n          break;\n        }\n        case TransactionStatus.PENDING_ANCHOR: {\n          log.instruction({\n            title: \"The anchor is processing the transaction\",\n          });\n          break;\n        }\n        case TransactionStatus.PENDING_STELLAR: {\n          log.instruction({\n            title: \"The Stellar network is processing the transaction\",\n          });\n          break;\n        }\n        case TransactionStatus.PENDING_EXTERNAL: {\n          log.instruction({\n            title: \"The transaction is being processed by an external system\",\n          });\n          break;\n        }\n        case TransactionStatus.PENDING_USER: {\n          log.instruction({\n            title:\n              \"The anchor is waiting for you to take the action described in the popup\",\n          });\n          break;\n        }\n        case TransactionStatus.ERROR: {\n          log.instruction({\n            title: \"There was a problem processing your transaction\",\n          });\n          break;\n        }\n        default:\n        // do nothing\n      }\n    }\n    // run loop every 2 seconds\n    // eslint-disable-next-line no-await-in-loop\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n  }\n\n  log.instruction({ title: `Transaction status \\`${currentStatus}\\`` });\n  return { currentStatus, transaction: transactionJson.transaction };\n};\n","import { each } from \"lodash\";\nimport { log } from \"helpers/log\";\nimport { AnyObject } from \"types/types\";\n\ntype ProgrammaticDepositFlowProps = {\n  amount?: string;\n  assetCode: string;\n  publicKey: string;\n  transferServerUrl: string;\n  token: string;\n  type: string;\n  depositFields: AnyObject;\n  claimableBalanceSupported: boolean;\n};\n\nexport const programmaticDepositFlow = async ({\n  amount = \"\",\n  assetCode,\n  publicKey,\n  transferServerUrl,\n  token,\n  type,\n  depositFields,\n  claimableBalanceSupported,\n}: ProgrammaticDepositFlowProps) => {\n  log.instruction({ title: \"Starting SEP-6 programmatic flow for deposit\" });\n\n  const API_METHOD = \"GET\";\n  const REQUEST_URL_STR = `${transferServerUrl}/deposit`;\n  const REQUEST_URL = new URL(REQUEST_URL_STR);\n\n  const getDepositParams = {\n    asset_code: assetCode,\n    account: publicKey,\n    claimable_balance_supported: claimableBalanceSupported.toString(),\n    type,\n    amount,\n    ...depositFields,\n  };\n\n  each(getDepositParams, (value, key) =>\n    REQUEST_URL.searchParams.append(key, value),\n  );\n\n  log.request({\n    title: `${API_METHOD} \\`${REQUEST_URL_STR}\\``,\n    body: getDepositParams,\n  });\n\n  const response = await fetch(`${REQUEST_URL}`, {\n    method: API_METHOD,\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  const depositJson = await response.json();\n\n  log.response({\n    title: `${API_METHOD} \\`${REQUEST_URL_STR}\\``,\n    body: depositJson,\n  });\n\n  return depositJson;\n};\n","import { each } from \"lodash\";\nimport { log } from \"helpers/log\";\nimport { AnyObject } from \"types/types\";\n\ntype ProgrammaticWithdrawFlowProps = {\n  assetCode: string;\n  publicKey: string;\n  transferServerUrl: string;\n  token: string;\n  type: string;\n  withdrawFields: AnyObject;\n  claimableBalanceSupported: boolean;\n};\n\nexport const programmaticWithdrawFlow = async ({\n  assetCode,\n  publicKey,\n  transferServerUrl,\n  token,\n  type,\n  withdrawFields,\n  claimableBalanceSupported,\n}: ProgrammaticWithdrawFlowProps) => {\n  log.instruction({ title: \"Starting SEP-6 programmatic flow for withdrawal\" });\n\n  const API_METHOD = \"GET\";\n  const REQUEST_URL_STR = `${transferServerUrl}/withdraw`;\n  const REQUEST_URL = new URL(REQUEST_URL_STR);\n\n  const getWithdrawParams = {\n    asset_code: assetCode,\n    account: publicKey,\n    claimable_balance_supported: claimableBalanceSupported.toString(),\n    type,\n    ...withdrawFields,\n  };\n\n  each(getWithdrawParams, (value, key) =>\n    REQUEST_URL.searchParams.append(key, value),\n  );\n\n  log.request({\n    title: `${API_METHOD} \\`${REQUEST_URL_STR}\\``,\n    body: getWithdrawParams,\n  });\n\n  const response = await fetch(`${REQUEST_URL}`, {\n    method: API_METHOD,\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  const withdrawJson = await response.json();\n\n  if (response.status !== 200) {\n    throw new Error(withdrawJson.error);\n  }\n\n  log.response({\n    title: `${API_METHOD} \\`${REQUEST_URL_STR}\\``,\n    body: withdrawJson,\n  });\n\n  return withdrawJson;\n};\n","import { Utils } from \"stellar-sdk\";\nimport { log } from \"helpers/log\";\n\nexport const start = async ({\n  authEndpoint,\n  serverSigningKey,\n  publicKey,\n  homeDomain,\n}: {\n  authEndpoint: string;\n  serverSigningKey: string;\n  publicKey: string;\n  homeDomain: string;\n}) => {\n  const params = { account: publicKey, home_domain: homeDomain };\n\n  log.instruction({\n    title:\n      \"Starting the SEP-10 flow to authenticate the sending anchor’s Stellar account\",\n  });\n\n  log.request({ title: \"GET `/auth`\", body: params });\n\n  const authURL = new URL(authEndpoint);\n  Object.entries(params).forEach(([key, value]) => {\n    authURL.searchParams.append(key, value);\n  });\n\n  const result = await fetch(authURL.toString());\n  const resultJson = await result.json();\n  log.response({ title: \"GET `/auth`\", body: resultJson });\n\n  if (!resultJson.transaction) {\n    throw new Error(\"The response didn’t contain a transaction\");\n  }\n\n  const { tx } = Utils.readChallengeTx(\n    resultJson.transaction,\n    serverSigningKey,\n    resultJson.network_passphrase,\n    homeDomain,\n    authURL.host,\n  );\n\n  return tx;\n};\n","import { Keypair, Transaction } from \"stellar-sdk\";\nimport { log } from \"helpers/log\";\n\nexport const sign = ({\n  challengeTransaction,\n  networkPassphrase,\n  secretKey,\n}: {\n  challengeTransaction: Transaction;\n  networkPassphrase: string;\n  secretKey: string;\n}) => {\n  log.instruction({\n    title:\n      \"We’ve received a challenge transaction from the server that we need the sending anchor to sign with their Stellar private key\",\n  });\n\n  const envelope = challengeTransaction.toEnvelope().toXDR(\"base64\");\n  const transaction = new Transaction(envelope, networkPassphrase);\n  transaction.sign(Keypair.fromSecret(secretKey));\n\n  log.instruction({ title: \"SEP-10 signed transaction\", body: transaction });\n  log.instruction({\n    title: \"SEP-10 signed transaction, `base64` encoded\",\n    body: transaction.toEnvelope().toXDR(\"base64\"),\n  });\n\n  return transaction;\n};\n","import { log } from \"helpers/log\";\n\nexport const send = async ({\n  authEndpoint,\n  signedChallengeTransaction,\n}: {\n  authEndpoint: string;\n  signedChallengeTransaction: any;\n}) => {\n  const params = {\n    transaction: signedChallengeTransaction.toEnvelope().toXDR(\"base64\"),\n  };\n\n  log.instruction({\n    title:\n      \"We need to send the signed SEP-10 challenge back to the server to get a JWT token to authenticate our Stellar account with future actions\",\n  });\n\n  log.request({ title: \"POST `/auth`\", body: params });\n\n  const urlParams = new URLSearchParams(params);\n  const result = await fetch(authEndpoint, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    body: urlParams.toString(),\n  });\n\n  const resultJson = await result.json();\n  log.response({ title: \"POST `/auth`\", body: resultJson });\n\n  if (!resultJson.token) {\n    throw new Error(\"No token returned from `/auth`\");\n  }\n\n  return resultJson.token;\n};\n","import { log } from \"helpers/log\";\nimport { Sep12CustomerStatus, Sep12CustomerFieldStatus } from \"types/types.d\";\n\nexport const collectSep12Fields = async ({\n  kycServer,\n  memo,\n  publicKey,\n  token,\n  type,\n  isNewCustomer,\n}: {\n  kycServer: string;\n  memo?: string;\n  publicKey: string;\n  token: string;\n  type?: string;\n  isNewCustomer?: boolean;\n}) => {\n  // The anchor needs a memo to disambiguate the sending and receiving clients\n  // since the wallet uses the same 'account' for both.\n  const params = {\n    ...(type ? { type } : {}),\n    account: publicKey,\n    ...(memo ? { memo, memo_type: \"hash\" } : {}),\n  };\n\n  log.request({ title: \"GET `/customer`\", body: params });\n\n  const urlParams = new URLSearchParams(params);\n  const result = await fetch(`${kycServer}/customer?${urlParams.toString()}`, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n      Origin: \"https://demo-wallet.stellar.org\",\n    },\n  });\n  const resultJson = await result.json();\n\n  log.response({ title: \"GET `/customer`\", body: resultJson });\n\n  if (isNewCustomer && resultJson.status !== Sep12CustomerStatus.NEEDS_INFO) {\n    throw new Error(\n      `Unexpected status for new customer \\`${resultJson.status}\\``,\n    );\n  }\n\n  const fieldsToCollect = Object.entries(resultJson.fields ?? {}).reduce(\n    (collectResult: any, field: any) => {\n      const [key, props] = field;\n\n      if (\n        !props.status ||\n        props.status === Sep12CustomerFieldStatus.NOT_PROVIDED ||\n        (props.status === Sep12CustomerFieldStatus.REJECTED &&\n          resultJson.status === Sep12CustomerStatus.NEEDS_INFO)\n      ) {\n        return { ...collectResult, [key]: props };\n      }\n\n      return collectResult;\n    },\n    {},\n  );\n\n  if (resultJson.fields) {\n    log.instruction({\n      title: \"Received the following customer fields\",\n      body: resultJson.fields,\n    });\n  }\n\n  if (Object.keys(fieldsToCollect).length) {\n    log.instruction({\n      title: \"The following customer fields must be submitted\",\n      body: fieldsToCollect,\n    });\n  } else {\n    log.instruction({\n      title: \"No customer fields need to be submitted\",\n    });\n  }\n\n  return fieldsToCollect;\n};\n","import { Keypair } from \"stellar-sdk\";\nimport { log } from \"helpers/log\";\n\ninterface PutSep12FieldsRequestProps {\n  secretKey: string;\n  fields: any;\n  memo?: string;\n  token: string;\n  kycServer: string;\n  isSender?: boolean;\n}\n\nexport const putSep12FieldsRequest = async ({\n  secretKey,\n  fields,\n  memo,\n  token,\n  kycServer,\n  isSender,\n}: PutSep12FieldsRequestProps) => {\n  const publicKey = Keypair.fromSecret(secretKey).publicKey();\n  const data: { [key: string]: string } = {\n    account: publicKey,\n    ...(memo ? { memo, memo_type: \"hash\" } : {}),\n    ...fields,\n  };\n\n  log.request({ title: \"PUT `/customer`\", body: data });\n\n  const body = new FormData();\n  Object.entries(data).forEach(([key, value]) => {\n    body.append(key, value.toString());\n  });\n\n  const result = await fetch(`${kycServer}/customer`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n    method: \"PUT\",\n    body,\n  });\n\n  const resultJson = await result.json();\n  if (isSender !== undefined) {\n    log.response({\n      title: `PUT \\`/customer\\` (${isSender ? \"sender\" : \"receiver\"})`,\n      body: resultJson,\n    });\n  } else {\n    log.response({\n      title: `PUT \\`/customer\\``,\n      body: resultJson,\n    });\n  }\n\n  if (result.status !== 202) {\n    throw new Error(\n      `Unexpected status for PUT \\`/customer\\` request: ${result.status}`,\n    );\n  }\n\n  return resultJson;\n};\n","import StellarSdk from \"stellar-sdk\";\nimport { log } from \"helpers/log\";\n\nexport const getHomeDomainFromAssetIssuer = async ({\n  assetIssuer,\n  networkUrl,\n}: {\n  assetIssuer: string;\n  networkUrl: string;\n}): Promise<string> => {\n  log.request({\n    title: \"Getting home domain from asset issuer\",\n    body: `Asset issuer ${assetIssuer}`,\n  });\n\n  const server = new StellarSdk.Server(networkUrl);\n  const accountRecord = await server.loadAccount(assetIssuer);\n  const homeDomain: string | undefined = accountRecord.home_domain;\n\n  if (!homeDomain) {\n    throw new Error(\n      `Asset issuer ${assetIssuer} does not have home domain configured`,\n    );\n  }\n\n  log.response({\n    title: \"Received home domain from asset issuer\",\n    body: `Asset issuer ${assetIssuer}, home domain ${homeDomain}.`,\n  });\n\n  return homeDomain;\n};\n","import { log } from \"helpers/log\";\nimport { getHomeDomainFromAssetIssuer } from \"methods/getHomeDomainFromAssetIssuer\";\nimport { getToml } from \"methods/getToml\";\nimport { TomlFields, AnyObject } from \"types/types.d\";\n\nexport const checkTomlForFields = async ({\n  sepName,\n  assetIssuer,\n  requiredKeys,\n  networkUrl,\n  homeDomain,\n}: {\n  sepName: string;\n  assetIssuer: string;\n  requiredKeys: TomlFields[];\n  networkUrl: string;\n  homeDomain?: string;\n}) => {\n  let homeDomainParam = homeDomain;\n\n  if (!homeDomainParam) {\n    homeDomainParam = await getHomeDomainFromAssetIssuer({\n      assetIssuer,\n      networkUrl,\n    });\n  }\n\n  log.instruction({\n    title: `Checking the \\`stellar.toml\\` to find the necessary information for the ${sepName} transaction`,\n  });\n\n  const tomlResponse = await getToml(homeDomainParam);\n  const missingKeys: string[] = [];\n\n  const result = requiredKeys.reduce((res: AnyObject, key) => {\n    if (tomlResponse[key]) {\n      log.instruction({\n        title: `Received \\`${key}\\` from TOML`,\n        body: tomlResponse[key],\n      });\n\n      return { ...res, [key]: tomlResponse[key].replace(/\\/$/, \"\") };\n    }\n\n    missingKeys.push(`\\`${key}\\``);\n    return res;\n  }, {});\n\n  if (missingKeys.length) {\n    throw new Error(\n      `TOML must contain a ${missingKeys.join(\n        \", \",\n      )} for ${sepName} transaction`,\n    );\n  }\n\n  return result;\n};\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"config/store\";\nimport { accountSelector } from \"ducks/account\";\nimport { settingsSelector } from \"ducks/settings\";\nimport { getErrorMessage } from \"helpers/getErrorMessage\";\nimport { getNetworkConfig } from \"helpers/getNetworkConfig\";\nimport { log } from \"helpers/log\";\nimport { checkDepositWithdrawInfo } from \"methods/checkDepositWithdrawInfo\";\nimport {\n  pollDepositUntilComplete,\n  programmaticDepositFlow,\n} from \"methods/sep6\";\nimport {\n  sep10AuthStart,\n  sep10AuthSign,\n  sep10AuthSend,\n} from \"methods/sep10Auth\";\nimport { collectSep12Fields, putSep12FieldsRequest } from \"methods/sep12\";\nimport { checkTomlForFields } from \"methods/checkTomlForFields\";\nimport { trustAsset } from \"methods/trustAsset\";\nimport {\n  Asset,\n  ActionStatus,\n  Sep6DepositAssetInitialState,\n  Sep6DepositResponse,\n  RejectMessage,\n  TomlFields,\n  AnchorActionType,\n  AnyObject,\n} from \"types/types.d\";\n\ntype InitiateDepositActionPayload = Sep6DepositAssetInitialState[\"data\"] & {\n  status: ActionStatus;\n};\n\nexport const initiateDepositAction = createAsyncThunk<\n  InitiateDepositActionPayload,\n  Asset,\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"sep6DepositAsset/initiateDepositAction\",\n  async (asset, { rejectWithValue, getState }) => {\n    const { assetCode, assetIssuer, homeDomain } = asset;\n    const { data, secretKey } = accountSelector(getState());\n    const { pubnet } = settingsSelector(getState());\n    const networkConfig = getNetworkConfig(pubnet);\n    const publicKey = data?.id;\n\n    // This is unlikely\n    if (!publicKey) {\n      throw new Error(\"Something is wrong with Account, no public key.\");\n    }\n\n    // This is unlikely\n    if (!homeDomain) {\n      throw new Error(\"Something went wrong, home domain is not defined.\");\n    }\n\n    log.instruction({ title: \"Initiating a SEP-6 deposit\" });\n\n    try {\n      // Check toml\n      const tomlResponse = await checkTomlForFields({\n        sepName: \"SEP-6 deposit\",\n        assetIssuer,\n        requiredKeys: [TomlFields.TRANSFER_SERVER],\n        networkUrl: networkConfig.url,\n        homeDomain,\n      });\n\n      // Check info\n      const infoData = await checkDepositWithdrawInfo({\n        type: AnchorActionType.DEPOSIT,\n        transferServerUrl: tomlResponse.TRANSFER_SERVER,\n        assetCode,\n      });\n\n      const assetInfoData = infoData[AnchorActionType.DEPOSIT][assetCode];\n\n      const {\n        authentication_required: isAuthenticationRequired,\n        min_amount: minAmount = 0,\n        max_amount: maxAmount = 0,\n      } = assetInfoData;\n\n      let payload = {\n        assetCode,\n        assetIssuer,\n        infoFields: { ...assetInfoData.fields },\n        minAmount,\n        maxAmount,\n        customerFields: {},\n        kycServer: \"\",\n        status: ActionStatus.NEEDS_INPUT,\n        token: \"\",\n        transferServerUrl: tomlResponse.TRANSFER_SERVER,\n      } as InitiateDepositActionPayload;\n\n      if (isAuthenticationRequired) {\n        // Re-check toml for auth endpoint\n        const webAuthTomlResponse = await checkTomlForFields({\n          sepName: \"SEP-6 deposit\",\n          assetIssuer,\n          requiredKeys: [\n            TomlFields.WEB_AUTH_ENDPOINT,\n            TomlFields.SIGNING_KEY,\n            TomlFields.KYC_SERVER,\n          ],\n          networkUrl: networkConfig.url,\n          homeDomain,\n        });\n        log.instruction({\n          title:\n            \"SEP-6 deposit is enabled, and requires authentication so we should go through SEP-10\",\n        });\n        // SEP-10 start\n        const challengeTransaction = await sep10AuthStart({\n          authEndpoint: webAuthTomlResponse.WEB_AUTH_ENDPOINT,\n          serverSigningKey: webAuthTomlResponse.SIGNING_KEY,\n          publicKey,\n          homeDomain,\n        });\n\n        // SEP-10 sign\n        const signedChallengeTransaction = sep10AuthSign({\n          secretKey,\n          networkPassphrase: networkConfig.network,\n          challengeTransaction,\n        });\n\n        // SEP-10 send\n        const token = await sep10AuthSend({\n          authEndpoint: webAuthTomlResponse.WEB_AUTH_ENDPOINT,\n          signedChallengeTransaction,\n        });\n\n        // Get SEP-12 fields\n        log.instruction({\n          title: \"Making GET `/customer` request for user\",\n        });\n\n        const sep12Fields = await collectSep12Fields({\n          publicKey,\n          token,\n          kycServer: webAuthTomlResponse.KYC_SERVER,\n        });\n\n        payload = {\n          ...payload,\n          kycServer: webAuthTomlResponse.KYC_SERVER,\n          token,\n        };\n\n        if (sep12Fields) {\n          payload = {\n            ...payload,\n            customerFields: { ...payload.customerFields, ...sep12Fields },\n          };\n        }\n      }\n\n      return payload;\n    } catch (error) {\n      const errorMessage = getErrorMessage(error);\n\n      log.error({\n        title: \"SEP-6 deposit failed\",\n        body: errorMessage,\n      });\n\n      return rejectWithValue({\n        errorString: errorMessage,\n      });\n    }\n  },\n);\n\nexport const submitSep6DepositFields = createAsyncThunk<\n  { status: ActionStatus; depositResponse: Sep6DepositResponse },\n  {\n    amount?: string;\n    depositType: AnyObject;\n    infoFields: AnyObject;\n    customerFields: AnyObject;\n  },\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"sep6DepositAsset/submitSep6DepositFields\",\n  async (\n    { amount, depositType, customerFields, infoFields },\n    { rejectWithValue, getState },\n  ) => {\n    try {\n      const { data } = accountSelector(getState());\n      const { claimableBalanceSupported } = settingsSelector(getState());\n      const publicKey = data?.id || \"\";\n      const { secretKey } = accountSelector(getState());\n      const { data: sep6Data } = sep6DepositSelector(getState());\n\n      const { assetCode, kycServer, transferServerUrl, token } = sep6Data;\n\n      if (Object.keys(customerFields).length) {\n        await putSep12FieldsRequest({\n          fields: customerFields,\n          kycServer,\n          secretKey,\n          token,\n        });\n      }\n\n      const depositResponse = (await programmaticDepositFlow({\n        amount,\n        assetCode,\n        publicKey,\n        transferServerUrl,\n        token,\n        type: depositType.type,\n        depositFields: infoFields,\n        claimableBalanceSupported,\n      })) as Sep6DepositResponse;\n\n      return {\n        status: ActionStatus.CAN_PROCEED,\n        depositResponse,\n      };\n    } catch (e) {\n      const errorMessage = getErrorMessage(e);\n\n      log.error({\n        title: errorMessage,\n      });\n\n      return rejectWithValue({\n        errorString: errorMessage,\n      });\n    }\n  },\n);\n\nexport const sep6DepositAction = createAsyncThunk<\n  {\n    currentStatus: string;\n    status: ActionStatus;\n    trustedAssetAdded: string;\n  },\n  undefined,\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"sep6DepositAsset/sep6DepositAction\",\n  async (_, { rejectWithValue, getState }) => {\n    try {\n      const { secretKey } = accountSelector(getState());\n      const { pubnet } = settingsSelector(getState());\n      const networkConfig = getNetworkConfig(pubnet);\n      const { data: sep6Data } = sep6DepositSelector(getState());\n\n      const {\n        assetCode,\n        assetIssuer,\n        depositResponse,\n        transferServerUrl,\n        token,\n      } = sep6Data;\n\n      const trustAssetCallback = async () => {\n        const assetString = `${assetCode}:${assetIssuer}`;\n\n        await trustAsset({\n          secretKey,\n          networkPassphrase: networkConfig.network,\n          networkUrl: networkConfig.url,\n          untrustedAsset: {\n            assetString,\n            assetCode,\n            assetIssuer,\n          },\n        });\n\n        return assetString;\n      };\n\n      // Poll transaction until complete\n      const { currentStatus = \"\", trustedAssetAdded = \"\" } =\n        await pollDepositUntilComplete({\n          transactionId: depositResponse.id || \"\",\n          token,\n          transferServerUrl,\n          trustAssetCallback,\n        });\n\n      return {\n        currentStatus,\n        status: ActionStatus.SUCCESS,\n        trustedAssetAdded,\n      };\n    } catch (error) {\n      const errorMessage = getErrorMessage(error);\n\n      log.error({\n        title: \"SEP-6 deposit failed\",\n        body: errorMessage,\n      });\n\n      return rejectWithValue({\n        errorString: errorMessage,\n      });\n    }\n  },\n);\n\nconst initialState: Sep6DepositAssetInitialState = {\n  data: {\n    assetCode: \"\",\n    assetIssuer: \"\",\n    currentStatus: \"\",\n    customerFields: {},\n    depositResponse: { how: \"\" },\n    infoFields: {\n      type: {\n        choices: [],\n      },\n    },\n    minAmount: 0,\n    maxAmount: 0,\n    kycServer: \"\",\n    token: \"\",\n    transferServerUrl: \"\",\n    trustedAssetAdded: \"\",\n  },\n  status: \"\" as ActionStatus,\n  errorString: undefined,\n};\n\nconst sep6DepositAssetSlice = createSlice({\n  name: \"sep6DepositAsset\",\n  initialState,\n  reducers: {\n    resetSep6DepositAction: () => initialState,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(initiateDepositAction.pending, (state) => {\n      state.errorString = undefined;\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(initiateDepositAction.fulfilled, (state, action) => {\n      state.data = { ...state.data, ...action.payload };\n      state.status = action.payload.status;\n    });\n    builder.addCase(initiateDepositAction.rejected, (state, action) => {\n      state.errorString = action.payload?.errorString;\n      state.status = ActionStatus.ERROR;\n    });\n    builder.addCase(submitSep6DepositFields.pending, (state) => {\n      state.errorString = undefined;\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(submitSep6DepositFields.fulfilled, (state, action) => {\n      state.status = action.payload.status;\n      state.data.depositResponse = action.payload.depositResponse;\n    });\n    builder.addCase(submitSep6DepositFields.rejected, (state, action) => {\n      state.errorString = action.payload?.errorString;\n      state.status = ActionStatus.ERROR;\n    });\n    builder.addCase(sep6DepositAction.pending, (state) => {\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(sep6DepositAction.fulfilled, (state, action) => {\n      state.status = action.payload.status;\n      state.data.currentStatus = action.payload.currentStatus;\n      state.data.trustedAssetAdded = action.payload.trustedAssetAdded;\n    });\n    builder.addCase(sep6DepositAction.rejected, (state, action) => {\n      state.errorString = action.payload?.errorString;\n      state.status = ActionStatus.ERROR;\n    });\n  },\n});\n\nexport const sep6DepositSelector = (state: RootState) => state.sep6DepositAsset;\n\nexport const { reducer } = sep6DepositAssetSlice;\nexport const { resetSep6DepositAction } = sep6DepositAssetSlice.actions;\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"config/store\";\nimport { accountSelector } from \"ducks/account\";\nimport { settingsSelector } from \"ducks/settings\";\nimport { getErrorMessage } from \"helpers/getErrorMessage\";\nimport { getNetworkConfig } from \"helpers/getNetworkConfig\";\nimport { log } from \"helpers/log\";\nimport { checkDepositWithdrawInfo } from \"methods/checkDepositWithdrawInfo\";\nimport {\n  pollWithdrawUntilComplete,\n  programmaticWithdrawFlow,\n} from \"methods/sep6\";\nimport {\n  sep10AuthStart,\n  sep10AuthSign,\n  sep10AuthSend,\n} from \"methods/sep10Auth\";\nimport { collectSep12Fields, putSep12FieldsRequest } from \"methods/sep12\";\nimport { checkTomlForFields } from \"methods/checkTomlForFields\";\nimport {\n  Asset,\n  ActionStatus,\n  Sep6WithdrawAssetInitialState,\n  Sep6WithdrawResponse,\n  RejectMessage,\n  TomlFields,\n  AnchorActionType,\n  AnyObject,\n  TransactionStatus,\n} from \"types/types.d\";\n\ntype InitiateWithdrawActionPayload = Sep6WithdrawAssetInitialState[\"data\"] & {\n  status: ActionStatus;\n};\n\nexport const initiateWithdrawAction = createAsyncThunk<\n  InitiateWithdrawActionPayload,\n  Asset,\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"sep6WithdrawAsset/initiateWithdrawAction\",\n  async (asset, { rejectWithValue, getState }) => {\n    const { assetCode, assetIssuer, homeDomain } = asset;\n    const { data, secretKey } = accountSelector(getState());\n    const { pubnet } = settingsSelector(getState());\n    const networkConfig = getNetworkConfig(pubnet);\n    const publicKey = data?.id;\n\n    // This is unlikely\n    if (!publicKey) {\n      throw new Error(\"Something is wrong with Account, no public key.\");\n    }\n\n    // This is unlikely\n    if (!homeDomain) {\n      throw new Error(\"Something went wrong, home domain is not defined.\");\n    }\n\n    log.instruction({ title: \"Initiating a SEP-6 withdrawal\" });\n\n    try {\n      // Check toml\n      const tomlResponse = await checkTomlForFields({\n        sepName: \"SEP-6 withdrawal\",\n        assetIssuer,\n        requiredKeys: [TomlFields.TRANSFER_SERVER],\n        networkUrl: networkConfig.url,\n        homeDomain,\n      });\n\n      // Check info\n      const infoData = await checkDepositWithdrawInfo({\n        type: AnchorActionType.WITHDRAWAL,\n        transferServerUrl: tomlResponse.TRANSFER_SERVER,\n        assetCode,\n      });\n\n      const assetInfoData = infoData[AnchorActionType.WITHDRAWAL][assetCode];\n\n      const {\n        authentication_required: isAuthenticationRequired,\n      } = assetInfoData;\n\n      let payload = {\n        assetCode,\n        assetIssuer,\n        withdrawTypes: { types: { ...assetInfoData.types } },\n        fields: {},\n        kycServer: \"\",\n        status: ActionStatus.NEEDS_INPUT,\n        token: \"\",\n        transferServerUrl: tomlResponse.TRANSFER_SERVER,\n      } as InitiateWithdrawActionPayload;\n\n      if (isAuthenticationRequired) {\n        // Re-check toml for auth endpoint\n        const webAuthTomlResponse = await checkTomlForFields({\n          sepName: \"SEP-6 withdrawal\",\n          assetIssuer,\n          requiredKeys: [\n            TomlFields.WEB_AUTH_ENDPOINT,\n            TomlFields.SIGNING_KEY,\n            TomlFields.KYC_SERVER,\n          ],\n          networkUrl: networkConfig.url,\n          homeDomain,\n        });\n        log.instruction({\n          title:\n            \"SEP-6 withdrawal is enabled, and requires authentication so we should go through SEP-10\",\n        });\n        // SEP-10 start\n        const challengeTransaction = await sep10AuthStart({\n          authEndpoint: webAuthTomlResponse.WEB_AUTH_ENDPOINT,\n          serverSigningKey: webAuthTomlResponse.SIGNING_KEY,\n          publicKey,\n          homeDomain,\n        });\n\n        // SEP-10 sign\n        const signedChallengeTransaction = sep10AuthSign({\n          secretKey,\n          networkPassphrase: networkConfig.network,\n          challengeTransaction,\n        });\n\n        // SEP-10 send\n        const token = await sep10AuthSend({\n          authEndpoint: webAuthTomlResponse.WEB_AUTH_ENDPOINT,\n          signedChallengeTransaction,\n        });\n\n        // Get SEP-12 fields\n        log.instruction({\n          title: \"Making GET `/customer` request for user\",\n        });\n\n        const sep12Fields = await collectSep12Fields({\n          publicKey,\n          token,\n          kycServer: webAuthTomlResponse.KYC_SERVER,\n        });\n\n        payload = {\n          ...payload,\n          kycServer: webAuthTomlResponse.KYC_SERVER,\n          token,\n        };\n\n        if (sep12Fields) {\n          payload = {\n            ...payload,\n            fields: { ...payload.fields, ...sep12Fields },\n          };\n        }\n      }\n\n      return payload;\n    } catch (error) {\n      const errorMessage = getErrorMessage(error);\n\n      log.error({\n        title: \"SEP-6 withdrawal failed\",\n        body: errorMessage,\n      });\n\n      return rejectWithValue({\n        errorString: errorMessage,\n      });\n    }\n  },\n);\n\nexport const submitSep6WithdrawFields = createAsyncThunk<\n  { status: ActionStatus; withdrawResponse: Sep6WithdrawResponse },\n  {\n    withdrawType: AnyObject;\n    infoFields: AnyObject;\n    customerFields: AnyObject;\n  },\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"sep6WithdrawAsset/submitSep6WithdrawFields\",\n  async (\n    { withdrawType, infoFields, customerFields },\n    { rejectWithValue, getState },\n  ) => {\n    try {\n      const { data, secretKey } = accountSelector(getState());\n      const { claimableBalanceSupported } = settingsSelector(getState());\n      const publicKey = data?.id || \"\";\n\n      const { data: sep6Data } = sepWithdrawSelector(getState());\n      const { assetCode, kycServer, transferServerUrl, token } = sep6Data;\n\n      if (Object.keys(customerFields).length) {\n        await putSep12FieldsRequest({\n          fields: customerFields,\n          kycServer,\n          secretKey,\n          token,\n        });\n      }\n\n      const withdrawResponse = (await programmaticWithdrawFlow({\n        assetCode,\n        publicKey,\n        transferServerUrl,\n        token,\n        type: withdrawType.type,\n        withdrawFields: infoFields,\n        claimableBalanceSupported,\n      })) as Sep6WithdrawResponse;\n\n      return {\n        status: ActionStatus.CAN_PROCEED,\n        withdrawResponse,\n      };\n    } catch (e) {\n      const errorMessage = getErrorMessage(e);\n\n      log.error({\n        title: errorMessage,\n      });\n\n      return rejectWithValue({\n        errorString: errorMessage,\n      });\n    }\n  },\n);\n\nexport const sep6WithdrawAction = createAsyncThunk<\n  {\n    currentStatus: TransactionStatus;\n    transactionResponse: AnyObject;\n    status: ActionStatus;\n  },\n  string,\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"sep6WithdrawAsset/sep6WithdrawAction\",\n  async (amount, { rejectWithValue, getState }) => {\n    try {\n      const { secretKey } = accountSelector(getState());\n      const { pubnet } = settingsSelector(getState());\n      const networkConfig = getNetworkConfig(pubnet);\n      const { data: sep6Data } = sepWithdrawSelector(getState());\n\n      const {\n        assetCode,\n        assetIssuer,\n        transferServerUrl,\n        token,\n        withdrawResponse,\n      } = sep6Data;\n\n      // Poll transaction until complete\n      const { currentStatus, transaction } = await pollWithdrawUntilComplete({\n        amount,\n        secretKey,\n        transactionId: withdrawResponse?.id || \"\",\n        token,\n        transferServerUrl,\n        networkPassphrase: networkConfig.network,\n        networkUrl: networkConfig.url,\n        assetCode,\n        assetIssuer,\n      });\n\n      return {\n        currentStatus,\n        transactionResponse: transaction,\n        status: ActionStatus.SUCCESS,\n      };\n    } catch (error) {\n      const errorMessage = getErrorMessage(error);\n\n      log.error({\n        title: \"SEP-6 withdrawal failed\",\n        body: errorMessage,\n      });\n\n      return rejectWithValue({\n        errorString: errorMessage,\n      });\n    }\n  },\n);\n\nconst initialState: Sep6WithdrawAssetInitialState = {\n  data: {\n    assetCode: \"\",\n    assetIssuer: \"\",\n    currentStatus: \"\" as TransactionStatus,\n    withdrawTypes: {\n      types: {},\n    },\n    fields: {},\n    kycServer: \"\",\n    transferServerUrl: \"\",\n    trustedAssetAdded: \"\",\n    token: \"\",\n    transactionResponse: {},\n    withdrawResponse: { account_id: \"\" },\n  },\n  status: undefined,\n  errorString: undefined,\n};\n\nconst sep6WithdrawAssetSlice = createSlice({\n  name: \"sep6WithdrawAsset\",\n  initialState,\n  reducers: {\n    resetSep6WithdrawAction: () => initialState,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(initiateWithdrawAction.pending, (state) => {\n      state.errorString = undefined;\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(initiateWithdrawAction.fulfilled, (state, action) => {\n      state.data = { ...state.data, ...action.payload };\n      state.status = action.payload.status;\n    });\n    builder.addCase(initiateWithdrawAction.rejected, (state, action) => {\n      state.errorString = action.payload?.errorString;\n      state.status = ActionStatus.ERROR;\n    });\n    builder.addCase(submitSep6WithdrawFields.pending, (state) => {\n      state.errorString = undefined;\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(submitSep6WithdrawFields.fulfilled, (state, action) => {\n      state.status = action.payload.status;\n      state.data.withdrawResponse = action.payload.withdrawResponse;\n    });\n    builder.addCase(submitSep6WithdrawFields.rejected, (state, action) => {\n      state.errorString = action.payload?.errorString;\n      state.status = ActionStatus.ERROR;\n    });\n    builder.addCase(sep6WithdrawAction.pending, (state) => {\n      state.errorString = undefined;\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(sep6WithdrawAction.fulfilled, (state, action) => {\n      state.status = action.payload.status;\n      state.data.currentStatus = action.payload.currentStatus;\n      state.data.transactionResponse = action.payload.transactionResponse;\n    });\n    builder.addCase(sep6WithdrawAction.rejected, (state, action) => {\n      state.errorString = action.payload?.errorString;\n      state.status = ActionStatus.NEEDS_INPUT;\n    });\n  },\n});\n\nexport const sepWithdrawSelector = (state: RootState) =>\n  state.sep6WithdrawAsset;\n\nexport const { reducer } = sep6WithdrawAssetSlice;\nexport const { resetSep6WithdrawAction } = sep6WithdrawAssetSlice.actions;\n","import { Sep8ApprovalStatus, Sep8Step } from \"types/types.d\";\n\n/**\n * Returns the next SEP-8 step to be displayed after the current step succeeds.\n *\n * @param {Sep8Step} currentStep the current SEP-8 step.\n * @param {Sep8ApprovalStatus} [approvalStatus] the approval status returned\n * from the SEP-8 server. This value will only be used if\n * `currentStep === Sep8Step.STARTING`.\n * @returns {Sep8Step} the next SEP-8 step for the application.\n */\nexport const getSep8NextStepOnSuccess = ({\n  currentStep,\n  approvalStatus,\n  didUndergoKyc,\n}: {\n  currentStep: Sep8Step;\n  approvalStatus?: Sep8ApprovalStatus;\n  didUndergoKyc?: boolean;\n}): Sep8Step => {\n  const nextStepDict: { [key in Sep8Step]: Sep8Step } = {\n    [Sep8Step.DISABLED]: Sep8Step.STARTING,\n    [Sep8Step.STARTING]: nextStepAfterApprovalServer({\n      currentStep,\n      approvalStatus,\n    }),\n    [Sep8Step.PENDING]: Sep8Step.DISABLED,\n    [Sep8Step.TRANSACTION_REVISED]: Sep8Step.COMPLETE,\n    [Sep8Step.ACTION_REQUIRED]: Sep8Step.SENT_ACTION_REQUIRED_FIELDS,\n    [Sep8Step.SENT_ACTION_REQUIRED_FIELDS]: didUndergoKyc\n      ? nextStepAfterApprovalServer({\n          currentStep,\n          approvalStatus,\n        })\n      : Sep8Step.STARTING,\n    [Sep8Step.COMPLETE]: Sep8Step.DISABLED,\n  };\n\n  return nextStepDict[currentStep];\n};\n\n/**\n * Returns the next SEP-8 step to be displayed after the current step succeeds,\n * based solely on the respone comming from the SEP-8 approval server.\n *\n * @param {Sep8Step} currentStep the current SEP-8 step.\n * @param {Sep8ApprovalStatus} [approvalStatus] the approval status returned\n * from the SEP-8 server. This value will only be used if\n * `currentStep === Sep8Step.STARTING`.\n * @returns {Sep8Step} the next SEP-8 step for the application.\n */\nconst nextStepAfterApprovalServer = ({\n  currentStep,\n  approvalStatus,\n}: {\n  currentStep: Sep8Step;\n  approvalStatus?: Sep8ApprovalStatus;\n}) => {\n  const approvalStatusDict: { [key in Sep8ApprovalStatus]: Sep8Step } = {\n    [Sep8ApprovalStatus.ACTION_REQUIRED]: Sep8Step.ACTION_REQUIRED,\n    [Sep8ApprovalStatus.PENDING]: Sep8Step.PENDING,\n    [Sep8ApprovalStatus.REVISED]: Sep8Step.TRANSACTION_REVISED,\n    [Sep8ApprovalStatus.SUCCESS]: Sep8Step.TRANSACTION_REVISED,\n    [Sep8ApprovalStatus.REJECTED]: currentStep,\n  };\n  return approvalStatusDict[approvalStatus!];\n};\n","import StellarSdk, { BASE_FEE, Keypair } from \"stellar-sdk\";\nimport { getErrorMessage } from \"helpers/getErrorMessage\";\nimport { getErrorString } from \"helpers/getErrorString\";\nimport { getNetworkConfig } from \"helpers/getNetworkConfig\";\nimport { log } from \"helpers/log\";\nimport { PaymentTransactionParams } from \"types/types.d\";\n\nexport const submitPaymentTransaction = async ({\n  isPubnet,\n  params,\n  secretKey,\n}: {\n  isPubnet: boolean;\n  params: PaymentTransactionParams;\n  secretKey: string;\n}) => {\n  const server = new StellarSdk.Server(getNetworkConfig(isPubnet).url);\n\n  log.instruction({\n    title: `Sending payment of ${params.amount} ${params.assetCode}`,\n    body: `Destination: ${params.destination}`,\n  });\n\n  let transaction;\n\n  // Build transaction\n  try {\n    transaction = await buildPaymentTransaction({\n      isPubnet,\n      params,\n      server,\n    });\n  } catch (error) {\n    throw new Error(\n      `Failed to build transaction, error: ${getErrorString(error)}`,\n    );\n  }\n\n  try {\n    // Sign transaction\n    const keypair = Keypair.fromSecret(secretKey);\n    await transaction.sign(keypair);\n  } catch (error) {\n    throw new Error(\n      `Failed to sign transaction, error: ${getErrorString(error)}`,\n    );\n  }\n\n  // Submit transaction\n  log.request({\n    title: \"Submitting send payment transaction\",\n    body: transaction,\n  });\n\n  const result = await server.submitTransaction(transaction);\n  log.response({ title: \"Submitted send payment transaction\", body: result });\n  log.instruction({\n    title: `Payment of ${params.amount} ${params.assetCode} sent`,\n    body: `Destination: ${params.destination}`,\n  });\n\n  return result;\n};\n\nexport const buildPaymentTransaction = async ({\n  isPubnet,\n  params,\n  server,\n}: {\n  isPubnet: boolean;\n  params: PaymentTransactionParams;\n  server: any;\n}) => {\n  log.instruction({ title: \"Building send payment transaction\" });\n\n  let transaction;\n  try {\n    const {\n      destination,\n      isDestinationFunded,\n      amount,\n      assetCode,\n      assetIssuer,\n      publicKey,\n    } = params;\n    const { sequence } = await server.loadAccount(publicKey);\n    const source = await new StellarSdk.Account(publicKey, sequence);\n    let operation;\n\n    if (isDestinationFunded) {\n      const asset =\n        !assetCode || assetCode === \"XLM\"\n          ? StellarSdk.Asset.native()\n          : new StellarSdk.Asset(assetCode, assetIssuer);\n\n      operation = StellarSdk.Operation.payment({\n        destination,\n        asset,\n        amount: amount.toString(),\n        withMuxing: true,\n      });\n    } else {\n      log.instruction({\n        title:\n          \"Destination account does not exist, we are creating and funding it\",\n      });\n\n      // If destination account is not funded, create and fund it\n      operation = StellarSdk.Operation.createAccount({\n        destination,\n        startingBalance: amount.toString(),\n      });\n    }\n\n    transaction = new StellarSdk.TransactionBuilder(source, {\n      fee: BASE_FEE,\n      networkPassphrase: getNetworkConfig(isPubnet).network,\n      timebounds: await server.fetchTimebounds(100),\n    }).addOperation(operation);\n\n    transaction = transaction.build();\n  } catch (error) {\n    throw new Error(getErrorMessage(error));\n  }\n\n  return transaction;\n};\n","import StellarSdk, { Transaction } from \"stellar-sdk\";\nimport { getErrorString } from \"helpers/getErrorString\";\nimport { getNetworkConfig } from \"helpers/getNetworkConfig\";\nimport { log } from \"helpers/log\";\nimport { Sep9Field, Sep9FieldsDict } from \"helpers/Sep9Fields\";\nimport { buildPaymentTransaction } from \"methods/submitPaymentTransaction\";\nimport {\n  Sep8ApprovalResponse,\n  Sep8ApprovalStatus,\n  Sep8PaymentTransactionParams,\n} from \"types/types.d\";\n\nexport const revisePaymentTransaction = async ({\n  isPubnet,\n  params,\n}: {\n  isPubnet: boolean;\n  params: Sep8PaymentTransactionParams;\n}): Promise<Sep8ApprovalResponse> => {\n  const server = new StellarSdk.Server(getNetworkConfig(isPubnet).url);\n  const { approvalServer } = params;\n\n  // build transaction\n  let transaction: Transaction;\n  try {\n    transaction = await buildPaymentTransaction({\n      isPubnet,\n      params,\n      server,\n    });\n  } catch (error) {\n    throw new Error(\n      `Failed to build transaction, error: ${getErrorString(error)}`,\n    );\n  }\n\n  // send transaction to SEP-8 approval server\n  log.request({\n    title: `Authorizing SEP-8 payment of ${params.amount} ${params.assetCode}`,\n    body: `Destination: ${params.destination}`,\n  });\n  const submittedTxXdr = transaction.toEnvelope().toXDR(\"base64\");\n  const sep8ApprovalResult = await fetch(approvalServer, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      tx: submittedTxXdr,\n    }),\n  });\n\n  // parse SEP-8 response\n  const sep8ApprovalResultJson = await sep8ApprovalResult.json();\n  switch (sep8ApprovalResultJson.status) {\n    case Sep8ApprovalStatus.ACTION_REQUIRED: {\n      log.response({\n        title: \"Action Required\",\n        body: \"Additional information is needed before we can proceed.\",\n      });\n      log.instruction({\n        title: sep8ApprovalResultJson.message,\n      });\n\n      const actionFields: Sep9Field[] | undefined =\n        sep8ApprovalResultJson.action_fields?.map(\n          (fieldName: string) => Sep9FieldsDict[fieldName],\n        );\n\n      return {\n        status: Sep8ApprovalStatus.ACTION_REQUIRED,\n        actionRequiredInfo: {\n          actionFields,\n          actionMethod: sep8ApprovalResultJson.action_method ?? \"GET\",\n          actionUrl: sep8ApprovalResultJson.action_url,\n          message: sep8ApprovalResultJson.message,\n        },\n        revisedTransaction: {\n          amount: params.amount,\n          destination: params.destination,\n          submittedTxXdr,\n          revisedTxXdr: \"\",\n        },\n      };\n    }\n\n    case Sep8ApprovalStatus.PENDING: {\n      let pendingApprovalBody =\n        \"The issuer could not determine whether to approve the transaction at this time.\";\n      const { timeout } = sep8ApprovalResultJson;\n      if (timeout) {\n        const dateStr = new Date(timeout).toLocaleString();\n        pendingApprovalBody += ` You can re-submit the same transaction on ${dateStr}.`;\n      }\n      log.response({\n        title: \"Authorization Pending\",\n        body: pendingApprovalBody,\n      });\n      if (sep8ApprovalResultJson.message) {\n        log.instruction({ title: sep8ApprovalResultJson.message });\n      }\n      return { status: sep8ApprovalResultJson.status };\n    }\n\n    case Sep8ApprovalStatus.REJECTED:\n      throw new Error(sep8ApprovalResultJson.error);\n\n    case Sep8ApprovalStatus.REVISED:\n    case Sep8ApprovalStatus.SUCCESS:\n      log.response({\n        title: `Payment transaction revised and authorized 🎉.`,\n        body: sep8ApprovalResultJson.message as string | undefined,\n      });\n\n      return {\n        status: sep8ApprovalResultJson.status,\n        revisedTransaction: {\n          amount: params.amount,\n          destination: params.destination,\n          submittedTxXdr,\n          revisedTxXdr: sep8ApprovalResultJson.tx,\n        },\n      };\n\n    default:\n      throw new Error(\n        `The SEP-8 flow for \"${sep8ApprovalResultJson.status}\" status is not supported yet.`,\n      );\n  }\n};\n","import { log } from \"helpers/log\";\nimport { Sep9FieldsDict, Sep9FieldType } from \"helpers/Sep9Fields\";\nimport {\n  Sep8ActionRequiredResultType,\n  Sep8ActionRequiredSendParams,\n  Sep8ActionRequiredSentResult,\n} from \"types/types.d\";\n\nexport const sendActionRequiredFields = async ({\n  actionFields,\n  actionMethod,\n  actionUrl,\n}: Sep8ActionRequiredSendParams): Promise<Sep8ActionRequiredSentResult> => {\n  log.request({\n    title: `Sending action required fields to SEP-8 server with \\`${actionMethod} ${actionUrl}\\``,\n    body: actionFields,\n  });\n\n  // prepare multipart request if needed\n  let contentType = \"application/json\";\n  let body: string | FormData = JSON.stringify(actionFields);\n  const hasBinary = Object.keys(actionFields).some(\n    (fieldName) => Sep9FieldsDict[fieldName].type === Sep9FieldType.BINARY,\n  );\n\n  if (hasBinary) {\n    contentType = \"multipart/form-data\";\n\n    const formData = new FormData();\n    Object.entries(actionFields).forEach(([fieldName, fieldValue]) =>\n      formData.append(fieldName, fieldValue),\n    );\n    body = formData;\n  }\n\n  const sep8ActionRequiredResult = await fetch(actionUrl, {\n    method: actionMethod,\n    headers: {\n      \"Content-Type\": contentType,\n    },\n    body,\n  });\n\n  const resultJson = await sep8ActionRequiredResult.json();\n\n  // parse result\n  let validatedResponse: Sep8ActionRequiredSentResult;\n  switch (resultJson.result) {\n    case Sep8ActionRequiredResultType.NO_FURTHER_ACTION_REQUIRED:\n      validatedResponse = {\n        result: Sep8ActionRequiredResultType.NO_FURTHER_ACTION_REQUIRED,\n      };\n      break;\n\n    case Sep8ActionRequiredResultType.FOLLOW_NEXT_URL:\n      if (!resultJson.next_url) {\n        throw new Error(`Missing \"next_url\" parameter.`);\n      }\n      validatedResponse = {\n        result: Sep8ActionRequiredResultType.FOLLOW_NEXT_URL,\n        nextUrl: resultJson.next_url,\n      };\n\n      if (resultJson.message) {\n        validatedResponse.message = resultJson.message;\n      }\n      break;\n\n    default:\n      throw new Error(`Unexpected result: ${JSON.stringify(resultJson)}`);\n  }\n\n  log.response({\n    title: \"Action Required Response\",\n    body: resultJson,\n  });\n\n  const defaultCompletionMessage =\n    resultJson.result ===\n    Sep8ActionRequiredResultType.NO_FURTHER_ACTION_REQUIRED\n      ? \"The SEP-8 server received your information, re-submitting the SEP-8 payment...\"\n      : \"The SEP-8 server received your information, re-submit the SEP-8 payment.\";\n\n  log.instruction({\n    title: validatedResponse.message ?? defaultCompletionMessage,\n  });\n\n  return validatedResponse;\n};\n","import StellarSdk, {\n  Horizon,\n  Keypair,\n  Transaction,\n  TransactionBuilder,\n} from \"stellar-sdk\";\nimport { getErrorString } from \"helpers/getErrorString\";\nimport { getNetworkConfig } from \"helpers/getNetworkConfig\";\nimport { log } from \"helpers/log\";\n\nexport const submitRevisedTransaction = async ({\n  amount,\n  assetCode,\n  destination,\n  isPubnet,\n  revisedTxXdr,\n  secretKey,\n}: {\n  amount: string;\n  assetCode: string;\n  destination: string;\n  isPubnet: boolean;\n  revisedTxXdr: string;\n  secretKey: string;\n}) => {\n  const networkConfig = getNetworkConfig(isPubnet);\n  const server = new StellarSdk.Server(networkConfig.url);\n  const transaction = TransactionBuilder.fromXDR(\n    revisedTxXdr,\n    networkConfig.network,\n  ) as Transaction;\n\n  // sign transaction\n  try {\n    const keypair = Keypair.fromSecret(secretKey);\n    transaction.sign(keypair);\n  } catch (error) {\n    throw new Error(\n      `Failed to sign transaction, error: ${getErrorString(error)}`,\n    );\n  }\n\n  // submit transaction\n  log.request({\n    title: \"Submitting send payment transaction\",\n    body: transaction,\n  });\n  const result: Horizon.TransactionResponse = await server.submitTransaction(\n    transaction,\n  );\n  log.response({ title: \"Submitted send payment transaction\", body: result });\n  log.instruction({\n    title: \"SEP-8 send payment completed 🎉\",\n    body: `Payment of ${amount} ${assetCode} successfully sent to ${destination}.`,\n  });\n  return result;\n};\n","import { Horizon } from \"stellar-sdk\";\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"config/store\";\nimport { settingsSelector } from \"ducks/settings\";\nimport { getErrorMessage } from \"helpers/getErrorMessage\";\nimport { getErrorString } from \"helpers/getErrorString\";\nimport { getSep8NextStepOnSuccess } from \"helpers/getSep8NextStepOnSuccess\";\nimport { log } from \"helpers/log\";\nimport { getToml } from \"methods/getToml\";\nimport { revisePaymentTransaction } from \"methods/sep8Send/revisePaymentTransaction\";\nimport { sendActionRequiredFields } from \"methods/sep8Send/sendActionRequiredFields\";\nimport { submitRevisedTransaction } from \"methods/sep8Send/submitRevisedTransaction\";\nimport {\n  Sep8ActionRequiredSendParams,\n  ActionStatus,\n  RejectMessage,\n  Sep8ActionRequiredSentResult,\n  Sep8ApprovalResponse,\n  Sep8ApprovalStatus,\n  Sep8PaymentTransactionParams,\n  Sep8SendInitialState,\n  Sep8Step,\n} from \"types/types.d\";\n\ninterface InitiateSep8SendActionResponse {\n  approvalCriteria: string;\n  approvalServer: string;\n  assetCode: string;\n  assetIssuer: string;\n  homeDomain: string;\n  isRegulated: boolean;\n}\n\ninterface InitiateSep8SendActionParams {\n  assetCode: string;\n  assetIssuer: string;\n  homeDomain?: string;\n}\n\nexport const initiateSep8SendAction = createAsyncThunk<\n  InitiateSep8SendActionResponse,\n  InitiateSep8SendActionParams,\n  { rejectValue: RejectMessage; state: RootState }\n>(\"sep8Send/initiateSep8SendAction\", async (asset, { rejectWithValue }) => {\n  const { assetCode, assetIssuer, homeDomain } = asset;\n\n  try {\n    if (!homeDomain) {\n      throw new Error(\"Something went wrong, home domain is not defined.\");\n    }\n\n    const tomlResponse = await getToml(homeDomain);\n    const currency = (tomlResponse.CURRENCIES as any[]).find(\n      (c) => c.code === assetCode && c.issuer === assetIssuer,\n    );\n    if (!currency) {\n      throw new Error(\n        \"Couldn't find the desired asset in the anchor toml file.\",\n      );\n    }\n\n    const {\n      approval_criteria: approvalCriteria,\n      approval_server: approvalServer,\n      regulated: isRegulated,\n    } = currency;\n\n    if (!approvalCriteria) {\n      throw new Error(\n        \"The anchor toml file does not contain an approval criteria.\",\n      );\n    }\n\n    if (!approvalServer) {\n      throw new Error(\n        \"The anchor toml file does not contain an approval server.\",\n      );\n    }\n\n    // this is unlikely\n    if (!isRegulated) {\n      throw new Error(\n        'The anchor toml file does not specify this asset as \"regulated\".',\n      );\n    }\n\n    return {\n      approvalCriteria,\n      approvalServer,\n      assetCode,\n      assetIssuer,\n      homeDomain,\n      isRegulated,\n    };\n  } catch (error) {\n    const errorString = getErrorMessage(error);\n    log.error({\n      title: errorString,\n    });\n    return rejectWithValue({ errorString });\n  }\n});\n\nexport const sep8ReviseTransactionAction = createAsyncThunk<\n  Sep8ApprovalResponse,\n  Sep8PaymentTransactionParams,\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"sep8Send/sep8ReviseTransactionAction\",\n  async (params, { rejectWithValue, getState }) => {\n    const { pubnet: isPubnet } = settingsSelector(getState());\n\n    try {\n      const result = await revisePaymentTransaction({\n        params,\n        isPubnet,\n      });\n      return result;\n    } catch (error) {\n      const errorString = getErrorString(error);\n      log.error({ title: errorString });\n      return rejectWithValue({ errorString });\n    }\n  },\n);\n\nexport const sep8SubmitRevisedTransactionAction = createAsyncThunk<\n  Horizon.TransactionResponse,\n  undefined,\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"sep8Send/sep8SubmitRevisedTransactionAction\",\n  async (_, { rejectWithValue, getState }) => {\n    const { pubnet: isPubnet, secretKey } = settingsSelector(getState());\n    const { data } = sep8SendSelector(getState());\n    const { amount, destination, revisedTxXdr } = data.revisedTransaction;\n\n    try {\n      const result = await submitRevisedTransaction({\n        amount,\n        destination,\n        assetCode: data.assetCode,\n        revisedTxXdr,\n        isPubnet,\n        secretKey,\n      });\n      return result;\n    } catch (error) {\n      const errorString = getErrorString(error);\n      log.error({ title: errorString });\n      return rejectWithValue({ errorString });\n    }\n  },\n);\n\nexport const sep8SendActionRequiredFieldsAction = createAsyncThunk<\n  Sep8ActionRequiredSentResult,\n  Sep8ActionRequiredSendParams,\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"sep8Send/sep8SendActionRequiredFieldsAction\",\n  async (params, { rejectWithValue }) => {\n    const { actionFields, actionMethod, actionUrl } = params;\n\n    try {\n      const result = await sendActionRequiredFields({\n        actionFields,\n        actionMethod,\n        actionUrl,\n      });\n      return result;\n    } catch (error) {\n      const errorString = getErrorString(error);\n      log.error({ title: errorString });\n      return rejectWithValue({ errorString });\n    }\n  },\n);\n\nconst initialState: Sep8SendInitialState = {\n  data: {\n    sep8Step: Sep8Step.DISABLED,\n    approvalCriteria: \"\",\n    approvalServer: \"\",\n    assetCode: \"\",\n    assetIssuer: \"\",\n    homeDomain: \"\",\n    isRegulated: false,\n    revisedTransaction: {\n      amount: \"\",\n      destination: \"\",\n      submittedTxXdr: \"\",\n      revisedTxXdr: \"\",\n    },\n    actionRequiredInfo: {\n      actionFields: [],\n      actionMethod: \"\",\n      actionUrl: \"\",\n      message: \"\",\n    },\n    actionRequiredResult: {\n      result: \"\",\n      nextUrl: undefined,\n      message: undefined,\n    },\n  },\n  errorString: undefined,\n  status: undefined,\n};\n\nconst sep8SendSlice = createSlice({\n  name: \"sep8Send\",\n  initialState,\n  reducers: {\n    resetSep8SendAction: () => initialState,\n    sep8ClearErrorAction: (state) => ({ ...state, errorString: undefined }),\n  },\n  extraReducers: (builder) => {\n    builder.addCase(initiateSep8SendAction.pending, (state = initialState) => {\n      state.errorString = undefined;\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(initiateSep8SendAction.fulfilled, (state, action) => {\n      state.data = {\n        ...state.data,\n        ...action.payload,\n        sep8Step: getSep8NextStepOnSuccess({\n          currentStep: state.data.sep8Step,\n        }),\n      };\n      state.status = ActionStatus.SUCCESS;\n    });\n    builder.addCase(initiateSep8SendAction.rejected, (state, action) => {\n      state.errorString = action.payload?.errorString;\n      state.status = ActionStatus.ERROR;\n    });\n\n    builder.addCase(sep8ReviseTransactionAction.pending, (state) => {\n      state.errorString = undefined;\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(sep8ReviseTransactionAction.fulfilled, (state, action) => {\n      switch (action.payload.status) {\n        case Sep8ApprovalStatus.ACTION_REQUIRED: {\n          const { actionRequiredInfo, revisedTransaction } = action.payload;\n          state.data = {\n            ...state.data,\n            actionRequiredInfo:\n              actionRequiredInfo ?? state.data.actionRequiredInfo,\n            revisedTransaction:\n              revisedTransaction ?? state.data.revisedTransaction,\n          };\n          break;\n        }\n\n        case Sep8ApprovalStatus.PENDING:\n          break;\n\n        case Sep8ApprovalStatus.REVISED:\n        case Sep8ApprovalStatus.SUCCESS:\n          if (action.payload.revisedTransaction) {\n            state.data = {\n              ...state.data,\n              revisedTransaction: action.payload.revisedTransaction,\n            };\n          }\n          break;\n\n        default:\n          state.errorString = `The SEP-8 flow for \"${action.payload.status}\" status is not supported yet.`;\n          break;\n      }\n\n      state.status = ActionStatus.SUCCESS;\n      state.data.sep8Step = getSep8NextStepOnSuccess({\n        approvalStatus: action.payload.status,\n        currentStep: state.data.sep8Step,\n        didUndergoKyc: Boolean(state.data.actionRequiredResult.result),\n      });\n    });\n    builder.addCase(sep8ReviseTransactionAction.rejected, (state, action) => {\n      state.errorString = action.payload?.errorString;\n      state.status = ActionStatus.ERROR;\n    });\n\n    builder.addCase(sep8SubmitRevisedTransactionAction.pending, (state) => {\n      state.errorString = undefined;\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(sep8SubmitRevisedTransactionAction.fulfilled, (state) => {\n      state.status = ActionStatus.SUCCESS;\n      state.data.sep8Step = getSep8NextStepOnSuccess({\n        currentStep: state.data.sep8Step,\n      });\n    });\n    builder.addCase(\n      sep8SubmitRevisedTransactionAction.rejected,\n      (state, action) => {\n        state.errorString = action.payload?.errorString;\n        state.status = ActionStatus.ERROR;\n      },\n    );\n\n    builder.addCase(\n      sep8SendActionRequiredFieldsAction.pending,\n      (state = initialState) => {\n        state.errorString = undefined;\n        state.status = ActionStatus.PENDING;\n      },\n    );\n    builder.addCase(\n      sep8SendActionRequiredFieldsAction.fulfilled,\n      (state, action) => {\n        state.data = {\n          ...state.data,\n          actionRequiredResult: action.payload,\n          sep8Step: getSep8NextStepOnSuccess({\n            currentStep: state.data.sep8Step,\n          }),\n        };\n        state.status = ActionStatus.SUCCESS;\n      },\n    );\n    builder.addCase(\n      sep8SendActionRequiredFieldsAction.rejected,\n      (state, action) => {\n        state.errorString = action.payload?.errorString;\n        state.status = ActionStatus.ERROR;\n      },\n    );\n  },\n});\n\nexport const sep8SendSelector = (state: RootState) => state.sep8Send;\n\nexport const { reducer } = sep8SendSlice;\nexport const {\n  resetSep8SendAction,\n  sep8ClearErrorAction,\n} = sep8SendSlice.actions;\n","import { get } from \"lodash\";\nimport { log } from \"helpers/log\";\nimport { AnchorActionType } from \"types/types.d\";\n\nexport const checkInfo = async ({\n  type,\n  toml,\n  assetCode,\n}: {\n  type: AnchorActionType;\n  toml: any;\n  assetCode: string;\n}) => {\n  log.instruction({\n    title: `Checking \\`/info\\` endpoint to ensure this currency is enabled for ${\n      type === AnchorActionType.DEPOSIT ? \"deposit\" : \"withdrawal\"\n    }`,\n  });\n  const infoURL = `${toml.TRANSFER_SERVER_SEP0024}/info`;\n  log.request({ title: `GET \\`${infoURL}\\`` });\n\n  const info = await fetch(infoURL);\n  const infoJson = await info.json();\n  log.response({ title: `GET \\`${infoURL}\\``, body: infoJson });\n\n  if (!get(infoJson, [type, assetCode, \"enabled\"])) {\n    throw new Error(\"Asset is not enabled in the `/info` endpoint\");\n  }\n\n  return infoJson;\n};\n","import { each } from \"lodash\";\nimport { log } from \"helpers/log\";\n\ntype InteractiveDepositFlowProps = {\n  assetCode: string;\n  publicKey: string;\n  sep24TransferServerUrl: string;\n  token: string;\n  claimableBalanceSupported: boolean;\n};\n\nexport const interactiveDepositFlow = async ({\n  assetCode,\n  publicKey,\n  sep24TransferServerUrl,\n  token,\n  claimableBalanceSupported,\n}: InteractiveDepositFlowProps) => {\n  log.instruction({ title: \"Starting SEP-24 interactive flow for deposit\" });\n\n  const formData = new FormData();\n  const postDepositParams = {\n    asset_code: assetCode,\n    account: publicKey,\n    lang: \"en\",\n    claimable_balance_supported: claimableBalanceSupported.toString(),\n  };\n\n  each(postDepositParams, (value, key) => formData.append(key, value));\n\n  log.request({\n    title: `POST \\`${sep24TransferServerUrl}/transactions/deposit/interactive\\``,\n    body: postDepositParams,\n  });\n\n  const response = await fetch(\n    `${sep24TransferServerUrl}/transactions/deposit/interactive`,\n    {\n      method: \"POST\",\n      body: formData,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    },\n  );\n\n  const interactiveJson = await response.json();\n\n  log.response({\n    title: `POST \\`${sep24TransferServerUrl}/transactions/deposit/interactive\\``,\n    body: interactiveJson,\n  });\n\n  if (!interactiveJson.url) {\n    throw new Error(\n      \"No URL returned from POST `/transactions/deposit/interactive`\",\n    );\n  }\n\n  return interactiveJson;\n};\n","import { each } from \"lodash\";\nimport { log } from \"helpers/log\";\n\nexport const interactiveWithdrawFlow = async ({\n  assetCode,\n  publicKey,\n  sep24TransferServerUrl,\n  token,\n}: {\n  assetCode: string;\n  publicKey: string;\n  sep24TransferServerUrl: string;\n  token: string;\n}) => {\n  log.instruction({ title: \"Starting SEP-24 interactive flow for withdrawal\" });\n\n  const formData = new FormData();\n  const postWithdrawParams = {\n    asset_code: assetCode,\n    account: publicKey,\n    lang: \"en\",\n  };\n\n  each(postWithdrawParams, (value, key) => formData.append(key, value));\n\n  log.request({\n    title: `POST \\`${sep24TransferServerUrl}/transactions/withdraw/interactive\\``,\n    body: postWithdrawParams,\n  });\n\n  const response = await fetch(\n    `${sep24TransferServerUrl}/transactions/withdraw/interactive`,\n    {\n      method: \"POST\",\n      body: formData,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    },\n  );\n\n  const interactiveJson = await response.json();\n\n  log.response({\n    title: `POST \\`${sep24TransferServerUrl}/transactions/withdraw/interactive\\``,\n    body: interactiveJson,\n  });\n\n  if (!interactiveJson.url) {\n    throw new Error(\n      \"No URL returned from POST `/transactions/withdraw/interactive`\",\n    );\n  }\n\n  return interactiveJson;\n};\n","export const createPopup = (popupUrl: string) => {\n  const url = new URL(popupUrl);\n  const popup = open(url.toString(), \"popup\", \"width=500,height=800\");\n\n  if (!popup) {\n    throw new Error(\n      \"Popups are blocked. You’ll need to enable popups for this demo to work\",\n    );\n  }\n\n  return popup;\n};\n","import { getErrorMessage } from \"helpers/getErrorMessage\";\nimport { log } from \"helpers/log\";\nimport { TransactionStatus } from \"types/types.d\";\n\nexport const pollDepositUntilComplete = async ({\n  popup,\n  transactionId,\n  token,\n  sep24TransferServerUrl,\n  trustAssetCallback,\n}: {\n  popup: any;\n  transactionId: string;\n  token: string;\n  sep24TransferServerUrl: string;\n  trustAssetCallback: () => Promise<string>;\n}) => {\n  let currentStatus = TransactionStatus.INCOMPLETE;\n  let trustedAssetAdded;\n\n  const transactionUrl = new URL(\n    `${sep24TransferServerUrl}/transaction?id=${transactionId}`,\n  );\n  log.instruction({\n    title: `Polling for updates \\`${transactionUrl.toString()}\\``,\n  });\n\n  const endStatuses = [\n    TransactionStatus.PENDING_EXTERNAL,\n    TransactionStatus.COMPLETED,\n    TransactionStatus.ERROR,\n  ];\n\n  while (!popup.closed && !endStatuses.includes(currentStatus)) {\n    // eslint-disable-next-line no-await-in-loop\n    const response = await fetch(transactionUrl.toString(), {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n\n    // eslint-disable-next-line no-await-in-loop\n    const transactionJson = await response.json();\n\n    if (transactionJson.transaction.status !== currentStatus) {\n      currentStatus = transactionJson.transaction.status;\n      // eslint-disable-next-line no-param-reassign\n      popup.location.href = transactionJson.transaction.more_info_url;\n      log.instruction({\n        title: `Transaction \\`${transactionId}\\` is in \\`${transactionJson.transaction.status}\\` status`,\n      });\n\n      switch (currentStatus) {\n        case TransactionStatus.PENDING_USER_TRANSFER_START: {\n          log.instruction({\n            title:\n              \"The anchor is waiting on you to take the action described in the popup\",\n          });\n          break;\n        }\n        case TransactionStatus.PENDING_ANCHOR: {\n          log.instruction({\n            title: \"The anchor is processing the transaction\",\n          });\n          break;\n        }\n        case TransactionStatus.PENDING_STELLAR: {\n          log.instruction({\n            title: \"The Stellar network is processing the transaction\",\n          });\n          break;\n        }\n        case TransactionStatus.PENDING_EXTERNAL: {\n          log.instruction({\n            title: \"The transaction is being processed by an external system\",\n          });\n          break;\n        }\n        case TransactionStatus.PENDING_TRUST: {\n          log.instruction({\n            title:\n              \"You must add a trustline to the asset in order to receive your deposit\",\n          });\n\n          try {\n            // eslint-disable-next-line no-await-in-loop\n            trustedAssetAdded = await trustAssetCallback();\n          } catch (error) {\n            throw new Error(getErrorMessage(error));\n          }\n          break;\n        }\n        case TransactionStatus.PENDING_USER: {\n          log.instruction({\n            title:\n              \"The anchor is waiting for you to take the action described in the popup\",\n          });\n          break;\n        }\n        case TransactionStatus.ERROR: {\n          log.instruction({\n            title: \"There was a problem processing your transaction\",\n          });\n          break;\n        }\n        default:\n        // do nothing\n      }\n    }\n\n    // run loop every 2 seconds\n    // eslint-disable-next-line no-await-in-loop\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n  }\n\n  log.instruction({ title: `Transaction status \\`${currentStatus}\\`` });\n\n  if (!endStatuses.includes(currentStatus) && popup.closed) {\n    log.instruction({\n      title: `The popup was closed before the transaction reached a terminal status, if your balance is not updated soon, the transaction may have failed.`,\n    });\n  }\n\n  return { currentStatus, trustedAssetAdded };\n};\n","import StellarSdk, {\n  Account,\n  Asset,\n  BASE_FEE,\n  Keypair,\n  Operation,\n  TransactionBuilder,\n} from \"stellar-sdk\";\nimport { log } from \"helpers/log\";\nimport { createMemoFromType } from \"methods/createMemoFromType\";\nimport { TransactionStatus } from \"types/types.d\";\n\nexport const pollWithdrawUntilComplete = async ({\n  secretKey,\n  popup,\n  transactionId,\n  token,\n  sep24TransferServerUrl,\n  networkPassphrase,\n  networkUrl,\n  assetCode,\n  assetIssuer,\n}: {\n  secretKey: string;\n  popup: any;\n  transactionId: string;\n  token: string;\n  sep24TransferServerUrl: string;\n  networkPassphrase: string;\n  networkUrl: string;\n  assetCode: string;\n  assetIssuer: string;\n}) => {\n  const keypair = Keypair.fromSecret(secretKey);\n  const server = new StellarSdk.Server(networkUrl);\n  let currentStatus = TransactionStatus.INCOMPLETE;\n\n  const transactionUrl = new URL(\n    `${sep24TransferServerUrl}/transaction?id=${transactionId}`,\n  );\n  log.instruction({\n    title: `Polling for updates \\`${transactionUrl.toString()}\\``,\n  });\n\n  const endStatuses = [TransactionStatus.COMPLETED, TransactionStatus.ERROR];\n\n  while (!popup.closed && !endStatuses.includes(currentStatus)) {\n    // eslint-disable-next-line no-await-in-loop\n    const response = await fetch(transactionUrl.toString(), {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    // eslint-disable-next-line no-await-in-loop\n    const transactionJson = await response.json();\n\n    if (transactionJson.transaction.status !== currentStatus) {\n      currentStatus = transactionJson.transaction.status;\n      // eslint-disable-next-line no-param-reassign\n      popup.location.href = transactionJson.transaction.more_info_url;\n\n      log.instruction({\n        title: `Transaction \\`${transactionId}\\` is in \\`${transactionJson.transaction.status}\\` status`,\n      });\n\n      switch (currentStatus) {\n        case TransactionStatus.PENDING_USER_TRANSFER_START: {\n          log.instruction({\n            title:\n              \"The anchor is waiting for you to send the funds for withdrawal\",\n          });\n\n          const memo = createMemoFromType(\n            transactionJson.transaction.withdraw_memo,\n            transactionJson.transaction.withdraw_memo_type,\n          );\n\n          log.request({\n            title: \"Fetching account sequence number\",\n            body: keypair.publicKey(),\n          });\n\n          // eslint-disable-next-line no-await-in-loop\n          const { sequence } = await server\n            .accounts()\n            .accountId(keypair.publicKey())\n            .call();\n\n          log.response({\n            title: \"Fetching account sequence number\",\n            body: sequence,\n          });\n\n          const account = new Account(keypair.publicKey(), sequence);\n          const txn = new TransactionBuilder(account, {\n            fee: BASE_FEE,\n            networkPassphrase,\n          })\n            .addOperation(\n              Operation.payment({\n                destination:\n                  transactionJson.transaction.withdraw_anchor_account,\n                asset: new Asset(assetCode, assetIssuer),\n                amount: transactionJson.transaction.amount_in,\n              }),\n            )\n            .addMemo(memo)\n            .setTimeout(0)\n            .build();\n\n          txn.sign(keypair);\n\n          log.request({\n            title: \"Submitting withdrawal transaction to Stellar\",\n            body: txn,\n          });\n\n          // eslint-disable-next-line no-await-in-loop\n          const horizonResponse = await server.submitTransaction(txn);\n\n          log.response({\n            title: \"Submitted withdrawal transaction to Stellar\",\n            body: horizonResponse,\n          });\n          break;\n        }\n        case TransactionStatus.PENDING_ANCHOR: {\n          log.instruction({\n            title: \"The anchor is processing the transaction\",\n          });\n          break;\n        }\n        case TransactionStatus.PENDING_STELLAR: {\n          log.instruction({\n            title: \"The Stellar network is processing the transaction\",\n          });\n          break;\n        }\n        case TransactionStatus.PENDING_EXTERNAL: {\n          log.instruction({\n            title: \"The transaction is being processed by an external system\",\n          });\n          break;\n        }\n        case TransactionStatus.PENDING_USER: {\n          log.instruction({\n            title:\n              \"The anchor is waiting for you to take the action described in the popup\",\n          });\n          break;\n        }\n        case TransactionStatus.ERROR: {\n          log.instruction({\n            title: \"There was a problem processing your transaction\",\n          });\n          break;\n        }\n        default:\n        // do nothing\n      }\n    }\n    // run loop every 2 seconds\n    // eslint-disable-next-line no-await-in-loop\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n  }\n\n  log.instruction({ title: `Transaction status \\`${currentStatus}\\`` });\n\n  if (!endStatuses.includes(currentStatus) && popup.closed) {\n    log.instruction({\n      title: `The popup was closed before the transaction reached a terminal status, if your balance is not updated soon, the transaction may have failed.`,\n    });\n  }\n\n  return currentStatus;\n};\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"config/store\";\nimport { accountSelector } from \"ducks/account\";\nimport { settingsSelector } from \"ducks/settings\";\nimport { getErrorMessage } from \"helpers/getErrorMessage\";\nimport { getNetworkConfig } from \"helpers/getNetworkConfig\";\nimport { log } from \"helpers/log\";\nimport {\n  sep10AuthStart,\n  sep10AuthSign,\n  sep10AuthSend,\n} from \"methods/sep10Auth\";\nimport {\n  checkInfo,\n  interactiveDepositFlow,\n  createPopup,\n  pollDepositUntilComplete,\n} from \"methods/sep24\";\nimport { checkTomlForFields } from \"methods/checkTomlForFields\";\nimport { trustAsset } from \"methods/trustAsset\";\nimport {\n  Asset,\n  ActionStatus,\n  Sep24DepositAssetInitialState,\n  RejectMessage,\n  TomlFields,\n  AnchorActionType,\n} from \"types/types.d\";\n\nexport const depositAssetAction = createAsyncThunk<\n  { currentStatus: string; trustedAssetAdded?: string },\n  Asset,\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"sep24DepositAsset/depositAssetAction\",\n  async (asset, { rejectWithValue, getState }) => {\n    const { assetCode, assetIssuer, homeDomain } = asset;\n\n    const { data, secretKey } = accountSelector(getState());\n    const { pubnet, claimableBalanceSupported } = settingsSelector(getState());\n    const networkConfig = getNetworkConfig(pubnet);\n    const publicKey = data?.id;\n\n    // This is unlikely\n    if (!publicKey) {\n      throw new Error(\"Something is wrong with Account, no public key.\");\n    }\n\n    // This is unlikely\n    if (!homeDomain) {\n      throw new Error(\"Something went wrong, home domain is not defined.\");\n    }\n\n    log.instruction({ title: \"Initiating a SEP-24 deposit\" });\n\n    const trustAssetCallback = async () => {\n      const assetString = `${assetCode}:${assetIssuer}`;\n\n      await trustAsset({\n        secretKey,\n        networkPassphrase: networkConfig.network,\n        networkUrl: networkConfig.url,\n        untrustedAsset: {\n          assetString,\n          assetCode,\n          assetIssuer,\n        },\n      });\n\n      return assetString;\n    };\n\n    try {\n      // Check toml\n      const tomlResponse = await checkTomlForFields({\n        sepName: \"SEP-24 deposit\",\n        assetIssuer,\n        requiredKeys: [\n          TomlFields.SIGNING_KEY,\n          TomlFields.TRANSFER_SERVER_SEP0024,\n          TomlFields.WEB_AUTH_ENDPOINT,\n        ],\n        networkUrl: networkConfig.url,\n        homeDomain,\n      });\n\n      // Check info\n      await checkInfo({\n        type: AnchorActionType.DEPOSIT,\n        toml: tomlResponse,\n        assetCode,\n      });\n\n      log.instruction({\n        title:\n          \"SEP-24 deposit is enabled, and requires authentication so we should go through SEP-10\",\n      });\n\n      // SEP-10 start\n      const challengeTransaction = await sep10AuthStart({\n        authEndpoint: tomlResponse.WEB_AUTH_ENDPOINT,\n        serverSigningKey: tomlResponse.SIGNING_KEY,\n        publicKey,\n        homeDomain,\n      });\n\n      // SEP-10 sign\n      const signedChallengeTransaction = sep10AuthSign({\n        secretKey,\n        networkPassphrase: networkConfig.network,\n        challengeTransaction,\n      });\n\n      // SEP-10 send\n      const token = await sep10AuthSend({\n        authEndpoint: tomlResponse.WEB_AUTH_ENDPOINT,\n        signedChallengeTransaction,\n      });\n\n      // Interactive flow\n      const interactiveResponse = await interactiveDepositFlow({\n        assetCode,\n        publicKey,\n        sep24TransferServerUrl: tomlResponse.TRANSFER_SERVER_SEP0024,\n        token,\n        claimableBalanceSupported,\n      });\n\n      // Create popup\n      const popup = createPopup(interactiveResponse.url);\n\n      // Poll transaction until complete\n      const {\n        currentStatus,\n        trustedAssetAdded,\n      } = await pollDepositUntilComplete({\n        popup,\n        transactionId: interactiveResponse.id,\n        token,\n        sep24TransferServerUrl: tomlResponse.TRANSFER_SERVER_SEP0024,\n        trustAssetCallback,\n      });\n\n      return {\n        currentStatus,\n        trustedAssetAdded,\n      };\n    } catch (error) {\n      const errorMessage = getErrorMessage(error);\n\n      log.error({\n        title: \"SEP-24 deposit failed\",\n        body: errorMessage,\n      });\n\n      return rejectWithValue({\n        errorString: errorMessage,\n      });\n    }\n  },\n);\n\nconst initialState: Sep24DepositAssetInitialState = {\n  data: {\n    currentStatus: \"\",\n    trustedAssetAdded: undefined,\n  },\n  status: undefined,\n  errorString: undefined,\n};\n\nconst sep24DepositAssetSlice = createSlice({\n  name: \"sep24DepositAsset\",\n  initialState,\n  reducers: {\n    resetSep24DepositAssetAction: () => initialState,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(depositAssetAction.pending, (state) => {\n      state.errorString = undefined;\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(depositAssetAction.fulfilled, (state, action) => {\n      state.data = action.payload;\n      state.status = ActionStatus.SUCCESS;\n    });\n    builder.addCase(depositAssetAction.rejected, (state, action) => {\n      state.errorString = action.payload?.errorString;\n      state.status = ActionStatus.ERROR;\n    });\n  },\n});\n\nexport const { reducer } = sep24DepositAssetSlice;\nexport const { resetSep24DepositAssetAction } = sep24DepositAssetSlice.actions;\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"config/store\";\nimport { accountSelector } from \"ducks/account\";\nimport { settingsSelector } from \"ducks/settings\";\nimport { getErrorMessage } from \"helpers/getErrorMessage\";\nimport { getNetworkConfig } from \"helpers/getNetworkConfig\";\nimport { log } from \"helpers/log\";\nimport {\n  sep10AuthStart,\n  sep10AuthSign,\n  sep10AuthSend,\n} from \"methods/sep10Auth\";\nimport {\n  checkInfo,\n  interactiveWithdrawFlow,\n  createPopup,\n  pollWithdrawUntilComplete,\n} from \"methods/sep24\";\nimport { checkTomlForFields } from \"methods/checkTomlForFields\";\nimport {\n  Asset,\n  ActionStatus,\n  RejectMessage,\n  Sep24WithdrawAssetInitialState,\n  TomlFields,\n  AnchorActionType,\n} from \"types/types.d\";\n\nexport const withdrawAssetAction = createAsyncThunk<\n  { currentStatus: string },\n  Asset,\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"sep24WithdrawAsset/withdrawAssetAction\",\n  async (asset, { rejectWithValue, getState }) => {\n    const { assetIssuer, assetCode, homeDomain } = asset;\n    const { data, secretKey } = accountSelector(getState());\n    const { pubnet } = settingsSelector(getState());\n    const networkConfig = getNetworkConfig(pubnet);\n    const publicKey = data?.id;\n\n    // This is unlikely\n    if (!publicKey) {\n      throw new Error(\"Something is wrong with Account, no public key.\");\n    }\n\n    // This is unlikely\n    if (!homeDomain) {\n      throw new Error(\"Something went wrong, home domain is not defined.\");\n    }\n\n    try {\n      // Check toml\n      const tomlResponse = await checkTomlForFields({\n        sepName: \"SEP-24 withdrawal\",\n        assetIssuer,\n        requiredKeys: [\n          TomlFields.SIGNING_KEY,\n          TomlFields.TRANSFER_SERVER_SEP0024,\n          TomlFields.WEB_AUTH_ENDPOINT,\n        ],\n        networkUrl: networkConfig.url,\n        homeDomain,\n      });\n\n      // Check info\n      await checkInfo({\n        type: AnchorActionType.WITHDRAWAL,\n        toml: tomlResponse,\n        assetCode,\n      });\n\n      log.instruction({\n        title:\n          \"SEP-24 withdrawal is enabled, and requires authentication so we should go through SEP-10\",\n      });\n\n      // SEP-10 start\n      const challengeTransaction = await sep10AuthStart({\n        authEndpoint: tomlResponse.WEB_AUTH_ENDPOINT,\n        serverSigningKey: tomlResponse.SIGNING_KEY,\n        publicKey,\n        homeDomain,\n      });\n\n      // SEP-10 sign\n      const signedChallengeTransaction = sep10AuthSign({\n        secretKey,\n        networkPassphrase: networkConfig.network,\n        challengeTransaction,\n      });\n\n      // SEP-10 send\n      const token = await sep10AuthSend({\n        authEndpoint: tomlResponse.WEB_AUTH_ENDPOINT,\n        signedChallengeTransaction,\n      });\n\n      // Interactive flow\n      const interactiveResponse = await interactiveWithdrawFlow({\n        assetCode,\n        publicKey,\n        sep24TransferServerUrl: tomlResponse.TRANSFER_SERVER_SEP0024,\n        token,\n      });\n\n      // Create popup\n      const popup = createPopup(interactiveResponse.url);\n\n      // Poll transaction until complete\n      const currentStatus = await pollWithdrawUntilComplete({\n        secretKey,\n        popup,\n        transactionId: interactiveResponse.id,\n        token,\n        sep24TransferServerUrl: tomlResponse.TRANSFER_SERVER_SEP0024,\n        networkPassphrase: networkConfig.network,\n        networkUrl: networkConfig.url,\n        assetCode,\n        assetIssuer,\n      });\n\n      return {\n        currentStatus,\n      };\n    } catch (error) {\n      const errorMessage = getErrorMessage(error);\n\n      log.error({\n        title: \"SEP-24 withdrawal failed\",\n        body: errorMessage,\n      });\n\n      return rejectWithValue({\n        errorString: errorMessage,\n      });\n    }\n  },\n);\n\nconst initialState: Sep24WithdrawAssetInitialState = {\n  data: {\n    currentStatus: \"\",\n  },\n  status: undefined,\n  errorString: undefined,\n};\n\nconst sep24WithdrawAssetSlice = createSlice({\n  name: \"sep24WithdrawAsset\",\n  initialState,\n  reducers: {\n    resetSep24WithdrawAssetAction: () => initialState,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(withdrawAssetAction.pending, (state) => {\n      state.errorString = undefined;\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(withdrawAssetAction.fulfilled, (state, action) => {\n      state.data = action.payload;\n      state.status = ActionStatus.SUCCESS;\n    });\n    builder.addCase(withdrawAssetAction.rejected, (state, action) => {\n      state.errorString = action.payload?.errorString;\n      state.status = ActionStatus.ERROR;\n    });\n  },\n});\n\nexport const { reducer } = sep24WithdrawAssetSlice;\nexport const {\n  resetSep24WithdrawAssetAction,\n} = sep24WithdrawAssetSlice.actions;\n","import { isEmptyObject } from \"helpers/isEmptyObject\";\nimport { log } from \"helpers/log\";\n\nexport const checkInfo = async ({\n  assetCode,\n  sendServer,\n}: {\n  assetCode: string;\n  sendServer: string;\n}) => {\n  log.instruction({\n    title: \"Checking `/info` endpoint to see if we need to authenticate\",\n  });\n\n  log.request({ title: \"GET `/info`\" });\n\n  const result = await fetch(`${sendServer}/info`);\n  const resultJson = await result.json();\n\n  log.response({ title: \"GET `/info`\", body: resultJson });\n\n  if (!resultJson.receive) {\n    throw new Error(\"`/info` response needs a `receive` property\");\n  }\n\n  const asset = resultJson.receive[assetCode];\n\n  if (!asset) {\n    throw new Error(\n      `Could not find asset code ${assetCode} in \\`/info\\` response`,\n    );\n  }\n\n  if (!asset.enabled) {\n    throw new Error(`${assetCode} is not enabled for deposit`);\n  }\n\n  if (!asset.fields || isEmptyObject(asset.fields)) {\n    throw new Error(\"No `fields` object specified in `/info`\");\n  }\n\n  if (!asset.fields.transaction) {\n    throw new Error(\"No `transaction` object specified in `fields`\");\n  }\n\n  let senderType;\n  let receiverType;\n  let multipleSenderTypes;\n  let multipleReceiverTypes;\n\n  if (asset.sep12) {\n    // Sender\n    if (asset.sep12.sender?.types) {\n      const _senderTypes = Object.keys(asset.sep12.sender.types);\n\n      if (_senderTypes.length === 1) {\n        senderType = _senderTypes[0];\n\n        log.instruction({\n          title: `Using \\`${senderType}\\` ${asset.sep12.sender.types[senderType].description}`,\n        });\n      } else if (_senderTypes.length) {\n        multipleSenderTypes = _senderTypes.map((s) => ({\n          type: s,\n          description: asset.sep12.sender.types[s].description,\n        }));\n\n        log.instruction({\n          title: \"Found multiple customer types for senders\",\n          body: `${_senderTypes.join(\", \")}`,\n        });\n      }\n    }\n\n    // Receiver\n    if (asset.sep12.receiver?.types) {\n      const _receiverTypes = Object.keys(asset.sep12.receiver.types);\n\n      if (_receiverTypes.length === 1) {\n        receiverType = _receiverTypes[0];\n\n        log.instruction({\n          title: `Using \\`${receiverType}\\` ${asset.sep12.receiver.types[receiverType].description}`,\n        });\n      } else if (_receiverTypes.length) {\n        multipleReceiverTypes = _receiverTypes.map((r) => ({\n          type: r,\n          description: asset.sep12.receiver.types[r].description,\n        }));\n\n        log.instruction({\n          title: \"Found multiple customer types for receivers\",\n          body: `${_receiverTypes.join(\", \")}`,\n        });\n      }\n    }\n  } else {\n    if (asset.sender_sep12_type) {\n      senderType = asset.sender_sep12_type;\n\n      log.instruction({\n        title: `Using \\`${senderType}\\` type for sending customers`,\n      });\n    }\n\n    if (asset.receiver_sep12_type) {\n      receiverType = asset.receiver_sep12_type;\n\n      log.instruction({\n        title: `Using \\`${receiverType}\\` type for receiving customers`,\n      });\n    }\n  }\n\n  if (!senderType && !multipleSenderTypes) {\n    log.instruction({\n      title: \"The anchor does not require KYC for sending customers\",\n    });\n  }\n\n  if (!receiverType && !multipleReceiverTypes) {\n    log.instruction({\n      title: \"The anchor does not require KYC for receiving customers\",\n    });\n  }\n\n  log.instruction({ title: `Send is enabled for asset ${assetCode}` });\n  log.instruction({\n    title: \"The receiving anchor requires the following fields\",\n    body: asset.fields,\n  });\n\n  return {\n    fields: asset.fields,\n    senderType,\n    receiverType,\n    multipleSenderTypes,\n    multipleReceiverTypes,\n  };\n};\n","export const isEmptyObject = (obj: any) => !Object.entries(obj).length;\n","import crypto from \"crypto\";\nimport { log } from \"helpers/log\";\nimport { collectSep12Fields } from \"../sep12/collectSep12Fields\";\n\nexport const getSep12Fields = async ({\n  kycServer,\n  receiverType,\n  publicKey,\n  senderType,\n  token,\n}: {\n  kycServer: string;\n  receiverType: string | undefined;\n  publicKey: string;\n  senderType: string | undefined;\n  token: string;\n}) => {\n  log.instruction({\n    title: \"Making GET `/customer` requests for sending and receiving users\",\n  });\n\n  const result = {\n    senderSep12Fields: null,\n    receiverSep12Fields: null,\n    info: {\n      senderSep12Memo: \"\",\n      receiverSep12Memo: \"\",\n    },\n  };\n\n  if (senderType) {\n    const memo = crypto.randomBytes(32).toString(\"base64\");\n\n    result.senderSep12Fields = await collectSep12Fields({\n      type: senderType,\n      memo,\n      publicKey,\n      token,\n      kycServer,\n      isNewCustomer: true,\n    });\n\n    result.info.senderSep12Memo = memo;\n  }\n\n  if (receiverType) {\n    const memo = crypto.randomBytes(32).toString(\"base64\");\n\n    result.receiverSep12Fields = await collectSep12Fields({\n      type: receiverType,\n      memo,\n      publicKey,\n      token,\n      kycServer,\n      isNewCustomer: true,\n    });\n\n    result.info.receiverSep12Memo = memo;\n  }\n\n  return result;\n};\n","import { log } from \"helpers/log\";\n\nimport { putSep12FieldsRequest } from \"../sep12\";\n\ninterface PutSep12FieldsProps {\n  formData: any;\n  secretKey: string;\n  senderMemo: string;\n  receiverMemo: string;\n  fields: any;\n  token: string;\n  kycServer: string;\n}\n\nexport const putSep12Fields = async ({\n  formData,\n  secretKey,\n  senderMemo,\n  receiverMemo,\n  fields,\n  token,\n  kycServer,\n}: PutSep12FieldsProps) => {\n  log.instruction({\n    title: \"Making PUT `/customer` requests for sending and receiving users\",\n  });\n\n  const result = {\n    senderSep12Id: \"\",\n    receiverSep12Id: \"\",\n  };\n\n  if (fields.sender) {\n    const resultJson = await putSep12FieldsRequest({\n      secretKey,\n      fields: formData.sender,\n      memo: senderMemo,\n      token,\n      kycServer,\n      isSender: true,\n    });\n\n    result.senderSep12Id = resultJson.id;\n  }\n\n  if (fields.receiver) {\n    const resultJson = await putSep12FieldsRequest({\n      secretKey,\n      fields: formData.receiver,\n      memo: receiverMemo,\n      token,\n      kycServer,\n      isSender: false,\n    });\n\n    result.receiverSep12Id = resultJson.id;\n  }\n\n  return result;\n};\n","import { log } from \"helpers/log\";\n\ninterface PostTransactionProps {\n  token: string;\n  sendServer: string;\n  senderId: string;\n  receiverId: string;\n  transactionFormData: any;\n  assetCode: string;\n  amount: string;\n}\n\nexport const postTransaction = async ({\n  token,\n  sendServer,\n  senderId,\n  receiverId,\n  transactionFormData,\n  assetCode,\n  amount,\n}: PostTransactionProps) => {\n  log.instruction({\n    title: \"POST relevant field info to create a new payment\",\n  });\n\n  const body = {\n    sender_id: senderId,\n    receiver_id: receiverId,\n    fields: { transaction: transactionFormData },\n    asset_code: assetCode,\n    amount,\n  };\n  log.request({ title: \"POST `/transactions`\", body });\n\n  const result = await fetch(`${sendServer}/transactions`, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  });\n\n  if (![200, 201].includes(result.status)) {\n    throw new Error(\n      `POST \\`/transactions\\` responded with status ${result.status}`,\n    );\n  }\n\n  const resultJson = await result.json();\n  log.response({ title: \"POST `/transactions`\", body: resultJson });\n\n  const requiredProps = [\n    \"id\",\n    \"stellar_account_id\",\n    \"stellar_memo_type\",\n    \"stellar_memo\",\n  ];\n\n  requiredProps.forEach((prop) => {\n    if (!resultJson[prop]) {\n      throw new Error(\n        `POST \\`/transactions\\` response missing property \\`${prop}\\``,\n      );\n    }\n  });\n\n  return {\n    sendMemoType: resultJson.stellar_memo_type,\n    sendMemo: resultJson.stellar_memo,\n    receiverAddress: resultJson.stellar_account_id,\n    transactionId: resultJson.id,\n  };\n};\n","import { log } from \"helpers/log\";\nimport { TransactionStatus } from \"types/types.d\";\n\nexport const pollTransactionUntilReady = async ({\n  sendServer,\n  transactionId,\n  token,\n}: {\n  sendServer: string;\n  transactionId: string;\n  token: string;\n}) => {\n  log.instruction({\n    title: `Polling \\`/transactions/:id\\` endpoint until transaction status is \\`${TransactionStatus.PENDING_SENDER}\\``,\n  });\n\n  let transactionStatus;\n\n  while (transactionStatus !== TransactionStatus.PENDING_SENDER) {\n    log.request({ title: `GET \\`/transactions/${transactionId}\\`` });\n    // eslint-disable-next-line no-await-in-loop\n    const result = await fetch(`${sendServer}/transactions/${transactionId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (result.status !== 200) {\n      throw new Error(\n        `GET \\`/transactions/${transactionId}\\` responded with status \\`${result.status}\\``,\n      );\n    }\n\n    // eslint-disable-next-line no-await-in-loop\n    const resultJson = await result.json();\n    log.response({\n      title: `GET \\`/transactions/${transactionId}\\``,\n      body: resultJson,\n    });\n    transactionStatus = resultJson.transaction.status;\n\n    // eslint-disable-next-line no-await-in-loop\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n  }\n};\n","import { log } from \"helpers/log\";\nimport { TransactionStatus } from \"types/types.d\";\n\nexport const pollTransactionUntilComplete = async ({\n  sendServer,\n  transactionId,\n  token,\n}: {\n  sendServer: string;\n  transactionId: string;\n  token: string;\n}) => {\n  log.instruction({\n    title:\n      \"Polling `/transactions/:id` endpoint until transaction status reaches end status\",\n  });\n\n  let currentStatus;\n  let resultJson;\n\n  log.request({ title: `GET \\`/transactions/${transactionId}\\`` });\n\n  while (\n    ![\n      TransactionStatus.PENDING_EXTERNAL,\n      TransactionStatus.COMPLETED,\n      TransactionStatus.ERROR,\n    ].includes(currentStatus)\n  ) {\n    // eslint-disable-next-line no-await-in-loop\n    const result = await fetch(`${sendServer}/transactions/${transactionId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (result.status !== 200) {\n      throw new Error(\n        `GET \\`/transactions/${transactionId}\\` responded with status \\`${result.status}\\``,\n      );\n    }\n\n    // eslint-disable-next-line no-await-in-loop\n    resultJson = await result.json();\n\n    if (currentStatus !== resultJson.transaction.status) {\n      currentStatus = resultJson.transaction.status;\n\n      log.instruction({\n        title: `Transaction \\`${transactionId}\\` is in \\`${resultJson.transaction.status}\\` status`,\n      });\n\n      switch (currentStatus) {\n        case TransactionStatus.PENDING_SENDER:\n          log.instruction({\n            title: \"Awaiting payment to be initiated by sending anchor\",\n          });\n          break;\n        case TransactionStatus.PENDING_STELLAR:\n          log.instruction({\n            title:\n              \"Transaction has been submitted to Stellar network, but is not yet confirmed\",\n          });\n          break;\n        case TransactionStatus.PENDING_CUSTOMER_INFO_UPDATE:\n          log.instruction({\n            title:\n              \"Certain pieces of information need to be updated by the sending anchor\",\n          });\n          break;\n        case TransactionStatus.PENDING_TRANSACTION_INFO_UPDATE:\n          log.instruction({\n            title:\n              \"Certain pieces of information need to be updated by the sending anchor\",\n          });\n          break;\n        case TransactionStatus.PENDING_RECEIVER:\n          log.instruction({\n            title: \"Payment is being processed by the receiving anchor\",\n          });\n          break;\n        default:\n        // do nothing\n      }\n    }\n\n    // run loop every 2 seconds\n    // eslint-disable-next-line no-await-in-loop\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n  }\n\n  if (!resultJson) {\n    throw new Error(\"Something went wrong, there was no response\");\n  }\n\n  log.response({\n    title: `GET \\`/transactions/${transactionId}\\``,\n    body: resultJson,\n  });\n};\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"config/store\";\nimport { accountSelector } from \"ducks/account\";\nimport { settingsSelector } from \"ducks/settings\";\nimport { getErrorMessage } from \"helpers/getErrorMessage\";\nimport { getNetworkConfig } from \"helpers/getNetworkConfig\";\nimport { log } from \"helpers/log\";\n\nimport {\n  sep10AuthStart,\n  sep10AuthSign,\n  sep10AuthSend,\n} from \"methods/sep10Auth\";\nimport {\n  checkInfo,\n  getSep12Fields,\n  putSep12Fields,\n  postTransaction,\n  pollTransactionUntilReady,\n  sendPayment,\n  pollTransactionUntilComplete,\n} from \"methods/sep31Send\";\nimport { checkTomlForFields } from \"methods/checkTomlForFields\";\n\nimport {\n  Asset,\n  ActionStatus,\n  AnyObject,\n  CustomerTypeItem,\n  Sep31SendInitialState,\n  RejectMessage,\n  TomlFields,\n} from \"types/types.d\";\n\ninterface InitiateSendActionResponse {\n  publicKey: string;\n  homeDomain: string;\n  assetCode: string;\n  assetIssuer: string;\n  fields: {\n    transaction: AnyObject;\n    sender: AnyObject;\n    receiver: AnyObject;\n  };\n  senderType: string | undefined;\n  receiverType: string | undefined;\n  multipleSenderTypes: CustomerTypeItem[] | undefined;\n  multipleReceiverTypes: CustomerTypeItem[] | undefined;\n  authEndpoint: string;\n  sendServer: string;\n  kycServer: string;\n  serverSigningKey: string;\n  isTypeSelected: boolean;\n}\n\nexport const initiateSendAction = createAsyncThunk<\n  InitiateSendActionResponse,\n  Asset,\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"sep31Send/initiateSendAction\",\n  async (asset, { rejectWithValue, getState }) => {\n    try {\n      const { pubnet } = settingsSelector(getState());\n      const { data } = accountSelector(getState());\n      const networkConfig = getNetworkConfig(pubnet);\n      const publicKey = data?.id;\n\n      const { assetCode, assetIssuer, homeDomain } = asset;\n\n      // This is unlikely\n      if (!publicKey) {\n        throw new Error(\"Something is wrong with Account, no public key.\");\n      }\n\n      // This is unlikely\n      if (!homeDomain) {\n        throw new Error(\"Something went wrong, home domain is not defined.\");\n      }\n\n      log.instruction({ title: \"Initiating a SEP-31 direct payment\" });\n\n      // Check toml\n      const tomlResponse = await checkTomlForFields({\n        sepName: \"SEP-31 send\",\n        assetIssuer,\n        requiredKeys: [\n          TomlFields.WEB_AUTH_ENDPOINT,\n          TomlFields.SIGNING_KEY,\n          TomlFields.DIRECT_PAYMENT_SERVER,\n          TomlFields.KYC_SERVER,\n        ],\n        networkUrl: networkConfig.url,\n        homeDomain,\n      });\n\n      const authEndpoint = tomlResponse.WEB_AUTH_ENDPOINT;\n      const serverSigningKey = tomlResponse.SIGNING_KEY;\n      const sendServer = tomlResponse.DIRECT_PAYMENT_SERVER;\n      const kycServer = tomlResponse.KYC_SERVER;\n\n      // Check info\n      const infoResponse = await checkInfo({ assetCode, sendServer });\n\n      // If there are multiple sender or receiver types the status will be\n      // returned NEEDS_INPUT, which will show modal for user to select types.\n\n      return {\n        publicKey,\n        homeDomain,\n        assetCode,\n        assetIssuer,\n        fields: {\n          transaction: infoResponse.fields.transaction,\n          sender: {},\n          receiver: {},\n        },\n        senderType: infoResponse.senderType,\n        receiverType: infoResponse.receiverType,\n        multipleSenderTypes: infoResponse.multipleSenderTypes,\n        multipleReceiverTypes: infoResponse.multipleReceiverTypes,\n        authEndpoint,\n        sendServer,\n        kycServer,\n        serverSigningKey,\n        isTypeSelected: Boolean(\n          !infoResponse.multipleSenderTypes &&\n            !infoResponse.multipleReceiverTypes,\n        ),\n      };\n    } catch (error) {\n      const errorMessage = getErrorMessage(error);\n      log.error({\n        title: errorMessage,\n      });\n      return rejectWithValue({\n        errorString: errorMessage,\n      });\n    }\n  },\n);\n\ninterface SetCustomerTypesActionResponse {\n  senderType: string | undefined;\n  receiverType: string | undefined;\n  isTypeSelected: boolean;\n}\n\nexport const setCustomerTypesAction = createAsyncThunk<\n  SetCustomerTypesActionResponse,\n  { senderType?: string; receiverType?: string },\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"sep31Send/setCustomerTypesAction\",\n  ({ senderType = \"\", receiverType = \"\" }) => {\n    if (senderType) {\n      log.instruction({\n        title: `Using \\`${senderType}\\` type for sending customers`,\n      });\n    }\n\n    if (receiverType) {\n      log.instruction({\n        title: `Using \\`${receiverType}\\` type for receiving customers`,\n      });\n    }\n\n    return {\n      senderType,\n      receiverType,\n      isTypeSelected: true,\n    };\n  },\n);\n\ninterface FetchSendFieldsActionResponse {\n  token: string;\n  fields: {\n    transaction: AnyObject;\n    sender: AnyObject;\n    receiver: AnyObject;\n  };\n  senderMemo: string;\n  receiverMemo: string;\n}\n\nexport const fetchSendFieldsAction = createAsyncThunk<\n  FetchSendFieldsActionResponse,\n  undefined,\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"sep31Send/fetchSendFieldsAction\",\n  async (_, { rejectWithValue, getState }) => {\n    try {\n      const { pubnet } = settingsSelector(getState());\n      const { secretKey } = accountSelector(getState());\n      const { data } = sep31SendSelector(getState());\n      const networkConfig = getNetworkConfig(pubnet);\n\n      const {\n        authEndpoint,\n        serverSigningKey,\n        publicKey,\n        homeDomain,\n        kycServer,\n        senderType,\n        receiverType,\n        fields,\n      } = data;\n\n      // SEP-10 start\n      const challengeTransaction = await sep10AuthStart({\n        authEndpoint,\n        serverSigningKey,\n        publicKey,\n        homeDomain,\n      });\n\n      // SEP-10 sign\n      const signedChallengeTransaction = sep10AuthSign({\n        secretKey,\n        networkPassphrase: networkConfig.network,\n        challengeTransaction,\n      });\n\n      // SEP-10 send\n      const token = await sep10AuthSend({\n        authEndpoint,\n        signedChallengeTransaction,\n      });\n\n      // Get SEP-12 fields\n      const sep12Fields = await getSep12Fields({\n        kycServer,\n        publicKey,\n        token,\n        senderType,\n        receiverType,\n      });\n\n      // Show form to collect input data for fields\n      log.instruction({\n        title:\n          \"To collect the required information we show a form with all the requested fields from `/info`\",\n      });\n\n      return {\n        token,\n        fields: {\n          transaction: fields.transaction,\n          sender: sep12Fields.senderSep12Fields || {},\n          receiver: sep12Fields.receiverSep12Fields || {},\n        },\n        senderMemo: sep12Fields.info.senderSep12Memo,\n        receiverMemo: sep12Fields.info.receiverSep12Memo,\n      };\n    } catch (error) {\n      const errorMessage = getErrorMessage(error);\n      log.error({\n        title: errorMessage,\n      });\n      return rejectWithValue({\n        errorString: errorMessage,\n      });\n    }\n  },\n);\n\ninterface SubmitSep31SendTransactionActionProps {\n  amount: { amount: string };\n  transaction: AnyObject;\n  sender: AnyObject;\n  receiver: AnyObject;\n}\n\nexport const submitSep31SendTransactionAction = createAsyncThunk<\n  boolean,\n  SubmitSep31SendTransactionActionProps,\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"sep31Send/submitSep31SendTransactionAction\",\n  async (\n    { amount, transaction, sender, receiver },\n    { rejectWithValue, getState },\n  ) => {\n    try {\n      const { secretKey } = accountSelector(getState());\n      const { data } = sep31SendSelector(getState());\n      const { pubnet } = settingsSelector(getState());\n      const networkConfig = getNetworkConfig(pubnet);\n      const {\n        token,\n        assetCode,\n        assetIssuer,\n        kycServer,\n        sendServer,\n        senderMemo,\n        receiverMemo,\n        fields,\n      } = data;\n\n      // Put SEP-12 fields\n      const putSep12FieldsResponse = await putSep12Fields({\n        fields,\n        formData: { sender, receiver },\n        secretKey,\n        senderMemo,\n        receiverMemo,\n        kycServer,\n        token,\n      });\n\n      // Post transaction\n      const postResponse = await postTransaction({\n        amount: amount.amount,\n        assetCode,\n        senderId: putSep12FieldsResponse.senderSep12Id,\n        receiverId: putSep12FieldsResponse.receiverSep12Id,\n        transactionFormData: transaction,\n        sendServer,\n        token,\n      });\n\n      // Poll transaction until ready\n      await pollTransactionUntilReady({\n        sendServer,\n        transactionId: postResponse.transactionId,\n        token,\n      });\n\n      // Send payment\n      await sendPayment({\n        amount: amount.amount,\n        assetCode,\n        assetIssuer,\n        receiverAddress: postResponse.receiverAddress,\n        secretKey,\n        sendMemo: postResponse.sendMemo,\n        sendMemoType: postResponse.sendMemoType,\n        networkUrl: networkConfig.url,\n        networkPassphrase: networkConfig.network,\n      });\n\n      // Poll transaction until complete\n      await pollTransactionUntilComplete({\n        sendServer,\n        transactionId: postResponse.transactionId,\n        token,\n      });\n\n      log.instruction({\n        title: \"SEP-31 send payment completed\",\n      });\n\n      return true;\n    } catch (error) {\n      const errorMessage = getErrorMessage(error);\n\n      log.error({\n        title: errorMessage,\n      });\n\n      return rejectWithValue({\n        errorString: errorMessage,\n      });\n    }\n  },\n);\n\nconst initialState: Sep31SendInitialState = {\n  data: {\n    publicKey: \"\",\n    homeDomain: \"\",\n    assetCode: \"\",\n    assetIssuer: \"\",\n    token: \"\",\n    fields: {\n      transaction: {},\n      sender: {},\n      receiver: {},\n    },\n    isTypeSelected: false,\n    senderType: undefined,\n    receiverType: undefined,\n    senderMemo: \"\",\n    receiverMemo: \"\",\n    multipleSenderTypes: undefined,\n    multipleReceiverTypes: undefined,\n    authEndpoint: \"\",\n    sendServer: \"\",\n    kycServer: \"\",\n    serverSigningKey: \"\",\n  },\n  errorString: undefined,\n  status: undefined,\n};\n\nconst sep31SendSlice = createSlice({\n  name: \"sep31Send\",\n  initialState,\n  reducers: {\n    resetSep31SendAction: () => initialState,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(initiateSendAction.pending, (state = initialState) => {\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(initiateSendAction.fulfilled, (state, action) => {\n      state.data = { ...state.data, ...action.payload };\n      state.status =\n        action.payload.multipleSenderTypes ||\n        action.payload.multipleReceiverTypes\n          ? ActionStatus.NEEDS_INPUT\n          : ActionStatus.CAN_PROCEED;\n    });\n    builder.addCase(initiateSendAction.rejected, (state, action) => {\n      state.errorString = action.payload?.errorString;\n      state.status = ActionStatus.ERROR;\n    });\n\n    builder.addCase(setCustomerTypesAction.pending, (state = initialState) => {\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(setCustomerTypesAction.fulfilled, (state, action) => {\n      state.data = { ...state.data, ...action.payload };\n      state.status = ActionStatus.CAN_PROCEED;\n    });\n\n    builder.addCase(fetchSendFieldsAction.pending, (state = initialState) => {\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(fetchSendFieldsAction.fulfilled, (state, action) => {\n      state.data = { ...state.data, ...action.payload };\n      state.status = ActionStatus.NEEDS_INPUT;\n    });\n    builder.addCase(fetchSendFieldsAction.rejected, (state, action) => {\n      state.errorString = action.payload?.errorString;\n      state.status = ActionStatus.ERROR;\n    });\n\n    builder.addCase(\n      submitSep31SendTransactionAction.pending,\n      (state = initialState) => {\n        state.status = ActionStatus.PENDING;\n      },\n    );\n    builder.addCase(submitSep31SendTransactionAction.fulfilled, (state) => {\n      state.status = ActionStatus.SUCCESS;\n    });\n    builder.addCase(\n      submitSep31SendTransactionAction.rejected,\n      (state, action) => {\n        state.errorString = action.payload?.errorString;\n        state.status = ActionStatus.ERROR;\n      },\n    );\n  },\n});\n\nexport const sep31SendSelector = (state: RootState) => state.sep31Send;\n\nexport const { reducer } = sep31SendSlice;\nexport const { resetSep31SendAction } = sep31SendSlice.actions;\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"config/store\";\nimport { ActionStatus, LogItemProps, LogsInitialState } from \"types/types.d\";\n\nconst initialState: LogsInitialState = {\n  errorString: \"\",\n  items: [],\n  status: undefined,\n};\n\nexport const addLogAction = createAsyncThunk<LogItemProps, LogItemProps>(\n  \"logs/addLog\",\n  (logItem) => logItem,\n);\n\nconst logsSlice = createSlice({\n  name: \"logs\",\n  initialState,\n  reducers: {\n    clearLogsAction: () => initialState,\n    logAction: (state, action: PayloadAction<LogItemProps>) => {\n      state.items = [...state.items, action.payload];\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(addLogAction.pending, (state = initialState) => {\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(addLogAction.fulfilled, (state, action) => {\n      state.items = [...state.items, action.payload];\n      state.status = ActionStatus.SUCCESS;\n    });\n  },\n});\n\nexport const logsSelector = (state: RootState) => state.logs;\n\nexport const { reducer } = logsSlice;\nexport const { logAction, clearLogsAction } = logsSlice.actions;\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { Horizon } from \"stellar-sdk\";\nimport { RootState } from \"config/store\";\nimport { settingsSelector } from \"ducks/settings\";\nimport { getErrorString } from \"helpers/getErrorString\";\nimport { log } from \"helpers/log\";\nimport { submitPaymentTransaction } from \"methods/submitPaymentTransaction\";\nimport {\n  ActionStatus,\n  PaymentTransactionParams,\n  SendPaymentInitialState,\n  RejectMessage,\n} from \"types/types.d\";\n\nexport const sendPaymentAction = createAsyncThunk<\n  Horizon.TransactionResponse,\n  PaymentTransactionParams,\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"sendPayment/sendPaymentAction\",\n  async (params, { rejectWithValue, getState }) => {\n    const { pubnet, secretKey } = settingsSelector(getState());\n    let result;\n\n    try {\n      result = await submitPaymentTransaction({\n        params,\n        secretKey,\n        isPubnet: pubnet,\n      });\n    } catch (error) {\n      const errorString = getErrorString(error);\n      log.error({ title: errorString });\n      return rejectWithValue({\n        errorString,\n      });\n    }\n\n    return result;\n  },\n);\n\nconst initialState: SendPaymentInitialState = {\n  data: null,\n  status: undefined,\n  errorString: undefined,\n};\n\nconst sendPaymentSlice = createSlice({\n  name: \"sendPayment\",\n  initialState,\n  reducers: {\n    resetSendPaymentAction: () => initialState,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(sendPaymentAction.pending, (state) => {\n      state.errorString = undefined;\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(sendPaymentAction.fulfilled, (state, action) => {\n      state.data = action.payload;\n      state.status = ActionStatus.SUCCESS;\n    });\n    builder.addCase(sendPaymentAction.rejected, (state, action) => {\n      state.errorString = action.payload?.errorString;\n      state.status = ActionStatus.ERROR;\n    });\n  },\n});\n\nexport const { reducer } = sendPaymentSlice;\nexport const { resetSendPaymentAction } = sendPaymentSlice.actions;\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"config/store\";\nimport { settingsSelector } from \"ducks/settings\";\nimport { getErrorString } from \"helpers/getErrorString\";\nimport { getNetworkConfig } from \"helpers/getNetworkConfig\";\nimport { trustAsset } from \"methods/trustAsset\";\nimport {\n  ActionStatus,\n  RejectMessage,\n  TrustAssetInitialState,\n  TrustAssetParam,\n} from \"types/types.d\";\n\ninterface TrustAssetActionResponse {\n  assetString: string;\n  response: string;\n}\n\nexport const trustAssetAction = createAsyncThunk<\n  TrustAssetActionResponse,\n  TrustAssetParam,\n  { rejectValue: RejectMessage; state: RootState }\n>(\n  \"trustAsset/trustAssetAction\",\n  async (untrustedAsset, { rejectWithValue, getState }) => {\n    const { pubnet, secretKey } = settingsSelector(getState());\n    const networkConfig = getNetworkConfig(pubnet);\n\n    try {\n      return {\n        assetString: untrustedAsset.assetString,\n        response: JSON.stringify(\n          await trustAsset({\n            secretKey,\n            untrustedAsset,\n            networkUrl: networkConfig.url,\n            networkPassphrase: networkConfig.network,\n          }),\n        ),\n      };\n    } catch (error) {\n      return rejectWithValue({\n        errorString: getErrorString(error),\n      });\n    }\n  },\n);\n\nconst initialState: TrustAssetInitialState = {\n  assetString: \"\",\n  data: null,\n  status: undefined,\n  errorString: undefined,\n};\n\nconst trustAssetSlice = createSlice({\n  name: \"trustAsset\",\n  initialState,\n  reducers: {\n    resetTrustAssetAction: () => initialState,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(trustAssetAction.pending, (state) => {\n      state.errorString = undefined;\n      state.status = ActionStatus.PENDING;\n    });\n    builder.addCase(trustAssetAction.fulfilled, (state, action) => {\n      state.assetString = action.payload.assetString;\n      state.data = action.payload.response;\n      state.status = ActionStatus.SUCCESS;\n    });\n    builder.addCase(trustAssetAction.rejected, (state, action) => {\n      state.errorString = action.payload?.errorString;\n      state.status = ActionStatus.ERROR;\n    });\n  },\n});\n\nexport const { reducer } = trustAssetSlice;\nexport const { resetTrustAssetAction } = trustAssetSlice.actions;\n","import {\n  configureStore,\n  getDefaultMiddleware,\n  isPlain,\n  createAction,\n  CombinedState,\n} from \"@reduxjs/toolkit\";\nimport { combineReducers, Action } from \"redux\";\nimport BigNumber from \"bignumber.js\";\n\nimport { reducer as account } from \"ducks/account\";\nimport { reducer as activeAsset } from \"ducks/activeAsset\";\nimport { reducer as allAssets } from \"ducks/allAssets\";\nimport { reducer as assetOverrides } from \"ducks/assetOverrides\";\nimport { reducer as claimAsset } from \"ducks/claimAsset\";\nimport { reducer as claimableBalances } from \"ducks/claimableBalances\";\nimport { reducer as sep6DepositAsset } from \"ducks/sep6DepositAsset\";\nimport { reducer as sep6WithdrawAsset } from \"ducks/sep6WithdrawAsset\";\nimport { reducer as sep8Send } from \"ducks/sep8Send\";\nimport { reducer as sep24DepositAsset } from \"ducks/sep24DepositAsset\";\nimport { reducer as sep24WithdrawAsset } from \"ducks/sep24WithdrawAsset\";\nimport { reducer as sep31Send } from \"ducks/sep31Send\";\nimport { reducer as logs } from \"ducks/logs\";\nimport { reducer as sendPayment } from \"ducks/sendPayment\";\nimport { reducer as settings } from \"ducks/settings\";\nimport { reducer as trustAsset } from \"ducks/trustAsset\";\nimport { reducer as untrustedAssets } from \"ducks/untrustedAssets\";\n\nconst RESET_STORE_ACTION_TYPE = \"RESET\";\nexport type RootState = ReturnType<typeof store.getState>;\n\nconst isSerializable = (value: any) => {\n  // activeAsset has callback function and description can be a component\n  if (typeof value === \"function\" || typeof value === \"symbol\") {\n    return true;\n  }\n\n  return BigNumber.isBigNumber(value) || isPlain(value);\n};\n\nconst reducers = combineReducers({\n  account,\n  activeAsset,\n  allAssets,\n  assetOverrides,\n  claimAsset,\n  claimableBalances,\n  logs,\n  sendPayment,\n  sep6DepositAsset,\n  sep6WithdrawAsset,\n  sep8Send,\n  sep24DepositAsset,\n  sep24WithdrawAsset,\n  sep31Send,\n  settings,\n  trustAsset,\n  untrustedAssets,\n});\n\nexport const resetStoreAction = createAction(RESET_STORE_ACTION_TYPE);\n\nconst rootReducer = (state: CombinedState<any>, action: Action) => {\n  const newState = action.type === RESET_STORE_ACTION_TYPE ? undefined : state;\n  return reducers(newState, action);\n};\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: [\n    ...getDefaultMiddleware({\n      serializableCheck: {\n        isSerializable,\n      },\n    }),\n  ],\n});\n","import { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  Button,\n  TextLink,\n  Icon,\n  InfoBlock,\n  Modal,\n  CopyText,\n} from \"@stellar/design-system\";\nimport { resetStoreAction } from \"config/store\";\nimport { getCurrentSessionParams } from \"helpers/getCurrentSessionParams\";\nimport { SearchParams, StringObject } from \"types/types.d\";\n\nexport const SignOutModal = ({ onClose }: { onClose: () => void }) => {\n  const [sessionParams, setSessionParams] = useState<SearchParams[]>([]);\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  useEffect(() => {\n    setSessionParams(getCurrentSessionParams());\n  }, []);\n\n  const handleSignOut = () => {\n    dispatch(resetStoreAction());\n    history.push({\n      pathname: \"/\",\n    });\n    onClose();\n  };\n\n  const getMessageText = () => {\n    const paramText: StringObject = {\n      [SearchParams.ASSET_OVERRIDES]: \"home domain overrides\",\n      [SearchParams.UNTRUSTED_ASSETS]: \"untrusted assets\",\n      [SearchParams.CLAIMABLE_BALANCE_SUPPORTED]: \"claimable balance supported\",\n    };\n\n    return sessionParams.map((s) => paramText[s]).join(\", \");\n  };\n\n  return (\n    <>\n      <Modal.Body>\n        <p>\n          You can reload the account using your secret key or press back in your\n          browser to sign back in.\n        </p>\n\n        {sessionParams.length > 0 && (\n          <InfoBlock variant={InfoBlock.variant.warning}>\n            <p>\n              {`You have session data (${getMessageText()}) that will be lost when you sign out. You can copy the URL to save it.`}\n            </p>\n            <div className=\"SessionParamsWrapper\">\n              <CopyText\n                textToCopy={window.location.toString()}\n                tooltipPosition={CopyText.tooltipPosition.right}\n                showTooltip\n              >\n                <TextLink iconLeft={<Icon.Copy />}>Copy URL</TextLink>\n              </CopyText>\n            </div>\n          </InfoBlock>\n        )}\n      </Modal.Body>\n\n      <Modal.Footer>\n        <Button onClick={handleSignOut}>Sign out</Button>\n        <Button variant={Button.variant.secondary} onClick={onClose}>\n          Go back\n        </Button>\n      </Modal.Footer>\n    </>\n  );\n};\n","import { SearchParams } from \"types/types.d\";\n\nexport const getCurrentSessionParams = () => {\n  const sessionParams = [\n    SearchParams.ASSET_OVERRIDES,\n    SearchParams.UNTRUSTED_ASSETS,\n    SearchParams.CLAIMABLE_BALANCE_SUPPORTED,\n  ];\n\n  const queryParams = new URLSearchParams(window.location.search);\n  return sessionParams.reduce((result: SearchParams[], key) => {\n    if (queryParams.has(key)) {\n      return [...result, key];\n    }\n\n    return result;\n  }, []);\n};\n","import isEqual from \"lodash/isEqual\";\nimport pick from \"lodash/pick\";\nimport { useSelector } from \"react-redux\";\n\nimport { Store, StoreKey } from \"types/types.d\";\n\n/**\n * A React hook for accessing Redux state.\n *\n * react-redux's useStore hook isn't performant, has a weird call signature,\n * and doesn't instruct components when to update:\n *\n * const { stellarAccount } = useStore().getState();\n *\n * useSelector is stupidly verbose:\n *\n * const {\n *   stellarAccount\n * } = useSelector(({ stellarAccount }) => ({ stellarAccount }));\n *\n * So instead, let's use a clearer API:\n *\n * const { stellarAccount } = useRedux(\"stellarAccount\");\n *\n * @param {string[]} stateProps An array of prop names to get from the state.\n * @returns {object} An object map of those prop names to their values.\n */\nexport function useRedux(...keys: StoreKey[]) {\n  return useSelector((state: Store) => pick(state, keys), isEqual);\n}\n","import { useState } from \"react\";\nimport { Layout, Modal } from \"@stellar/design-system\";\nimport { SignOutModal } from \"components/SignOutModal\";\nimport { CSS_MODAL_PARENT_ID } from \"constants/settings\";\nimport { useRedux } from \"hooks/useRedux\";\n\nexport const Header = () => {\n  const [modalVisible, setModalVisible] = useState(false);\n\n  const { account } = useRedux(\"account\");\n\n  const handleCloseModal = () => {\n    setModalVisible(false);\n  };\n\n  return (\n    <>\n      <Layout.Header\n        projectTitle=\"Demo Wallet\"\n        {...(account.isAuthenticated\n          ? { onSignOut: () => setModalVisible(true) }\n          : {})}\n        hasDarkModeToggle\n      />\n\n      <Modal\n        visible={modalVisible}\n        onClose={handleCloseModal}\n        parentId={CSS_MODAL_PARENT_ID}\n      >\n        <SignOutModal onClose={handleCloseModal} />\n      </Modal>\n    </>\n  );\n};\n","import {\n  URL_ITEM_SEPARATOR_CHAR,\n  URL_KEY_PAIR_SEPARATOR_CHAR,\n} from \"constants/settings\";\nimport { searchKeyPairStringToArray } from \"helpers/searchKeyPairStringToArray\";\nimport { SearchParams, SearchParamAsset, StringObject } from \"types/types.d\";\n\nconst update = (\n  param: SearchParams,\n  value: string,\n  urlSearchParams?: URLSearchParams,\n) => {\n  const queryParams =\n    urlSearchParams || new URLSearchParams(window.location.search);\n  const currentParamValue = queryParams.get(param) || \"\";\n\n  switch (param) {\n    case SearchParams.PUBNET:\n      if (value === \"true\") {\n        queryParams.set(SearchParams.PUBNET, value);\n      } else {\n        queryParams.delete(SearchParams.PUBNET);\n      }\n      break;\n    case SearchParams.CLAIMABLE_BALANCE_SUPPORTED:\n      if (value === \"true\") {\n        queryParams.set(SearchParams.CLAIMABLE_BALANCE_SUPPORTED, value);\n      } else {\n        queryParams.delete(SearchParams.CLAIMABLE_BALANCE_SUPPORTED);\n      }\n      break;\n    case SearchParams.SECRET_KEY:\n      queryParams.set(SearchParams.SECRET_KEY, value);\n      break;\n    case SearchParams.UNTRUSTED_ASSETS:\n      queryParams.set(\n        SearchParams.UNTRUSTED_ASSETS,\n        updateValue({ currentVal: currentParamValue, newVal: value }),\n      );\n      break;\n    default:\n      throw new Error(`Search param \\`${searchParam}\\` does not exist`);\n  }\n\n  return `?${queryParams.toString()}`;\n};\n\nconst remove = (\n  param: SearchParams,\n  removeValue: string,\n  urlSearchParams?: URLSearchParams,\n) => {\n  const queryParams =\n    urlSearchParams || new URLSearchParams(window.location.search);\n  const currentParamValue = queryParams.get(param) || \"\";\n\n  const updatedValue = updateValue({\n    currentVal: currentParamValue,\n    removeVal: removeValue,\n  });\n\n  if (updatedValue) {\n    queryParams.set(param, updatedValue);\n  } else {\n    queryParams.delete(param);\n  }\n\n  return `?${queryParams.toString()}`;\n};\n\ntype UpdateKeyPairProps = {\n  param: SearchParams;\n  itemId: string;\n  keyPairs: StringObject;\n  urlSearchParams?: URLSearchParams;\n};\n\nconst updateKeyPair = ({\n  param,\n  itemId,\n  keyPairs,\n  urlSearchParams,\n}: UpdateKeyPairProps) => {\n  const queryParams =\n    urlSearchParams || new URLSearchParams(window.location.search);\n  const currentParamValue = queryParams.get(param) || \"\";\n  const valuesArray = currentParamValue ? currentParamValue.split(\",\") : [];\n\n  const assetArray = searchKeyPairStringToArray(currentParamValue);\n  const isExistingItem = assetArray.find((v) => v.assetString === itemId);\n\n  // Update exisiting item\n  if (isExistingItem) {\n    // Example:\n    // {\n    //   SRT:GCDNJUBQSX7AJWLJACMJ7I4BC3Z47BQUTMHEICZLE6MU4KQBRYG5JY6B: {\n    //     homeDomain: testanchor.stellar.org\n    //   }\n    // }\n    const updatedValuesArray = assetArray.reduce(\n      (result: SearchParamAsset[], asset) => {\n        if (asset.assetString === itemId) {\n          return [...result, { ...asset, ...keyPairs }];\n        }\n\n        return [...result, asset];\n      },\n      [],\n    );\n\n    const updatedValuesString = updatedValuesArray.reduce(\n      (result: string[], asset) => [\n        ...result,\n        `${asset.assetString}${URL_ITEM_SEPARATOR_CHAR}${getKeyPairString(\n          asset,\n        )}`,\n      ],\n      [],\n    );\n\n    // eslint-disable-next-line max-len\n    // We're building URL string back together here. Example: SRT:GCDNJUBQSX7AJWLJACMJ7I4BC3Z47BQUTMHEICZLE6MU4KQBRYG5JY6B|homeDomain>testanchor.stellar.org|someKey>someValue\n    queryParams.set(param, updatedValuesString.join(\",\"));\n  } else {\n    // Add new item\n    const updatedValue = [\n      ...valuesArray,\n      `${itemId}${URL_ITEM_SEPARATOR_CHAR}${getKeyPairString(keyPairs)}`,\n    ].join(\",\");\n\n    queryParams.set(param, updatedValue);\n  }\n\n  return `?${queryParams.toString()}`;\n};\n\nconst removeKeyPair = ({\n  param,\n  itemId,\n  urlSearchParams,\n}: {\n  param: SearchParams;\n  itemId: string;\n  urlSearchParams?: URLSearchParams;\n}) => {\n  const queryParams =\n    urlSearchParams || new URLSearchParams(window.location.search);\n  const currentParamValue = queryParams.get(param) || \"\";\n  const assetArray = searchKeyPairStringToArray(currentParamValue);\n  const assetsToKeep = assetArray.filter((v) => v.assetString !== itemId);\n\n  if (assetsToKeep.length) {\n    const updatedValuesString = assetsToKeep.reduce(\n      (result: string[], asset) => [\n        ...result,\n        `${asset.assetString}${URL_ITEM_SEPARATOR_CHAR}${getKeyPairString(\n          asset,\n        )}`,\n      ],\n      [],\n    );\n\n    // eslint-disable-next-line max-len\n    // We're building URL string back together here. Example: SRT:GCDNJUBQSX7AJWLJACMJ7I4BC3Z47BQUTMHEICZLE6MU4KQBRYG5JY6B|homeDomain>testanchor.stellar.org|someKey>someValue\n    queryParams.set(param, updatedValuesString.join(\",\"));\n  } else {\n    queryParams.delete(param);\n  }\n\n  return `?${queryParams.toString()}`;\n};\n\ntype UpdateValueProps = {\n  currentVal: string;\n  newVal?: string;\n  removeVal?: string;\n};\n\nconst updateValue = ({ currentVal, newVal, removeVal }: UpdateValueProps) => {\n  const valuesArray = currentVal ? currentVal.split(\",\") : [];\n\n  if (newVal) {\n    if (valuesArray.includes(newVal)) {\n      throw new Error(`${newVal} was already added`);\n    }\n\n    return [...valuesArray, newVal].join(\",\");\n  }\n\n  if (removeVal) {\n    const valuesToKeep = valuesArray.filter((value) => value !== removeVal);\n    return valuesToKeep.join(\",\");\n  }\n\n  return currentVal;\n};\n\nconst getKeyPairString = (keyPairs: StringObject | SearchParamAsset) => {\n  const arr = Object.entries(keyPairs).reduce(\n    (result: string[], [key, value]) => {\n      if (key !== \"assetString\") {\n        return [...result, `${key}${URL_KEY_PAIR_SEPARATOR_CHAR}${value}`];\n      }\n\n      return result;\n    },\n    [],\n  );\n\n  // Returns key>value|key1>value1\n  return `${arr.join(URL_ITEM_SEPARATOR_CHAR)}`;\n};\n\nexport const searchParam = {\n  update,\n  remove,\n  updateKeyPair,\n  removeKeyPair,\n};\n","import { useHistory } from \"react-router-dom\";\nimport { Button, Modal, Toggle } from \"@stellar/design-system\";\nimport { searchParam } from \"helpers/searchParam\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { SearchParams } from \"types/types.d\";\n\nexport const ConfigurationModal = ({ onClose }: { onClose: () => void }) => {\n  const { settings } = useRedux(\"settings\");\n  const history = useHistory();\n\n  const handleClaimableBalanceSupported = () => {\n    history.push(\n      searchParam.update(\n        SearchParams.CLAIMABLE_BALANCE_SUPPORTED,\n        (!settings.claimableBalanceSupported).toString(),\n      ),\n    );\n  };\n\n  return (\n    <>\n      <Modal.Heading>Configuration</Modal.Heading>\n\n      <Modal.Body>\n        <div className=\"ConfigurationItem\">\n          <label htmlFor=\"claimable-balance-supported\">\n            Claimable balance supported\n          </label>\n          <Toggle\n            id=\"claimable-balance-supported\"\n            checked={settings.claimableBalanceSupported}\n            onChange={handleClaimableBalanceSupported}\n          />\n        </div>\n      </Modal.Body>\n\n      <Modal.Footer>\n        <Button onClick={onClose}>Close</Button>\n      </Modal.Footer>\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { TextLink, Layout, Modal } from \"@stellar/design-system\";\nimport { ConfigurationModal } from \"components/ConfigurationModal\";\nimport { CSS_MODAL_PARENT_ID } from \"constants/settings\";\nimport { useRedux } from \"hooks/useRedux\";\n\nexport const Footer = () => {\n  const [configModalVisible, setConfigModalVisible] = useState(false);\n\n  const { account } = useRedux(\"account\");\n\n  const handleConfigModalClose = () => {\n    setConfigModalVisible(false);\n  };\n\n  return (\n    <>\n      <Layout.Footer\n        gitHubLink=\"https://github.com/stellar/stellar-demo-wallet\"\n        hideTopBorder\n      >\n        {account.isAuthenticated && (\n          <div>\n            <TextLink onClick={() => setConfigModalVisible(true)}>\n              Configuration\n            </TextLink>\n          </div>\n        )}\n      </Layout.Footer>\n\n      <Modal\n        visible={configModalVisible}\n        onClose={handleConfigModalClose}\n        parentId={CSS_MODAL_PARENT_ID}\n      >\n        <ConfigurationModal onClose={handleConfigModalClose} />\n      </Modal>\n    </>\n  );\n};\n","import ReactJson, { ReactJsonViewProps } from \"react-json-view\";\n\nconst defaultTheme = {\n  base00: \"var(--pal-background-primary)\",\n  base01: \"var(--pal-background-primary)\",\n  base02: \"var(--pal-background-primary)\",\n  base03: \"var(--pal-text-primary)\",\n  base04: \"var(--pal-text-link)\",\n  base05: \"var(--pal-text-primary)\",\n  base06: \"var(--pal-text-primary)\",\n  base07: \"var(--pal-text-primary)\",\n  base08: \"var(--pal-text-primary)\",\n  base09: \"var(--pal-text-primary)\",\n  base0A: \"var(--pal-text-primary)\",\n  base0B: \"var(--pal-text-primary)\",\n  base0C: \"var(--pal-text-primary)\",\n  base0D: \"var(--pal-text-link)\",\n  base0E: \"var(--pal-text-link)\",\n  base0F: \"var(--pal-text-link)\",\n};\n\nexport const Json = ({\n  src,\n  collapseStringsAfterLength = 15,\n  displayDataTypes = true,\n  collapsed = false,\n  theme = defaultTheme,\n}: ReactJsonViewProps) => (\n  <ReactJson\n    src={src}\n    collapseStringsAfterLength={collapseStringsAfterLength}\n    displayDataTypes={displayDataTypes}\n    collapsed={collapsed}\n    theme={theme}\n  />\n);\n","import { useEffect, useState } from \"react\";\nimport marked from \"marked\";\nimport { Icon } from \"@stellar/design-system\";\nimport { Json } from \"components/Json\";\nimport { sanitizeHtml } from \"helpers/sanitizeHtml\";\nimport { LogType, AnyObject } from \"types/types.d\";\nimport \"./styles.scss\";\n\nmarked.setOptions({\n  gfm: false,\n});\n\nconst LogItemIcon = {\n  instruction: <Icon.MessageSquare />,\n  error: <Icon.XCircle />,\n  request: <Icon.ArrowRight />,\n  response: <Icon.ArrowLeft />,\n};\n\ninterface LogItemProps {\n  title: string;\n  variant: LogType;\n  body?: string | AnyObject;\n}\n\nconst theme = {\n  light: {\n    base00: \"var(--pal-background-primary)\",\n    base01: \"var(--pal-background-primary)\",\n    base02: \"var(--pal-background-primary)\",\n    base03: \"var(--pal-text-primary)\",\n    base04: \"var(--pal-text-primary)\",\n    base05: \"var(--pal-text-primary)\",\n    base06: \"var(--pal-text-primary)\",\n    base07: \"var(--pal-text-primary)\",\n    base08: \"var(--pal-text-primary)\",\n    base09: \"var(--pal-text-primary)\",\n    base0A: \"var(--pal-text-primary)\",\n    base0B: \"var(--pal-text-primary)\",\n    base0C: \"var(--pal-text-primary)\",\n    base0D: \"var(--pal-text-primary)\",\n    base0E: \"var(--pal-text-primary)\",\n    base0F: \"var(--pal-text-primary)\",\n  },\n  dark: {\n    base00: \"var(--pal-example-code)\",\n    base01: \"var(--pal-example-code)\",\n    base02: \"var(--pal-example-code)\",\n    base03: \"var(--pal-brand-primary-on)\",\n    base04: \"var(--pal-brand-primary-on)\",\n    base05: \"var(--pal-brand-primary-on)\",\n    base06: \"var(--pal-brand-primary-on)\",\n    base07: \"var(--pal-brand-primary-on)\",\n    base08: \"var(--pal-brand-primary-on)\",\n    base09: \"var(--pal-brand-primary-on)\",\n    base0A: \"var(--pal-brand-primary-on)\",\n    base0B: \"var(--pal-brand-primary-on)\",\n    base0C: \"var(--pal-brand-primary-on)\",\n    base0D: \"var(--pal-brand-primary-on)\",\n    base0E: \"var(--pal-brand-primary-on)\",\n    base0F: \"var(--pal-brand-primary-on)\",\n  },\n};\n\nexport const LogItem = ({ title, variant, body }: LogItemProps) => {\n  const [isFadeReady, setIsFadeReady] = useState(false);\n\n  useEffect(() => {\n    const t = setTimeout(() => {\n      setIsFadeReady(true);\n      clearTimeout(t);\n    }, 150);\n  }, []);\n\n  const bodyParsed = body ? JSON.parse(`${body}`) : body;\n\n  return (\n    <div\n      className={`LogItem LogItem--${variant} ${\n        isFadeReady ? \"LogItem--open\" : \"\"\n      }`}\n    >\n      <div className=\"LogItem__header\">\n        <div className=\"LogItem__icon\">{LogItemIcon[variant]}</div>\n        <div className=\"LogItem__title\">{sanitizeHtml(marked(title))}</div>\n      </div>\n      {bodyParsed && (\n        <div className=\"LogItem__body\">\n          {typeof bodyParsed === \"object\" ? (\n            <Json\n              src={bodyParsed}\n              collapseStringsAfterLength={15}\n              displayDataTypes={false}\n              collapsed={1}\n              theme={\n                variant === LogType.INSTRUCTION || variant === LogType.ERROR\n                  ? theme.light\n                  : theme.dark\n              }\n            />\n          ) : (\n            bodyParsed\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  Button,\n  Input,\n  TextLink,\n  Modal,\n  RadioButton,\n  Heading3,\n  DetailsTooltip,\n} from \"@stellar/design-system\";\nimport { CSS_MODAL_PARENT_ID } from \"constants/settings\";\nimport { fetchAccountAction } from \"ducks/account\";\nimport { resetActiveAssetAction } from \"ducks/activeAsset\";\nimport {\n  resetSep31SendAction,\n  submitSep31SendTransactionAction,\n  setCustomerTypesAction,\n  fetchSendFieldsAction,\n} from \"ducks/sep31Send\";\nimport { capitalizeString } from \"helpers/capitalizeString\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { ActionStatus } from \"types/types.d\";\n\nenum CustomerType {\n  SENDER = \"sender\",\n  RECEIVER = \"receiver\",\n}\n\nexport const Sep31Send = () => {\n  const { account, sep31Send } = useRedux(\"account\", \"sep31Send\");\n  const [formData, setFormData] = useState<any>({});\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [customerTypes, setCustomerTypes] = useState<{\n    sender: string;\n    receiver: string;\n  }>({\n    sender: \"\",\n    receiver: \"\",\n  });\n\n  const { data } = sep31Send;\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (sep31Send.status === ActionStatus.CAN_PROCEED) {\n      if (sep31Send.data.isTypeSelected) {\n        dispatch(fetchSendFieldsAction());\n      }\n    }\n\n    if (sep31Send.status === ActionStatus.SUCCESS) {\n      if (account.data?.id) {\n        resetLocalState();\n        dispatch(\n          fetchAccountAction({\n            publicKey: account.data.id,\n            secretKey: account.secretKey,\n          }),\n        );\n        dispatch(resetSep31SendAction());\n      }\n    }\n  }, [\n    sep31Send.status,\n    sep31Send.data.isTypeSelected,\n    account.data?.id,\n    account.secretKey,\n    dispatch,\n  ]);\n\n  const resetLocalState = () => {\n    setErrorMessage(\"\");\n    setCustomerTypesAction({ senderType: \"\", receiverType: \"\" });\n    setFormData({});\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { id, value } = event.target;\n    const [section, field] = id.split(\"#\");\n\n    const updatedState = {\n      ...formData,\n      [section]: {\n        ...(formData[section] || {}),\n        [field]: value,\n      },\n    };\n\n    setFormData(updatedState);\n  };\n\n  const handleTypeChange = (type: CustomerType, typeId: string) => {\n    const updatedTypes = {\n      ...customerTypes,\n      [type]: typeId,\n    };\n\n    setCustomerTypes(updatedTypes);\n  };\n\n  const handleSubmit = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    event.preventDefault();\n    dispatch(submitSep31SendTransactionAction({ ...formData }));\n  };\n\n  const handleSelectTypes = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    setErrorMessage(\"\");\n    const { sender, receiver } = customerTypes;\n    event.preventDefault();\n\n    if (\n      (data.multipleSenderTypes?.length && !sender) ||\n      (data.multipleReceiverTypes?.length && !receiver)\n    ) {\n      setErrorMessage(\"Please select sender/receiver type\");\n      return;\n    }\n\n    dispatch(\n      setCustomerTypesAction({\n        senderType: sender ?? data.senderType,\n        receiverType: receiver ?? data.receiverType,\n      }),\n    );\n  };\n\n  const handleClose = () => {\n    resetLocalState();\n    dispatch(resetSep31SendAction());\n    dispatch(resetActiveAssetAction());\n  };\n\n  const renderSenderOptions = () => {\n    // Sender type pre-selected\n    if (data.senderType) {\n      return (\n        <p>\n          <code>{data.senderType}</code> was automatically selected\n        </p>\n      );\n    }\n\n    // No sender type required\n    if (!data.senderType && !data.multipleSenderTypes?.length) {\n      return <p>Sender type is not required</p>;\n    }\n\n    // Multiple sender types\n    return data.multipleSenderTypes?.map((sender) => (\n      <RadioButton\n        onChange={() => handleTypeChange(CustomerType.SENDER, sender.type)}\n        key={sender.type}\n        id={sender.type}\n        value={sender.type}\n        name=\"customer-sender\"\n        label={\n          <span className=\"inline-block\">\n            <code>{sender.type}</code> {sender.description}\n          </span>\n        }\n      />\n    ));\n  };\n\n  const renderReceiverOptions = () => {\n    // Receiver type pre-selected\n    if (data.receiverType) {\n      return (\n        <p>\n          <code>{data.receiverType}</code> was automatically selected\n        </p>\n      );\n    }\n\n    // No receiver type required\n    if (!data.receiverType && !data.multipleReceiverTypes?.length) {\n      return <p>Receiver type is not required</p>;\n    }\n\n    // Multiple receiver types\n    return data.multipleReceiverTypes?.map((receiver) => (\n      <RadioButton\n        onChange={() => handleTypeChange(CustomerType.RECEIVER, receiver.type)}\n        key={receiver.type}\n        id={receiver.type}\n        value={receiver.type}\n        name=\"customer-receiver\"\n        label={\n          <span className=\"inline-block\">\n            <code>{receiver.type}</code> {receiver.description}\n          </span>\n        }\n      />\n    ));\n  };\n\n  if (sep31Send.status === ActionStatus.NEEDS_INPUT) {\n    // Select customer types\n    if (!data.isTypeSelected) {\n      return (\n        <Modal visible onClose={handleClose} parentId={CSS_MODAL_PARENT_ID}>\n          <Modal.Heading>Customer Types</Modal.Heading>\n\n          <Modal.Body>\n            <p>\n              Receiving anchors are required to collect Know Your Customer (KYC)\n              information on the customers involved in a transaction. Each type\n              described below corresponds to a different set of KYC values the\n              anchor will request the sending anchor to provide. This demo\n              wallet, which acts as a sending anchor, will provide you a form to\n              enter the fields corresponding to the type selected.\n            </p>\n\n            <div>\n              <Heading3>Sender</Heading3>\n              {renderSenderOptions()}\n            </div>\n\n            <div>\n              <Heading3>Receiver</Heading3>\n              {renderReceiverOptions()}\n            </div>\n\n            {errorMessage && <p className=\"error\">{errorMessage}</p>}\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button onClick={handleSelectTypes}>Submit</Button>\n          </Modal.Footer>\n        </Modal>\n      );\n    }\n\n    // Data fields\n    if (data.isTypeSelected) {\n      const { transaction, sender, receiver } = data.fields;\n\n      const allFields = {\n        amount: {\n          amount: {\n            description: \"amount to send\",\n          },\n        },\n        ...(sender ? { sender } : {}),\n        ...(receiver ? { receiver } : {}),\n        ...(transaction ? { transaction } : {}),\n      };\n\n      return (\n        <Modal visible onClose={handleClose} parentId={CSS_MODAL_PARENT_ID}>\n          <Modal.Heading>\n            <DetailsTooltip\n              details={\n                <>\n                  These are the fields the receiving anchor requires. The\n                  sending client obtains them from the /customer endpoint.{\" \"}\n                  <TextLink href=\"https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0012.md#customer-get\">\n                    Learn more\n                  </TextLink>\n                </>\n              }\n              isInline\n            >\n              <>Sender and receiver info</>\n            </DetailsTooltip>\n          </Modal.Heading>\n\n          <Modal.Body>\n            {Object.entries(allFields).map(([sectionTitle, sectionItems]) => (\n              <div className=\"vertical-spacing\" key={sectionTitle}>\n                <Heading3>{capitalizeString(sectionTitle)}</Heading3>\n                {Object.entries(sectionItems || {}).map(([id, input]) => (\n                  // TODO: if input.choices, render Select\n                  <Input\n                    key={`${sectionTitle}#${id}`}\n                    id={`${sectionTitle}#${id}`}\n                    label={input.description}\n                    required={!input.optional}\n                    onChange={handleChange}\n                  />\n                ))}\n              </div>\n            ))}\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button onClick={handleSubmit}>Submit</Button>\n          </Modal.Footer>\n        </Modal>\n      );\n    }\n  }\n\n  return null;\n};\n","import parse from \"html-react-parser\";\nimport DOMPurify from \"dompurify\";\n\nexport const sanitizeHtml = (html: string) =>\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  parse(DOMPurify.sanitize(html, { USE_PROFILES: { html: true } }));\n","import { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Layout, TextLink } from \"@stellar/design-system\";\n\nimport { LogItem } from \"components/LogItem\";\nimport { LOG_MESSAGE_EVENT } from \"constants/settings\";\nimport { clearLogsAction, addLogAction } from \"ducks/logs\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { LogItemProps } from \"types/types.d\";\n\nexport const Logs = () => {\n  const { account, logs } = useRedux(\"account\", \"logs\");\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const onLogEventMessage = (e: any) => {\n      const { timestamp, type, title, body } = e.detail;\n\n      dispatch(\n        addLogAction({\n          timestamp,\n          type,\n          title,\n          body: JSON.stringify(body),\n        }),\n      );\n    };\n\n    document.addEventListener(LOG_MESSAGE_EVENT, onLogEventMessage);\n\n    return document.removeEventListener(\n      LOG_MESSAGE_EVENT,\n      onLogEventMessage,\n      true,\n    );\n  }, [dispatch]);\n\n  const logsToMarkdown = (logItems: LogItemProps[]) => {\n    const heading = `# Stellar Demo Wallet logs\\n\\n`;\n    const date = `${new Date()}\\n\\n`;\n    const url = `[URL](${window.location.toString()})\\n\\n`;\n    const divider = `---\\n\\n`;\n    const contentHeader = `${heading}${date}${url}${divider}`;\n\n    return logItems.reduce((result, log, index) => {\n      const isLastItem = index === logItems.length - 1;\n      let content = `**${log.type}:** ${log.title}\\n`;\n      let body = log.body ? JSON.parse(`${log.body}`) : null;\n\n      if (body) {\n        body = typeof body === \"string\" ? body : JSON.stringify(body, null, 2);\n        content += `\\n\\`\\`\\`javascript\\n${body}\\n\\`\\`\\`\\n`;\n      }\n\n      if (!isLastItem) {\n        content += \"\\n\";\n      }\n\n      return `${result}${content}`;\n    }, contentHeader);\n  };\n\n  const handleDownload = () => {\n    if (!logs.items.length) {\n      return;\n    }\n\n    const filename = `stellar-dw-logs-${Date.now()}.md`;\n    const content = logsToMarkdown(logs.items);\n    const element = document.createElement(\"a\");\n\n    element.setAttribute(\n      \"href\",\n      `data:text/plain;charset=utf-8,${encodeURIComponent(content)}`,\n    );\n    element.setAttribute(\"download\", filename);\n    element.style.display = \"none\";\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  };\n\n  if (!account.isAuthenticated) {\n    return (\n      <div className=\"SplitContainer Logs\">\n        <div className=\"Logs__content\">\n          <div className=\"Logs__empty\">\n            Operation logs will appear here once a transaction begins\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"SplitContainer Logs\">\n      <div className=\"Logs__container\">\n        <div className=\"Logs__content\">\n          <Layout.Inset>\n            <div className=\"Logs__wrapper\">\n              {logs.items.length ? (\n                logs.items.map((log: LogItemProps, index: number) => (\n                  <LogItem\n                    // eslint-disable-next-line react/no-array-index-key\n                    key={`${log.timestamp}-${index}`}\n                    variant={log.type}\n                    title={log.title}\n                    body={log.body}\n                  />\n                ))\n              ) : (\n                <p>No logs to show</p>\n              )}\n            </div>\n          </Layout.Inset>\n        </div>\n      </div>\n\n      <div className=\"Logs__footer\">\n        <Layout.Inset>\n          <TextLink onClick={handleDownload} disabled={!logs.items.length}>\n            Download logs\n          </TextLink>\n\n          <TextLink\n            onClick={() => dispatch(clearLogsAction())}\n            disabled={!logs.items.length}\n          >\n            Clear logs\n          </TextLink>\n        </Layout.Inset>\n      </div>\n    </div>\n  );\n};\n","import { Route, Redirect, RouteProps, useLocation } from \"react-router-dom\";\nimport { useRedux } from \"hooks/useRedux\";\n\nexport const PrivateRoute = ({ children, ...rest }: RouteProps) => {\n  const { account } = useRedux(\"account\");\n  const location = useLocation();\n\n  return (\n    <Route\n      {...rest}\n      render={() =>\n        account.isAuthenticated ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/\",\n              search: location.search,\n            }}\n          />\n        )\n      }\n    />\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { Keypair } from \"stellar-sdk\";\nimport { fetchAccountAction } from \"ducks/account\";\nimport { fetchClaimableBalancesAction } from \"ducks/claimableBalances\";\nimport { updateSettingsAction } from \"ducks/settings\";\nimport { getErrorMessage } from \"helpers/getErrorMessage\";\nimport { log } from \"helpers/log\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { ActionStatus, SearchParams } from \"types/types.d\";\n\nexport const SettingsHandler = ({\n  children,\n}: {\n  children: React.ReactNode;\n}) => {\n  const { account } = useRedux(\"account\");\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const location = useLocation();\n\n  const queryParams = new URLSearchParams(location.search);\n  const pubnetParam = queryParams.get(SearchParams.PUBNET);\n  const secretKeyParam = queryParams.get(SearchParams.SECRET_KEY);\n  const untrustedAssetsParam = queryParams.get(SearchParams.UNTRUSTED_ASSETS);\n  const assetOverridesParam = queryParams.get(SearchParams.ASSET_OVERRIDES);\n  const claimableBalanceSupportedParam = queryParams.get(\n    SearchParams.CLAIMABLE_BALANCE_SUPPORTED,\n  );\n\n  // Set network param (pubnet=true)\n  useEffect(() => {\n    dispatch(\n      updateSettingsAction({\n        [SearchParams.PUBNET]: pubnetParam === \"true\",\n      }),\n    );\n  }, [pubnetParam, dispatch]);\n\n  // Set secret key param (secretKey=[SECRET_KEY]) and fetch account info\n  // This will handle both: secret key submitted on Demo Wallet and directly\n  // from the URL\n  useEffect(() => {\n    dispatch(\n      updateSettingsAction({\n        [SearchParams.SECRET_KEY]: secretKeyParam || \"\",\n      }),\n    );\n\n    // TODO: validate secret key\n    if (secretKeyParam) {\n      try {\n        const keypair = Keypair.fromSecret(secretKeyParam);\n        dispatch(\n          fetchAccountAction({\n            publicKey: keypair.publicKey(),\n            secretKey: keypair.secret(),\n          }),\n        );\n\n        dispatch(\n          fetchClaimableBalancesAction({ publicKey: keypair.publicKey() }),\n        );\n      } catch (error) {\n        log.error({\n          title: \"Fetch account error\",\n          body: getErrorMessage(error),\n        });\n      }\n    }\n  }, [secretKeyParam, dispatch]);\n\n  // Untrusted assets\n  useEffect(() => {\n    const cleanedAssets = untrustedAssetsParam\n      ?.split(\",\")\n      .reduce(\n        (unique: string[], item: string) =>\n          unique.includes(item) ? unique : [...unique, item],\n        [],\n      )\n      .join(\",\");\n\n    dispatch(\n      updateSettingsAction({\n        [SearchParams.UNTRUSTED_ASSETS]: cleanedAssets || \"\",\n      }),\n    );\n  }, [untrustedAssetsParam, dispatch]);\n\n  // Asset overrides\n  useEffect(() => {\n    dispatch(\n      updateSettingsAction({\n        [SearchParams.ASSET_OVERRIDES]: assetOverridesParam || \"\",\n      }),\n    );\n  }, [assetOverridesParam, dispatch]);\n\n  // Claimabable balance supported\n  useEffect(() => {\n    dispatch(\n      updateSettingsAction({\n        [SearchParams.CLAIMABLE_BALANCE_SUPPORTED]:\n          claimableBalanceSupportedParam === \"true\",\n      }),\n    );\n  }, [claimableBalanceSupportedParam, dispatch]);\n\n  // Go to /account page if fetching account was success\n  useEffect(() => {\n    if (account.status === ActionStatus.SUCCESS) {\n      history.push({\n        pathname: \"/account\",\n        search: history.location.search,\n      });\n    }\n  }, [account.status, history]);\n\n  return <>{children}</>;\n};\n","import { StatusBar } from \"@stellar/design-system\";\nimport { useRedux } from \"hooks/useRedux\";\n\nexport const WarningBanner = () => {\n  const { account, settings } = useRedux(\"account\", \"settings\");\n\n  // Show the banner only if signed in\n  if (settings.pubnet && account.data?.id) {\n    return (\n      <StatusBar variant={StatusBar.variant.error}>\n        WARNING: You’ve connected a real account to this demo. You are not on\n        the test server. Any actions you take here will affect actual assets.\n      </StatusBar>\n    );\n  }\n\n  return null;\n};\n","import React, { useLayoutEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Layout } from \"@stellar/design-system\";\nimport \"./styles.scss\";\n\ninterface ToastBannerProps {\n  parentId: string;\n  visible: boolean;\n  children: React.ReactNode;\n}\n\nexport const ToastBanner = ({\n  parentId,\n  visible,\n  children,\n}: ToastBannerProps) => {\n  const parent = document.getElementById(parentId);\n  const [isVisible, setIsVisible] = useState(visible);\n  const [isFadeReady, setIsFadeReady] = useState(false);\n\n  useLayoutEffect(() => {\n    if (visible) {\n      setIsVisible(true);\n\n      setTimeout(() => {\n        setIsFadeReady(true);\n      }, 150);\n    } else {\n      // Add a slight delay when closing for better UX\n      const t = setTimeout(() => {\n        setIsFadeReady(false);\n        clearTimeout(t);\n\n        setTimeout(() => {\n          setIsVisible(false);\n        }, 400);\n      }, 600);\n    }\n  }, [visible]);\n\n  if (!parent || !isVisible) {\n    return null;\n  }\n\n  return ReactDOM.createPortal(\n    <div className={`ToastBanner ${isFadeReady ? \"open\" : \"\"}`}>\n      <Layout.Inset>{children}</Layout.Inset>\n    </div>,\n    parent,\n  );\n};\n","export const shortenStellarKey = (key: string) =>\n  key ? `${key.slice(0, 5)}…${key.slice(-5)}` : \"\";\n","import { useCallback, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  Heading2,\n  Loader,\n  TextLink,\n  Layout,\n  CopyText,\n  DetailsTooltip,\n} from \"@stellar/design-system\";\n\nimport { Json } from \"components/Json\";\nimport { ToastBanner } from \"components/ToastBanner\";\n\nimport { fetchAccountAction, fundTestnetAccount } from \"ducks/account\";\nimport { fetchClaimableBalancesAction } from \"ducks/claimableBalances\";\n\nimport { shortenStellarKey } from \"helpers/shortenStellarKey\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { ActionStatus } from \"types/types.d\";\n\nexport const AccountInfo = () => {\n  const { account } = useRedux(\"account\");\n  const [isAccountDetailsVisible, setIsAccountDetailsVisible] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const handleRefreshAccount = useCallback(() => {\n    if (account.data?.id) {\n      dispatch(\n        fetchAccountAction({\n          publicKey: account.data.id,\n          secretKey: account.secretKey,\n        }),\n      );\n      dispatch(fetchClaimableBalancesAction({ publicKey: account.data.id }));\n    }\n  }, [account.data?.id, account.secretKey, dispatch]);\n\n  const handleCreateAccount = () => {\n    if (account.data?.id) {\n      dispatch(fundTestnetAccount(account.data.id));\n    }\n  };\n\n  if (!account.data?.id) {\n    return null;\n  }\n\n  const isPending = account.status === ActionStatus.PENDING;\n\n  return (\n    <Layout.Inset>\n      <div className=\"Account\">\n        {/* Account keys */}\n        <div className=\"AccountInfo\">\n          <div className=\"AccountInfoRow\">\n            <div className=\"AccountInfoCell AccountLabel\">Public</div>\n            <div className=\"AccountInfoCell\">\n              {shortenStellarKey(account.data.id)}\n            </div>\n            <div className=\"AccountInfoCell CopyButton\">\n              <CopyText textToCopy={account.data.id}>\n                <TextLink>Copy</TextLink>\n              </CopyText>\n            </div>\n          </div>\n          <div className=\"AccountInfoRow\">\n            <div className=\"AccountInfoCell AccountLabel\">Secret</div>\n            <div className=\"AccountInfoCell\">\n              {shortenStellarKey(account.secretKey)}\n            </div>\n            <div className=\"AccountInfoCell CopyButton\">\n              <CopyText textToCopy={account.secretKey}>\n                <TextLink>Copy</TextLink>\n              </CopyText>\n            </div>\n          </div>\n        </div>\n\n        {/* Account actions */}\n        <div className=\"AccountInfo\">\n          <div className=\"AccountInfoRow\">\n            <div className=\"AccountInfoCell\">\n              {account.isUnfunded && (\n                <div className=\"InfoButtonWrapper\">\n                  <DetailsTooltip\n                    details={\n                      <>\n                        Clicking create will fund your test account with XLM. If\n                        you’re testing SEP-24 you may want to leave this account\n                        unfunded.{\" \"}\n                        <TextLink href=\"https://developers.stellar.org/docs/tutorials/create-account/#create-account\">\n                          Learn more\n                        </TextLink>\n                      </>\n                    }\n                  >\n                    <TextLink\n                      onClick={handleCreateAccount}\n                      disabled={isPending}\n                    >\n                      Create account\n                    </TextLink>\n                  </DetailsTooltip>\n                </div>\n              )}\n\n              {!account.isUnfunded && (\n                <TextLink\n                  onClick={() =>\n                    setIsAccountDetailsVisible(!isAccountDetailsVisible)\n                  }\n                >{`${\n                  isAccountDetailsVisible ? \"Hide\" : \"Show\"\n                } account details`}</TextLink>\n              )}\n            </div>\n          </div>\n\n          <div className=\"AccountInfoRow\">\n            <div className=\"AccountInfoCell\">\n              <div className=\"InfoButtonWrapper\">\n                <DetailsTooltip\n                  details=\"If you performed account actions elsewhere, like in the\n                  Stellar Laboratory, click here to update.\"\n                >\n                  <TextLink onClick={handleRefreshAccount} disabled={isPending}>\n                    Refresh account\n                  </TextLink>\n                </DetailsTooltip>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Account details */}\n      {isAccountDetailsVisible && (\n        <div className=\"AccountDetails Section\">\n          <Heading2>Account details</Heading2>\n          <div className=\"AccountDetailsContent\">\n            <Json src={account.data} />\n          </div>\n        </div>\n      )}\n\n      <ToastBanner parentId=\"app-wrapper\" visible={isPending}>\n        <div className=\"Layout__inline\">\n          <span>Updating account</span>\n          <Loader />\n        </div>\n      </ToastBanner>\n    </Layout.Inset>\n  );\n};\n","import { Server } from \"stellar-sdk\";\nimport { Types } from \"@stellar/wallet-sdk\";\n\ntype CheckAssetExistsProps = {\n  assetCode: string;\n  assetIssuer: string;\n  networkUrl: string;\n  accountBalances?: Types.BalanceMap;\n};\n\nexport const checkAssetExists = async ({\n  assetCode,\n  assetIssuer,\n  networkUrl,\n  accountBalances,\n}: CheckAssetExistsProps) => {\n  const asset = `${assetCode}:${assetIssuer}`;\n\n  if (accountBalances && accountBalances?.[asset]) {\n    throw new Error(`Asset \\`${asset}\\` is already trusted`);\n  }\n\n  const server = new Server(networkUrl);\n  const assetResponse = await server\n    .assets()\n    .forCode(assetCode)\n    .forIssuer(assetIssuer)\n    .call();\n\n  if (!assetResponse.records.length) {\n    throw new Error(`Asset \\`${asset}\\` does not exist`);\n  }\n};\n","import { Asset, StellarTomlResolver } from \"stellar-sdk\";\nimport { normalizeHomeDomainUrl } from \"helpers/normalizeHomeDomainUrl\";\n\nexport const getCurrenciesFromDomain = async (\n  homeDomain: string,\n): Promise<Asset[]> => {\n  let domainURL;\n\n  try {\n    domainURL = normalizeHomeDomainUrl(homeDomain);\n  } catch (e) {\n    throw new Error(\"Anchor home domain is not a valid URL using HTTPS\");\n  }\n\n  try {\n    const toml =\n      domainURL.protocol === \"http:\"\n        ? await StellarTomlResolver.resolve(domainURL.host, {\n            allowHttp: true,\n          })\n        : await StellarTomlResolver.resolve(domainURL.host);\n\n    if (!toml.CURRENCIES) {\n      throw new Error(\n        \"The home domain specified does not have a `CURRENCIES` section on its TOML file\",\n      );\n    }\n\n    return toml.CURRENCIES;\n  } catch (e) {\n    throw new Error(\n      `\\`${homeDomain}\\` is not a valid home domain, TOML file was not found`,\n    );\n  }\n};\n","import { Server } from \"stellar-sdk\";\nimport { log } from \"helpers/log\";\n\ntype GetOverrideHomeDomainProps = {\n  assetIssuer: string;\n  homeDomain: string;\n  networkUrl: string;\n};\n\nexport const getOverrideHomeDomain = async ({\n  assetIssuer,\n  homeDomain,\n  networkUrl,\n}: GetOverrideHomeDomainProps) => {\n  const server = new Server(networkUrl);\n  const accountRecord = await server.loadAccount(assetIssuer);\n  const assetHomeDomain = accountRecord.home_domain;\n\n  if (assetHomeDomain !== homeDomain) {\n    log.instruction({\n      title: `Entered home domain \\`${homeDomain}\\` will override asset’s home domain \\`${\n        assetHomeDomain || \"not configured\"\n      }\\``,\n    });\n    return homeDomain;\n  }\n\n  return undefined;\n};\n","import { Asset } from \"stellar-sdk\";\nimport { Types } from \"@stellar/wallet-sdk\";\nimport { checkAssetExists } from \"helpers/checkAssetExists\";\nimport { getCurrenciesFromDomain } from \"helpers/getCurrenciesFromDomain\";\nimport { getOverrideHomeDomain } from \"helpers/getOverrideHomeDomain\";\n\nconst getAssetListString = (assetsArray: Asset[], key: \"code\" | \"issuer\") =>\n  assetsArray && assetsArray.length\n    ? assetsArray.map((a) => a[key]).join(\", \")\n    : \"\";\n\ntype GetAssetFromHomeDomainProps = {\n  assetCode: string;\n  homeDomain: string;\n  issuerPublicKey?: string;\n  accountBalances?: Types.BalanceMap;\n  networkUrl: string;\n};\n\nexport const getAssetFromHomeDomain = async ({\n  assetCode,\n  homeDomain,\n  issuerPublicKey,\n  networkUrl,\n  accountBalances,\n}: GetAssetFromHomeDomainProps) => {\n  const tomlCurrencies = await getCurrenciesFromDomain(homeDomain);\n  const matchingAssets = tomlCurrencies.filter(\n    (currency) => currency.code === assetCode,\n  );\n\n  const availableAssetsString = getAssetListString(tomlCurrencies, \"code\");\n  const availableIssuersString = getAssetListString(matchingAssets, \"issuer\");\n\n  // No matching asset\n  if (!matchingAssets.length) {\n    throw new Error(\n      `Unable to find the ${assetCode} asset on \\`${homeDomain}\\` TOML file.\n      Available assets: ${availableAssetsString}.`,\n    );\n  }\n\n  // Home domain and issuer public key provided\n  if (issuerPublicKey) {\n    const matchingIssuer = matchingAssets.find(\n      (m) => m.issuer === issuerPublicKey,\n    );\n\n    if (matchingIssuer) {\n      await checkAssetExists({\n        assetCode,\n        assetIssuer: issuerPublicKey,\n        networkUrl,\n        accountBalances,\n      });\n\n      return {\n        assetCode,\n        assetIssuer: issuerPublicKey,\n        homeDomain: await getOverrideHomeDomain({\n          assetIssuer: issuerPublicKey,\n          homeDomain,\n          networkUrl,\n        }),\n      };\n    }\n\n    throw new Error(\n      `Unable to find the ${assetCode} asset from issuer \\`${issuerPublicKey}\\` on \\`${homeDomain}\\` TOML file.\n      Available issuers for ${assetCode}: ${availableIssuersString}.`,\n    );\n    // Home domain only (no issuer public key provided)\n  } else {\n    // Single match\n    if (matchingAssets.length === 1) {\n      const { issuer } = matchingAssets[0];\n\n      await checkAssetExists({\n        assetCode,\n        assetIssuer: issuer,\n        networkUrl,\n        accountBalances,\n      });\n\n      return {\n        assetCode,\n        assetIssuer: issuer,\n        homeDomain: await getOverrideHomeDomain({\n          assetIssuer: issuer,\n          homeDomain,\n          networkUrl,\n        }),\n      };\n    }\n\n    // Multiple matches\n    throw new Error(\n      `Multiple issuers found for asset ${assetCode}, please provide issuer public key.\n          Available issuers for ${assetCode}: ${availableIssuersString}.`,\n    );\n  }\n};\n","import { Types } from \"@stellar/wallet-sdk\";\nimport { checkAssetExists } from \"helpers/checkAssetExists\";\nimport { getErrorMessage } from \"helpers/getErrorMessage\";\nimport { getAssetFromHomeDomain } from \"helpers/getAssetFromHomeDomain\";\nimport { log } from \"helpers/log\";\n\ninterface GetUntrustedAssetProps {\n  assetCode: string;\n  homeDomain?: string;\n  issuerPublicKey?: string;\n  accountBalances?: Types.BalanceMap;\n  networkUrl: string;\n}\n\ninterface GetUntrustedAssetResponse {\n  assetCode: string;\n  assetIssuer: string;\n  homeDomain?: string;\n}\n\nexport const getValidatedUntrustedAsset = async ({\n  assetCode,\n  homeDomain,\n  issuerPublicKey,\n  accountBalances,\n  networkUrl,\n}: GetUntrustedAssetProps): Promise<GetUntrustedAssetResponse> => {\n  log.instruction({\n    title: `Validating untrusted asset ${assetCode}`,\n  });\n\n  if (assetCode && !(homeDomain || issuerPublicKey)) {\n    throw new Error(\n      \"Home domain OR issuer public key is required with asset code\",\n    );\n  }\n\n  // Asset code and issuer public key (no home domain provided)\n  if (issuerPublicKey && !homeDomain) {\n    await checkAssetExists({\n      assetCode,\n      assetIssuer: issuerPublicKey,\n      networkUrl,\n      accountBalances,\n    });\n    return {\n      assetCode,\n      assetIssuer: issuerPublicKey,\n    };\n  }\n\n  // Asset code and home domain\n  if (homeDomain) {\n    try {\n      return await getAssetFromHomeDomain({\n        assetCode,\n        homeDomain,\n        issuerPublicKey,\n        networkUrl,\n        accountBalances,\n      });\n    } catch (e) {\n      throw new Error(getErrorMessage(e));\n    }\n  }\n\n  const errorMessage = \"No asset was found matching provided information\";\n\n  log.error({\n    title: errorMessage,\n    body: {\n      assetCode,\n      homeDomain,\n      issuerPublicKey,\n    },\n  });\n  throw new Error(errorMessage);\n};\n","import { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  Button,\n  InfoBlock,\n  TextLink,\n  Modal,\n  Input,\n  DetailsTooltip,\n} from \"@stellar/design-system\";\nimport { getErrorMessage } from \"helpers/getErrorMessage\";\nimport { getNetworkConfig } from \"helpers/getNetworkConfig\";\nimport { getValidatedUntrustedAsset } from \"helpers/getValidatedUntrustedAsset\";\nimport { searchParam } from \"helpers/searchParam\";\nimport { log } from \"helpers/log\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { ActionStatus, SearchParams } from \"types/types.d\";\n\nexport const AddAsset = ({ onClose }: { onClose: () => void }) => {\n  const { account, settings, untrustedAssets } = useRedux(\n    \"account\",\n    \"settings\",\n    \"untrustedAssets\",\n  );\n\n  const [isValidating, setIsValidating] = useState(false);\n  // Form data\n  const [assetCode, setAssetCode] = useState(\"\");\n  const [homeDomain, setHomeDomain] = useState(\"\");\n  const [issuerPublicKey, setIssuerPublicKey] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const history = useHistory();\n\n  const resetState = () => {\n    setAssetCode(\"\");\n    setHomeDomain(\"\");\n    setIssuerPublicKey(\"\");\n    setErrorMessage(\"\");\n    setIsValidating(false);\n  };\n\n  useEffect(() => () => resetState(), []);\n\n  useEffect(() => {\n    if (untrustedAssets.status === ActionStatus.SUCCESS) {\n      onClose();\n    }\n\n    if (untrustedAssets.errorString) {\n      setErrorMessage(untrustedAssets.errorString);\n    }\n  }, [untrustedAssets.status, untrustedAssets.errorString, onClose]);\n\n  const handleSetUntrustedAsset = async () => {\n    setErrorMessage(\"\");\n\n    if (!(homeDomain || issuerPublicKey)) {\n      const errorMsg =\n        \"Home domain OR issuer public key is required with asset code\";\n\n      log.error({ title: errorMsg });\n      setErrorMessage(errorMsg);\n      return;\n    }\n\n    setIsValidating(true);\n\n    try {\n      const asset = await getValidatedUntrustedAsset({\n        assetCode,\n        homeDomain,\n        issuerPublicKey,\n        accountBalances: account.data?.balances,\n        networkUrl: getNetworkConfig(settings.pubnet).url,\n      });\n\n      let search = searchParam.update(\n        SearchParams.UNTRUSTED_ASSETS,\n        `${asset.assetCode}:${asset.assetIssuer}`,\n      );\n\n      if (asset.homeDomain) {\n        search = searchParam.updateKeyPair({\n          param: SearchParams.ASSET_OVERRIDES,\n          itemId: `${asset.assetCode}:${asset.assetIssuer}`,\n          keyPairs: { homeDomain },\n          urlSearchParams: new URLSearchParams(search),\n        });\n      }\n\n      history.push(search);\n      setIsValidating(false);\n    } catch (e) {\n      const errorMsg = getErrorMessage(e);\n\n      log.error({ title: errorMsg });\n      setErrorMessage(errorMsg);\n      setIsValidating(false);\n    }\n  };\n\n  const isPending =\n    isValidating || untrustedAssets.status === ActionStatus.PENDING;\n\n  return (\n    <>\n      <Modal.Heading>Add asset</Modal.Heading>\n\n      <Modal.Body>\n        <p>Required: asset code AND (home domain OR issuer)</p>\n\n        <Input\n          id=\"aa-asset-code\"\n          // TODO: change type in SDS\n          // @ts-ignore\n          label={\n            <DetailsTooltip\n              details={\n                <>\n                  Assets are identified by 1) their code and 2) either a home\n                  domain or the public key of the issuing account.{\" \"}\n                  <TextLink href=\"https://developers.stellar.org/docs/issuing-assets/publishing-asset-info/\">\n                    Learn more\n                  </TextLink>\n                </>\n              }\n              isInline\n              tooltipPosition={DetailsTooltip.tooltipPosition.left}\n            >\n              <>Asset code</>\n            </DetailsTooltip>\n          }\n          onChange={(e) => {\n            setErrorMessage(\"\");\n            setAssetCode(e.target.value);\n          }}\n          value={assetCode}\n          placeholder=\"ex: USDC, EURT, NGNT\"\n        />\n\n        <Input\n          id=\"aa-home-domain\"\n          // TODO: change type in SDS\n          // @ts-ignore\n          label={\n            <DetailsTooltip\n              details={\n                <>\n                  Domain where the well-known TOML file can be found for this\n                  asset.{\" \"}\n                  <TextLink href=\"https://developers.stellar.org/docs/issuing-assets/publishing-asset-info/#what-is-a-stellartoml\">\n                    Learn more\n                  </TextLink>\n                </>\n              }\n              isInline\n              tooltipPosition={DetailsTooltip.tooltipPosition.left}\n            >\n              <>Anchor home domain</>\n            </DetailsTooltip>\n          }\n          onChange={(e) => {\n            setErrorMessage(\"\");\n            setHomeDomain(e.target.value);\n          }}\n          value={homeDomain}\n          placeholder=\"ex: example.com\"\n        />\n\n        <Input\n          id=\"aa-public-key\"\n          // TODO: change type in SDS\n          // @ts-ignore\n          label={\n            <DetailsTooltip\n              details={\n                <>\n                  Public key for the Asset Issuer.{\" \"}\n                  <TextLink href=\"https://developers.stellar.org/docs/issuing-assets/how-to-issue-an-asset\">\n                    Learn more\n                  </TextLink>\n                </>\n              }\n              isInline\n              tooltipPosition={DetailsTooltip.tooltipPosition.left}\n            >\n              <>Issuer public key</>\n            </DetailsTooltip>\n          }\n          onChange={(e) => {\n            setErrorMessage(\"\");\n            setIssuerPublicKey(e.target.value);\n          }}\n          value={issuerPublicKey}\n          placeholder=\"ex: GCDNJUBQSX7AJWLJACMJ7I4BC3Z47BQUTMHEICZLE6MU4KQBRYG5JY6B\"\n        />\n\n        {errorMessage && (\n          <InfoBlock variant={InfoBlock.variant.error}>\n            <p>{errorMessage}</p>\n          </InfoBlock>\n        )}\n      </Modal.Body>\n\n      <Modal.Footer>\n        <Button\n          onClick={handleSetUntrustedAsset}\n          disabled={!assetCode}\n          isLoading={isPending}\n        >\n          Add\n        </Button>\n      </Modal.Footer>\n    </>\n  );\n};\n","import { presetAsset } from \"types/types.d\";\n\nexport const PRESET_ASSETS: presetAsset[] = [\n  {\n    assetCode: \"USDC\",\n    issuerPublicKey: \"GBBD47IF6LWK7P7MDEVSCWR7DPUWV3NY3DTQEVFL4NAT4AQH3ZLLFLA5\",\n  },\n  {\n    assetCode: \"SRT\",\n    homeDomain: \"testanchor.stellar.org\",\n  },\n  {\n    assetCode: \"MYASSET\",\n    homeDomain: \"sep8-server.dev.stellar.org\",\n  },\n];\n","import { PRESET_ASSETS } from \"constants/presetAssets\";\nimport { Asset } from \"types/types\";\n\nexport const getPresetAssets = (allAssets: Asset[]) => {\n  const newPresetAssets = PRESET_ASSETS.filter(\n    (pAsset) =>\n      !allAssets.some(\n        (a) =>\n          a.assetCode === pAsset.assetCode &&\n          (a.homeDomain === pAsset.homeDomain ||\n            a.assetIssuer === pAsset.issuerPublicKey),\n      ),\n  );\n  return newPresetAssets;\n};\n","import { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  Button,\n  Checkbox,\n  InfoBlock,\n  TextLink,\n  Modal,\n} from \"@stellar/design-system\";\nimport { getErrorMessage } from \"helpers/getErrorMessage\";\nimport { getNetworkConfig } from \"helpers/getNetworkConfig\";\nimport { getPresetAssets } from \"helpers/getPresetAssets\";\nimport { getValidatedUntrustedAsset } from \"helpers/getValidatedUntrustedAsset\";\nimport { log } from \"helpers/log\";\nimport { searchParam } from \"helpers/searchParam\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { ActionStatus, presetAsset, SearchParams } from \"types/types.d\";\nimport { shortenStellarKey } from \"helpers/shortenStellarKey\";\n\nexport const AddPresetAsset = ({ onClose }: { onClose: () => void }) => {\n  const { account, allAssets, settings, untrustedAssets } = useRedux(\n    \"account\",\n    \"allAssets\",\n    \"settings\",\n    \"untrustedAssets\",\n  );\n  const [presetAssets, setPresetAssets] = useState<presetAsset[]>([]);\n  const [checkedAssets, setCheckedAssets] = useState<{\n    [key: string]: boolean;\n  }>({});\n  const [isValidating, setIsValidating] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const history = useHistory();\n\n  useEffect(() => {\n    setPresetAssets(getPresetAssets(allAssets.data));\n  }, [allAssets]);\n\n  useEffect(() => {\n    if (untrustedAssets.status === ActionStatus.SUCCESS) {\n      onClose();\n    }\n\n    if (untrustedAssets.errorString) {\n      setErrorMessage(untrustedAssets.errorString);\n    }\n  }, [onClose, untrustedAssets.errorString, untrustedAssets.status]);\n\n  const getAssetId = (asset: presetAsset) =>\n    `${asset.assetCode}:${asset.homeDomain || asset.issuerPublicKey}`;\n\n  const hasAnySelectedAsset = () =>\n    Object.values(checkedAssets).some((isChecked) => isChecked === true);\n\n  const handleAddUntrustedAssets = async (assetList: presetAsset[]) => {\n    setErrorMessage(\"\");\n    setIsValidating(true);\n\n    try {\n      const validatedAssetValues = await Promise.all(\n        assetList.map(async (pAsset) => {\n          const { assetCode, issuerPublicKey, homeDomain } = pAsset;\n\n          if (!(homeDomain || issuerPublicKey)) {\n            const errorMsg = `Home domain OR issuer public key is required with asset code ${assetCode}`;\n            throw new Error(errorMsg);\n          }\n\n          const asset = await getValidatedUntrustedAsset({\n            assetCode,\n            homeDomain,\n            issuerPublicKey,\n            accountBalances: account.data?.balances,\n            networkUrl: getNetworkConfig(settings.pubnet).url,\n          });\n\n          return `${asset.assetCode}:${asset.assetIssuer}`;\n        }),\n      );\n\n      const newSearchQ = searchParam.update(\n        SearchParams.UNTRUSTED_ASSETS,\n        validatedAssetValues.join(\",\"),\n      );\n      history.push(newSearchQ);\n    } catch (e) {\n      const errorMsg = getErrorMessage(e);\n      log.error({ title: errorMsg });\n      setErrorMessage(errorMsg);\n      setIsValidating(false);\n      return;\n    }\n\n    setIsValidating(false);\n  };\n\n  const isPending =\n    isValidating || untrustedAssets.status === ActionStatus.PENDING;\n\n  const renderAssetRow = (asset: presetAsset) => {\n    const { homeDomain, issuerPublicKey: assetIssuer } = asset;\n\n    const assetId = getAssetId(asset);\n    const networkUrl = getNetworkConfig(settings.pubnet).url.replace(\n      \"https:\",\n      \"\",\n    );\n\n    // if no home domain is provided, use horizon's /account endpoint:\n    const issuerLink =\n      (homeDomain && `//${homeDomain}/.well-known/stellar.toml`) ||\n      (assetIssuer && `${networkUrl}/accounts/${assetIssuer}`);\n    const displayLink =\n      homeDomain || (assetIssuer && shortenStellarKey(assetIssuer));\n\n    return (\n      <div key={`preset-asset-${assetId}`} className=\"PresetAssetRow\">\n        <Checkbox\n          id={assetId}\n          label=\"\"\n          checked={Boolean(checkedAssets[assetId])}\n          onChange={() => {\n            const updatedCheckedAssets = { ...checkedAssets };\n            updatedCheckedAssets[assetId] = !checkedAssets[assetId];\n            setCheckedAssets(updatedCheckedAssets);\n          }}\n          disabled={isPending}\n        />\n        <div>\n          <div className=\"PresetAssetCode\">{asset.assetCode}</div>\n          <div className=\"PresetAssetIssuer\">\n            {displayLink && (\n              <TextLink href={issuerLink}>{displayLink}</TextLink>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <Modal.Heading>Add preset asset</Modal.Heading>\n\n      <Modal.Body>\n        <p>Select one or more assets</p>\n        <div className=\"PresetAssets\">{presetAssets.map(renderAssetRow)}</div>\n\n        {errorMessage && (\n          <InfoBlock variant={InfoBlock.variant.error}>\n            <p>{errorMessage}</p>\n          </InfoBlock>\n        )}\n      </Modal.Body>\n\n      <Modal.Footer>\n        <Button\n          onClick={() => {\n            const assetsToAdd = presetAssets.flatMap((pAsset) => {\n              const assetId = getAssetId(pAsset);\n              return checkedAssets[assetId] ? pAsset : [];\n            });\n            handleAddUntrustedAssets(assetsToAdd);\n          }}\n          disabled={!hasAnySelectedAsset()}\n          isLoading={isPending}\n        >\n          Confirm\n        </Button>\n      </Modal.Footer>\n    </>\n  );\n};\n","import { Button, Modal } from \"@stellar/design-system\";\nimport { useRedux } from \"hooks/useRedux\";\n\nexport const ConfirmAssetAction = ({ onClose }: { onClose: () => void }) => {\n  const { activeAsset } = useRedux(\"activeAsset\");\n\n  if (!activeAsset?.action) {\n    return null;\n  }\n\n  const { title, description, callback, options } = activeAsset.action;\n\n  return (\n    <>\n      <Modal.Heading>{title}</Modal.Heading>\n\n      <Modal.Body>\n        {description &&\n          (typeof description === \"string\" ? (\n            <p>{description}</p>\n          ) : (\n            description\n          ))}\n        {options && <p>{options}</p>}\n      </Modal.Body>\n\n      <Modal.Footer>\n        <Button\n          onClick={() => {\n            callback();\n          }}\n        >\n          Start\n        </Button>\n        <Button variant={Button.variant.secondary} onClick={onClose}>\n          Cancel\n        </Button>\n      </Modal.Footer>\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Input, InfoBlock, Modal } from \"@stellar/design-system\";\nimport { getAssetFromHomeDomain } from \"helpers/getAssetFromHomeDomain\";\nimport { getErrorMessage } from \"helpers/getErrorMessage\";\nimport { getNetworkConfig } from \"helpers/getNetworkConfig\";\nimport { log } from \"helpers/log\";\nimport { searchParam } from \"helpers/searchParam\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { Asset, SearchParams } from \"types/types.d\";\n\nexport const HomeDomainOverrideModal = ({\n  asset,\n  onClose,\n}: {\n  asset: Asset;\n  onClose: () => void;\n}) => {\n  const { settings } = useRedux(\"settings\");\n  const history = useHistory();\n\n  const [homeDomain, setHomeDomain] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [isPending, setIsPending] = useState(false);\n\n  const handleOverride = async () => {\n    setErrorMessage(\"\");\n    setIsPending(true);\n\n    const { assetCode, assetIssuer } = asset;\n    const networkUrl = getNetworkConfig(settings.pubnet).url;\n\n    try {\n      const validAsset = await getAssetFromHomeDomain({\n        assetCode,\n        homeDomain,\n        issuerPublicKey: assetIssuer,\n        networkUrl,\n      });\n\n      if (validAsset.homeDomain) {\n        history.push(\n          searchParam.updateKeyPair({\n            param: SearchParams.ASSET_OVERRIDES,\n            itemId: `${asset.assetCode}:${asset.assetIssuer}`,\n            keyPairs: { homeDomain },\n          }),\n        );\n\n        onClose();\n      } else {\n        throw new Error(\n          `Override home domain is the same as ${asset.assetCode} asset home domain`,\n        );\n      }\n    } catch (e) {\n      const errorMsg = getErrorMessage(e);\n      setErrorMessage(errorMsg);\n      log.error({ title: errorMsg });\n      setIsPending(false);\n    }\n  };\n\n  return (\n    <>\n      <Modal.Heading>Override home domain</Modal.Heading>\n\n      <Modal.Body>\n        <p>{`Asset ${asset.assetCode} currently has ${\n          asset.homeDomain || \"no\"\n        } home domain.`}</p>\n\n        <Input\n          id=\"hdo-home-domain\"\n          label=\"Anchor home domain\"\n          onChange={(e) => {\n            setErrorMessage(\"\");\n            setHomeDomain(e.target.value);\n          }}\n          value={homeDomain}\n          placeholder=\"ex: example.com\"\n        />\n\n        {errorMessage && (\n          <InfoBlock variant={InfoBlock.variant.error}>\n            <p>{errorMessage}</p>\n          </InfoBlock>\n        )}\n      </Modal.Body>\n\n      <Modal.Footer>\n        <Button\n          onClick={handleOverride}\n          disabled={!homeDomain}\n          isLoading={isPending}\n        >\n          Override\n        </Button>\n\n        <Button\n          onClick={onClose}\n          disabled={isPending}\n          variant={Button.variant.secondary}\n        >\n          Cancel\n        </Button>\n      </Modal.Footer>\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  Loader,\n  TextLink,\n  Modal,\n  Icon,\n  IconButton,\n} from \"@stellar/design-system\";\n\nimport { ConfirmAssetAction } from \"components/ConfirmAssetAction\";\nimport { HomeDomainOverrideModal } from \"components/HomeDomainOverrideModal\";\nimport { CSS_MODAL_PARENT_ID } from \"constants/settings\";\nimport {\n  setActiveAssetAction,\n  resetActiveAssetAction,\n} from \"ducks/activeAsset\";\nimport { log } from \"helpers/log\";\nimport { searchParam } from \"helpers/searchParam\";\nimport { ActionStatus, Asset, SearchParams } from \"types/types.d\";\nimport { useRedux } from \"hooks/useRedux\";\n\nexport const HomeDomainOverrideButtons = ({ asset }: { asset: Asset }) => {\n  const [activeModal, setActiveModal] = useState(\"\");\n\n  const { assetOverrides } = useRedux(\"assetOverrides\");\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  enum ModalType {\n    REMOVE_ASSET_OVERRIDE = \"REMOVE_ASSET_OVERRIDE\",\n    ASSET_OVERRIDE = \"ASSET_OVERRIDE\",\n  }\n\n  const showModal = (modalType: ModalType) => {\n    setActiveModal(modalType);\n\n    let activeAsset;\n\n    switch (modalType) {\n      case ModalType.ASSET_OVERRIDE:\n        // Modal text is set in HomeDomainOverrideModal component\n        activeAsset = {\n          assetString: asset.assetString,\n          title: \"\",\n          callback: () => {\n            // do nothing\n          },\n        };\n        break;\n      case ModalType.REMOVE_ASSET_OVERRIDE:\n        activeAsset = {\n          assetString: asset.assetString,\n          title: `Remove ${asset.assetCode} home domain override`,\n          description: `Asset ${asset.assetCode}’s home domain ${asset.homeDomain} override will be removed. Original home domain will be used, if it exists.`,\n          callback: handleRemove,\n        };\n        break;\n      default:\n      // do nothing\n    }\n\n    dispatch(setActiveAssetAction(activeAsset));\n  };\n\n  const handleRemove = () => {\n    history.push(\n      searchParam.removeKeyPair({\n        param: SearchParams.ASSET_OVERRIDES,\n        itemId: asset.assetString,\n      }),\n    );\n    log.instruction({\n      title: `Asset’s ${asset.assetCode} home domain override \\`${asset.homeDomain}\\` removed`,\n    });\n    handleCloseModal();\n  };\n\n  const handleCloseModal = () => {\n    setActiveModal(\"\");\n    dispatch(resetActiveAssetAction());\n  };\n\n  if (assetOverrides.status === ActionStatus.PENDING) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      {asset.homeDomain ? (\n        <IconButton\n          icon={<Icon.Edit2 />}\n          altText=\"Edit home domain\"\n          onClick={() => showModal(ModalType.ASSET_OVERRIDE)}\n        />\n      ) : (\n        <TextLink onClick={() => showModal(ModalType.ASSET_OVERRIDE)}>\n          Add home domain\n        </TextLink>\n      )}\n\n      {asset.isOverride && (\n        <IconButton\n          icon={<Icon.XCircle />}\n          altText=\"Remove home domain override\"\n          onClick={() => showModal(ModalType.REMOVE_ASSET_OVERRIDE)}\n          variant={IconButton.variant.error}\n        />\n      )}\n\n      <Modal\n        visible={Boolean(activeModal)}\n        onClose={handleCloseModal}\n        parentId={CSS_MODAL_PARENT_ID}\n      >\n        {/* Action confirmation */}\n        {activeModal === ModalType.REMOVE_ASSET_OVERRIDE && (\n          <ConfirmAssetAction onClose={handleCloseModal} />\n        )}\n\n        {/* Override home domain */}\n        {activeModal === ModalType.ASSET_OVERRIDE && (\n          <HomeDomainOverrideModal asset={asset} onClose={handleCloseModal} />\n        )}\n      </Modal>\n    </>\n  );\n};\n","import React, { ReactNode, useEffect, useState } from \"react\";\nimport { Select, TextLink, DetailsTooltip } from \"@stellar/design-system\";\nimport { HomeDomainOverrideButtons } from \"components/HomeDomainOverrideButtons\";\nimport { shortenStellarKey } from \"helpers/shortenStellarKey\";\nimport {\n  Asset,\n  ActiveAssetAction,\n  AssetActionId,\n  AssetType,\n  ClaimableAsset,\n} from \"types/types.d\";\n\ninterface BalanceRowProps {\n  activeAction: ActiveAssetAction | undefined;\n  asset: Asset | ClaimableAsset;\n  onAction?: (actionId: string, asset: Asset) => void;\n  children?: ReactNode;\n}\n\nexport const BalanceRow = ({\n  activeAction,\n  asset,\n  onAction,\n  children,\n}: BalanceRowProps) => {\n  const {\n    assetString,\n    assetCode,\n    assetIssuer,\n    total,\n    supportedActions,\n    isUntrusted,\n    notExist,\n    homeDomain,\n  } = asset;\n  const isActive = activeAction?.assetString === assetString;\n  const disabled = Boolean(activeAction);\n  const [selectValue, setSelectValue] = useState(\"\");\n\n  useEffect(() => {\n    // reset value to default after modal close\n    if (!isActive) {\n      setSelectValue(\"\");\n    }\n  }, [isActive]);\n\n  const handleSelectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const value = e.target.value;\n    setSelectValue(value);\n    if (onAction) {\n      onAction(value, asset);\n    }\n  };\n\n  const renderActionsSelect = () => {\n    if (onAction) {\n      // Regulated asset needs to be trusted first\n      if (isUntrusted && asset.supportedActions?.sep8) {\n        return null;\n      }\n\n      return (\n        <div className=\"BalanceCellSelect\">\n          <DetailsTooltip\n            details={\n              <>\n                {\n                  \"What you can do with an asset (deposit, withdraw, or send) depends on what transactions the anchor supports.\"\n                }{\" \"}\n                <TextLink href=\"https://developers.stellar.org/docs/anchoring-assets\">\n                  Learn more\n                </TextLink>\n              </>\n            }\n          >\n            <Select\n              id={`${assetString}-actions`}\n              onChange={handleSelectChange}\n              disabled={disabled}\n              value={selectValue}\n            >\n              <option value=\"\">Select action</option>\n              {!isUntrusted && !asset.supportedActions?.sep8 && (\n                <option value={AssetActionId.SEND_PAYMENT}>Send payment</option>\n              )}\n\n              {supportedActions?.sep6 && (\n                <>\n                  <option value={AssetActionId.SEP6_DEPOSIT}>\n                    SEP-6 Deposit\n                  </option>\n                  {!isUntrusted && (\n                    <option value={AssetActionId.SEP6_WITHDRAW}>\n                      SEP-6 Withdraw\n                    </option>\n                  )}\n                </>\n              )}\n\n              {!isUntrusted && asset.supportedActions?.sep8 && (\n                <option value={AssetActionId.SEP8_SEND_PAYMENT}>\n                  SEP-8 Send\n                </option>\n              )}\n\n              {supportedActions?.sep24 && (\n                <>\n                  <option value={AssetActionId.SEP24_DEPOSIT}>\n                    SEP-24 Deposit\n                  </option>\n                  {!isUntrusted && (\n                    <option value={AssetActionId.SEP24_WITHDRAW}>\n                      SEP-24 Withdraw\n                    </option>\n                  )}\n                </>\n              )}\n              {!isUntrusted && supportedActions?.sep31 && (\n                <option value={AssetActionId.SEP31_SEND}>SEP-31 Send</option>\n              )}\n            </Select>\n          </DetailsTooltip>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  return (\n    <div\n      className={`BalanceRow Layout__inset ${isActive ? \"active\" : \"\"} ${\n        disabled ? \"disabled\" : \"\"\n      }`}\n      key={assetString}\n    >\n      <div className=\"BalanceCell BalanceInfo\">\n        {notExist ? (\n          <div className=\"BalanceAmount error\">{`${assetCode}:${shortenStellarKey(\n            assetIssuer,\n          )} does not exist`}</div>\n        ) : (\n          <>\n            <div className=\"BalanceAmount\">{`${\n              total || \"0\"\n            } ${assetCode}`}</div>\n            <div className=\"BalanceOptions Layout__inline\">\n              {homeDomain && (\n                <TextLink\n                  href={`//${homeDomain}/.well-known/stellar.toml`}\n                  variant={TextLink.variant.secondary}\n                  underline\n                >\n                  {homeDomain}\n                </TextLink>\n              )}\n              {!asset.isClaimableBalance &&\n                asset.assetType !== AssetType.NATIVE && (\n                  <HomeDomainOverrideButtons asset={asset} />\n                )}\n            </div>\n          </>\n        )}\n      </div>\n\n      {supportedActions?.sep8 && (\n        <DetailsTooltip\n          details={\n            <>\n              {\n                \"Payments with regulated assets need to be approved by the asset issuer. For more information please refer to \"\n              }\n              <TextLink href=\"https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0008.md\">\n                SEP-8\n              </TextLink>\n              .\n            </>\n          }\n        >\n          <span>Regulated</span>\n        </DetailsTooltip>\n      )}\n\n      <div className=\"BalanceCell BalanceActions\">\n        {children && <div className=\"CustomCell\">{children}</div>}\n\n        {renderActionsSelect()}\n      </div>\n    </div>\n  );\n};\n","import { useDispatch } from \"react-redux\";\nimport { TextLink } from \"@stellar/design-system\";\n\nimport { BalanceRow } from \"components/BalanceRow\";\nimport { initiateDepositAction as initiateSep6SendAction } from \"ducks/sep6DepositAsset\";\nimport { initiateWithdrawAction as initiateSep6WithdrawAction } from \"ducks/sep6WithdrawAsset\";\nimport { initiateSep8SendAction } from \"ducks/sep8Send\";\nimport { depositAssetAction } from \"ducks/sep24DepositAsset\";\nimport { initiateSendAction } from \"ducks/sep31Send\";\nimport { withdrawAssetAction } from \"ducks/sep24WithdrawAsset\";\nimport { useRedux } from \"hooks/useRedux\";\nimport {\n  Asset,\n  AssetActionItem,\n  AssetActionId,\n  AssetType,\n  AssetCategory,\n} from \"types/types.d\";\n\ninterface SortedBalancesResult {\n  native: Asset[];\n  other: Asset[];\n}\n\nexport const Balance = ({\n  onAssetAction,\n  onSend,\n}: {\n  onAssetAction: ({\n    balance,\n    callback,\n    title,\n    description,\n    options,\n  }: AssetActionItem) => void;\n  onSend: (asset?: Asset) => void;\n}) => {\n  const { activeAsset, allAssets } = useRedux(\"activeAsset\", \"allAssets\");\n  const allBalances = allAssets.data.filter(\n    (a) => a.category === AssetCategory.TRUSTED,\n  );\n\n  const dispatch = useDispatch();\n\n  const groupBalances = () => {\n    if (!allBalances) {\n      return null;\n    }\n\n    const result: SortedBalancesResult = {\n      native: [],\n      other: [],\n    };\n\n    allBalances.map((balance) => {\n      if (balance.assetType === AssetType.NATIVE) {\n        result.native = [...result.native, balance];\n      } else {\n        result.other = [...result.other, balance];\n      }\n\n      return result;\n    });\n\n    return result;\n  };\n\n  const handleSep6Deposit = (asset: Asset) => {\n    dispatch(initiateSep6SendAction(asset));\n  };\n\n  const handleSep6Withdraw = (asset: Asset) => {\n    dispatch(initiateSep6WithdrawAction(asset));\n  };\n\n  const handleSep8Send = (asset: Asset) => {\n    dispatch(initiateSep8SendAction(asset));\n  };\n\n  const handleSep24Deposit = (asset: Asset) => {\n    dispatch(depositAssetAction(asset));\n  };\n\n  const handleSep24Withdraw = (asset: Asset) => {\n    dispatch(withdrawAssetAction(asset));\n  };\n\n  const handleSep31Send = (asset: Asset) => {\n    dispatch(initiateSendAction(asset));\n  };\n\n  const handleAction = ({\n    actionId,\n    balance,\n  }: {\n    actionId: string;\n    balance: Asset;\n  }) => {\n    if (!actionId) {\n      return;\n    }\n\n    let props: AssetActionItem | undefined;\n    const defaultProps = {\n      assetString: balance.assetString,\n      balance,\n    };\n\n    switch (actionId) {\n      case AssetActionId.SEND_PAYMENT:\n        props = {\n          ...defaultProps,\n          title: `Send ${balance.assetCode}`,\n          description: (\n            <p>\n              {`Send ${balance.assetCode} on-chain to another account.`}{\" \"}\n              <TextLink href=\"https://developers.stellar.org/docs/tutorials/send-and-receive-payments/\">\n                Learn more\n              </TextLink>\n            </p>\n          ),\n          callback: onSend,\n        };\n        break;\n      case AssetActionId.SEP6_DEPOSIT:\n        props = {\n          ...defaultProps,\n          title: `SEP-6 deposit ${balance.assetCode} (with Trusted Asset)`,\n          description: `Start SEP-6 deposit of trusted asset ${balance.assetCode}?`,\n          callback: () => handleSep6Deposit(balance),\n        };\n        break;\n      case AssetActionId.SEP6_WITHDRAW:\n        props = {\n          ...defaultProps,\n          title: `SEP-6 withdrawal ${balance.assetCode}`,\n          description: `Start SEP-6 withdrawal of ${balance.assetCode}?`,\n          callback: () => handleSep6Withdraw(balance),\n        };\n        break;\n      case AssetActionId.SEP8_SEND_PAYMENT:\n        props = {\n          ...defaultProps,\n          title: `SEP-8 send ${balance.assetCode}`,\n          description: (\n            <p>\n              {`Payments with regulated assets need to be approved by the asset issuer. For more information please refer to`}{\" \"}\n              <TextLink href=\"https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0008.md\">\n                SEP-8\n              </TextLink>\n              .\n            </p>\n          ),\n          callback: () => handleSep8Send(balance),\n        };\n        break;\n      case AssetActionId.SEP24_DEPOSIT:\n        props = {\n          ...defaultProps,\n          title: `SEP-24 deposit ${balance.assetCode} (with Trusted Asset)`,\n          description: `Start SEP-24 deposit of trusted asset ${balance.assetCode}?`,\n          callback: () => handleSep24Deposit(balance),\n        };\n        break;\n      case AssetActionId.SEP24_WITHDRAW:\n        props = {\n          ...defaultProps,\n          title: `SEP-24 withdrawal ${balance.assetCode}`,\n          description: `Start SEP-24 withdrawal of ${balance.assetCode}?`,\n          callback: () => handleSep24Withdraw(balance),\n        };\n        break;\n      case AssetActionId.SEP31_SEND: {\n        let description = `Start SEP-31 send to ${balance.assetCode}?\\n\\n`;\n        description +=\n          \"Please be aware that specifically in the case of demo-ing SEP-31 in the Demo Wallet the public and secret keys don't represent the Sending Client but instead the Sending Anchor's account.\\n\\n\";\n        description +=\n          \"In SEP-31, the only Stellar transaction happening is between the Sending and the Receiving anchors.\";\n        props = {\n          ...defaultProps,\n          title: `SEP-31 send ${balance.assetCode}`,\n\n          description,\n          callback: () => handleSep31Send(balance),\n        };\n        break;\n      }\n      default:\n      // do nothing\n    }\n\n    if (!props) {\n      return;\n    }\n\n    onAssetAction(props);\n  };\n\n  const sortedBalances = groupBalances();\n\n  if (!sortedBalances) {\n    return null;\n  }\n\n  return (\n    <>\n      {/* Native (XLM) balance */}\n      {sortedBalances.native.map((balance) => (\n        <BalanceRow\n          key={balance.assetString}\n          activeAction={activeAsset.action}\n          asset={balance}\n          onAction={(actionId, asset) =>\n            handleAction({ actionId, balance: asset })\n          }\n        />\n      ))}\n\n      {/* Other balances */}\n      {sortedBalances.other.map((balance) => (\n        <BalanceRow\n          activeAction={activeAsset.action}\n          key={balance.assetString}\n          asset={balance}\n          onAction={(actionId, asset) =>\n            handleAction({ actionId, balance: asset })\n          }\n        />\n      ))}\n    </>\n  );\n};\n","import { Heading2, TextLink, Layout } from \"@stellar/design-system\";\nimport { useDispatch } from \"react-redux\";\nimport { BalanceRow } from \"components/BalanceRow\";\nimport { claimAssetAction } from \"ducks/claimAsset\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { AssetActionItem, ClaimableAsset } from \"types/types.d\";\n\nexport const ClaimableBalance = ({\n  onAssetAction,\n}: {\n  onAssetAction: ({\n    balance,\n    callback,\n    title,\n    description,\n    options,\n  }: AssetActionItem) => void;\n}) => {\n  const { activeAsset, claimableBalances } = useRedux(\n    \"activeAsset\",\n    \"claimableBalances\",\n  );\n  const balances = claimableBalances.data.records;\n\n  const dispatch = useDispatch();\n\n  const handleClaim = (balance: ClaimableAsset) => {\n    onAssetAction({\n      assetString: balance.assetString,\n      balance,\n      title: `Claim balance ${balance.assetCode}`,\n      description: `Claimable balance description ${balance.total} ${balance.assetCode}`,\n      callback: () => dispatch(claimAssetAction(balance)),\n    });\n  };\n\n  if (!balances || !balances.length) {\n    return null;\n  }\n\n  return (\n    <div className=\"ClaimableBalances\">\n      <Layout.Inset>\n        <Heading2>Claimable Balances</Heading2>\n      </Layout.Inset>\n      <div className=\"Balances\">\n        {balances.map((balance) => (\n          <BalanceRow\n            activeAction={activeAsset.action}\n            key={balance.assetString}\n            asset={balance}\n          >\n            <TextLink\n              onClick={() => handleClaim(balance)}\n              disabled={Boolean(activeAsset.action)}\n            >\n              Claim\n            </TextLink>\n          </BalanceRow>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { TextLink, DetailsTooltip } from \"@stellar/design-system\";\n\nimport { BalanceRow } from \"components/BalanceRow\";\nimport { resetActiveAssetAction } from \"ducks/activeAsset\";\nimport { initiateDepositAction as initiateSep6SendAction } from \"ducks/sep6DepositAsset\";\nimport { depositAssetAction } from \"ducks/sep24DepositAsset\";\nimport { trustAssetAction } from \"ducks/trustAsset\";\nimport {\n  addUntrustedAssetAction,\n  removeUntrustedAssetAction,\n  resetUntrustedAssetStatusAction,\n} from \"ducks/untrustedAssets\";\nimport { log } from \"helpers/log\";\nimport { searchParam } from \"helpers/searchParam\";\nimport { useRedux } from \"hooks/useRedux\";\nimport {\n  ActionStatus,\n  Asset,\n  AssetActionItem,\n  AssetActionId,\n  SearchParams,\n  AssetCategory,\n} from \"types/types.d\";\n\nexport const UntrustedBalance = ({\n  onAssetAction,\n}: {\n  onAssetAction: ({\n    balance,\n    callback,\n    title,\n    description,\n    options,\n  }: AssetActionItem) => void;\n}) => {\n  const { account, activeAsset, allAssets, settings, trustAsset } = useRedux(\n    \"account\",\n    \"activeAsset\",\n    \"allAssets\",\n    \"settings\",\n    \"trustAsset\",\n  );\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const allUntrustedAssets = allAssets.data.filter(\n    (a) => a.category === AssetCategory.UNTRUSTED,\n  );\n\n  useEffect(() => {\n    if (!settings.untrustedAssets) {\n      return;\n    }\n\n    dispatch(addUntrustedAssetAction(settings.untrustedAssets));\n  }, [settings.untrustedAssets, dispatch]);\n\n  const handleTrustAsset = (asset: Asset) => {\n    const { assetString, assetCode, assetIssuer } = asset;\n    dispatch(trustAssetAction({ assetString, assetCode, assetIssuer }));\n  };\n\n  const handleSep6Deposit = (asset: Asset) => {\n    dispatch(initiateSep6SendAction(asset));\n  };\n\n  const handleDepositAsset = (asset: Asset) => {\n    dispatch(depositAssetAction(asset));\n  };\n\n  const handleRemoveAsset = (asset: Asset) => {\n    const { assetString } = asset;\n\n    history.push(\n      searchParam.remove(SearchParams.UNTRUSTED_ASSETS, assetString),\n    );\n    dispatch(removeUntrustedAssetAction(assetString));\n    log.instruction({ title: `Untrusted asset \\`${assetString}\\` removed` });\n\n    dispatch(resetUntrustedAssetStatusAction());\n    dispatch(resetActiveAssetAction());\n  };\n\n  const handleAction = ({\n    actionId,\n    asset,\n  }: {\n    actionId: string;\n    asset: Asset;\n  }) => {\n    if (!actionId) {\n      return;\n    }\n\n    let props: AssetActionItem | undefined;\n    const defaultProps = {\n      assetString: asset.assetString,\n      balance: asset,\n    };\n\n    const TRUSTED_ASSET_EXPLANATION =\n      \"A lumen is the only asset type that can be used on the Stellar network that doesn’t require an issuer or a trustline.\";\n\n    switch (actionId) {\n      case AssetActionId.SEP6_DEPOSIT:\n        props = {\n          ...defaultProps,\n          title: `SEP-6 deposit ${asset.assetCode} (with untrusted Asset)`,\n          description: `Start SEP-6 deposit of untrusted asset ${asset.assetCode}? ${TRUSTED_ASSET_EXPLANATION}`,\n          callback: () => handleSep6Deposit(asset),\n        };\n        break;\n      case AssetActionId.SEP24_DEPOSIT:\n        props = {\n          ...defaultProps,\n          title: `SEP-24 deposit ${asset.assetCode} (with untrusted Asset)`,\n          description: `Start SEP-24 deposit of untrusted asset ${asset.assetCode}? ${TRUSTED_ASSET_EXPLANATION}`,\n          callback: () => handleDepositAsset(asset),\n        };\n        break;\n      case AssetActionId.TRUST_ASSET:\n        props = {\n          ...defaultProps,\n          title: `Add Trustline “Trust Asset ${asset.assetCode}”?`,\n          description: (\n            <p>\n              You are about to create a trustline to asset{\" \"}\n              <code>{`${asset.assetCode}:${asset.assetIssuer}`}</code>. This\n              will allow you to hold this asset.{\" \"}\n              <TextLink href=\"https://developers.stellar.org/docs/issuing-assets/anatomy-of-an-asset/#trustlines\">\n                Learn more\n              </TextLink>\n            </p>\n          ),\n          callback: () => handleTrustAsset(asset),\n        };\n        break;\n      case AssetActionId.REMOVE_ASSET:\n        props = {\n          ...defaultProps,\n          title: `Remove asset ${asset.assetCode}`,\n          description: (\n            <p>\n              Asset <code>{`${asset.assetCode}:${asset.assetIssuer}`}</code>{\" \"}\n              does not exist, remove it?\n            </p>\n          ),\n          callback: () => handleRemoveAsset(asset),\n        };\n        break;\n      default:\n      // nothing\n    }\n\n    if (!props) {\n      return;\n    }\n\n    onAssetAction(props);\n  };\n\n  const disabledButton =\n    Boolean(activeAsset.action) || trustAsset.status === ActionStatus.PENDING;\n\n  return (\n    <>\n      {allUntrustedAssets.map((asset: Asset) =>\n        asset.isUntrusted ? (\n          // Untrusted\n          <BalanceRow\n            activeAction={activeAsset.action}\n            key={asset.assetString}\n            asset={asset}\n            onAction={(actionId, assetItem) =>\n              handleAction({ actionId, asset: assetItem })\n            }\n          >\n            <DetailsTooltip\n              details={\n                <>\n                  Adding a trustline means you trust an issuer to redeem its\n                  credit. If you’re testing SEP-24 or SEP-6 you may not want to\n                  do this.{\" \"}\n                  <TextLink href=\"https://developers.stellar.org/docs/issuing-assets/anatomy-of-an-asset/#trustlines\">\n                    Learn more\n                  </TextLink>\n                </>\n              }\n            >\n              <TextLink\n                onClick={() =>\n                  handleAction({\n                    actionId: AssetActionId.TRUST_ASSET,\n                    asset,\n                  })\n                }\n                disabled={account.isUnfunded || disabledButton}\n              >\n                Add trustline\n              </TextLink>\n            </DetailsTooltip>\n          </BalanceRow>\n        ) : (\n          // Does not exist\n          <BalanceRow\n            activeAction={activeAsset.action}\n            key={asset.assetString}\n            asset={asset}\n          >\n            <TextLink\n              onClick={() =>\n                handleAction({\n                  actionId: AssetActionId.REMOVE_ASSET,\n                  asset,\n                })\n              }\n              disabled={disabledButton}\n            >\n              Remove\n            </TextLink>\n          </BalanceRow>\n        ),\n      )}\n    </>\n  );\n};\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  Button,\n  Heading2,\n  Loader,\n  TextLink,\n  Modal,\n  Layout,\n} from \"@stellar/design-system\";\n\nimport { AddAsset } from \"components/AddAsset\";\nimport { AddPresetAsset } from \"components/AddPresetAsset\";\nimport { Balance } from \"components/Balance\";\nimport { ClaimableBalance } from \"components/ClaimableBalance\";\nimport { ConfirmAssetAction } from \"components/ConfirmAssetAction\";\nimport { ToastBanner } from \"components/ToastBanner\";\nimport { UntrustedBalance } from \"components/UntrustedBalance\";\nimport { CSS_MODAL_PARENT_ID } from \"constants/settings\";\n\nimport { fetchAccountAction, resetAccountStatusAction } from \"ducks/account\";\nimport {\n  setActiveAssetAction,\n  setActiveAssetStatusAction,\n  resetActiveAssetAction,\n} from \"ducks/activeAsset\";\nimport {\n  getAllAssetsAction,\n  resetAllAssetsStatusAction,\n} from \"ducks/allAssets\";\nimport {\n  addAssetOverridesAction,\n  resetAssetOverridesStatusAction,\n} from \"ducks/assetOverrides\";\nimport { resetClaimAssetAction } from \"ducks/claimAsset\";\nimport { fetchClaimableBalancesAction } from \"ducks/claimableBalances\";\nimport { resetSep24DepositAssetAction } from \"ducks/sep24DepositAsset\";\nimport { resetTrustAssetAction } from \"ducks/trustAsset\";\nimport {\n  removeUntrustedAssetAction,\n  resetUntrustedAssetStatusAction,\n} from \"ducks/untrustedAssets\";\nimport { resetSep24WithdrawAssetAction } from \"ducks/sep24WithdrawAsset\";\n\nimport { getPresetAssets } from \"helpers/getPresetAssets\";\nimport { searchParam } from \"helpers/searchParam\";\nimport { useRedux } from \"hooks/useRedux\";\nimport {\n  Asset,\n  ActionStatus,\n  AssetActionItem,\n  SearchParams,\n  TransactionStatus,\n} from \"types/types.d\";\n\nexport const Assets = ({\n  onSendPayment,\n}: {\n  onSendPayment: (asset?: Asset) => void;\n}) => {\n  const {\n    account,\n    activeAsset,\n    allAssets,\n    assetOverrides,\n    claimAsset,\n    sep6DepositAsset,\n    sep6WithdrawAsset,\n    sep24DepositAsset,\n    sep24WithdrawAsset,\n    sep31Send,\n    settings,\n    trustAsset,\n    untrustedAssets,\n  } = useRedux(\n    \"account\",\n    \"activeAsset\",\n    \"allAssets\",\n    \"assetOverrides\",\n    \"claimAsset\",\n    \"sep6DepositAsset\",\n    \"sep6WithdrawAsset\",\n    \"sep24DepositAsset\",\n    \"sep24WithdrawAsset\",\n    \"sep31Send\",\n    \"settings\",\n    \"trustAsset\",\n    \"untrustedAssets\",\n  );\n\n  const [activeModal, setActiveModal] = useState(\"\");\n  const [toastMessage, setToastMessage] = useState<string | React.ReactNode>();\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  enum ModalType {\n    ADD_ASSET = \"ADD_ASSET\",\n    ADD_PRESET_ASSET = \"ADD_PRESET_ASSET\",\n    CONFIRM_ACTION = \"CONFIRM_ACTION\",\n  }\n\n  const handleRemoveUntrustedAsset = useCallback(\n    (removeAsset?: string) => {\n      if (removeAsset) {\n        history.push(\n          searchParam.remove(SearchParams.UNTRUSTED_ASSETS, removeAsset),\n        );\n        dispatch(removeUntrustedAssetAction(removeAsset));\n      }\n    },\n    [history, dispatch],\n  );\n\n  const handleRefreshAccount = useCallback(() => {\n    if (account.data?.id) {\n      dispatch(\n        fetchAccountAction({\n          publicKey: account.data.id,\n          secretKey: account.secretKey,\n        }),\n      );\n    }\n  }, [account.data?.id, account.secretKey, dispatch]);\n\n  const handleFetchClaimableBalances = useCallback(() => {\n    if (account.data?.id) {\n      dispatch(fetchClaimableBalancesAction({ publicKey: account.data.id }));\n    }\n  }, [account.data?.id, dispatch]);\n\n  const handleCloseModal = () => {\n    setActiveModal(\"\");\n    dispatch(resetActiveAssetAction());\n  };\n\n  const handleAssetAction = ({\n    assetString,\n    balance,\n    callback,\n    title,\n    description,\n    options,\n  }: AssetActionItem) => {\n    setActiveModal(ModalType.CONFIRM_ACTION);\n    dispatch(\n      setActiveAssetAction({\n        assetString,\n        title,\n        description,\n        callback: () => {\n          setActiveModal(\"\");\n          callback(balance);\n        },\n        options,\n      }),\n    );\n  };\n\n  const setActiveAssetStatusAndToastMessage = useCallback(\n    ({\n      status,\n      message,\n    }: {\n      status: ActionStatus | undefined;\n      message: string | React.ReactNode;\n    }) => {\n      if (!status) {\n        return;\n      }\n\n      if (status === ActionStatus.SUCCESS || status === ActionStatus.ERROR) {\n        dispatch(resetActiveAssetAction());\n      }\n\n      if (\n        status === ActionStatus.PENDING ||\n        status === ActionStatus.NEEDS_INPUT\n      ) {\n        dispatch(setActiveAssetStatusAction(ActionStatus.PENDING));\n        setToastMessage(message);\n      }\n    },\n    [dispatch],\n  );\n\n  useEffect(() => {\n    if (!activeAsset.action) {\n      setToastMessage(undefined);\n    }\n  }, [activeAsset.action]);\n\n  useEffect(() => {\n    if (account.status === ActionStatus.SUCCESS) {\n      dispatch(resetAccountStatusAction());\n      dispatch(getAllAssetsAction());\n    }\n  }, [account.status, dispatch]);\n\n  useEffect(() => {\n    if (allAssets.status === ActionStatus.SUCCESS) {\n      dispatch(resetAllAssetsStatusAction());\n    }\n  }, [allAssets.status, dispatch]);\n\n  useEffect(() => {\n    dispatch(addAssetOverridesAction(settings.assetOverrides));\n  }, [settings.assetOverrides, dispatch]);\n\n  useEffect(() => {\n    if (assetOverrides.status === ActionStatus.SUCCESS) {\n      dispatch(resetAssetOverridesStatusAction());\n      dispatch(getAllAssetsAction());\n    }\n  }, [assetOverrides.status, dispatch]);\n\n  // Trust asset\n  useEffect(() => {\n    if (trustAsset.status === ActionStatus.SUCCESS) {\n      history.push(\n        searchParam.remove(\n          SearchParams.UNTRUSTED_ASSETS,\n          trustAsset.assetString,\n        ),\n      );\n      dispatch(removeUntrustedAssetAction(trustAsset.assetString));\n      dispatch(resetTrustAssetAction());\n      handleRefreshAccount();\n    }\n\n    setActiveAssetStatusAndToastMessage({\n      status: trustAsset.status,\n      message: \"Trust asset in progress\",\n    });\n  }, [\n    trustAsset.status,\n    trustAsset.assetString,\n    handleRefreshAccount,\n    setActiveAssetStatusAndToastMessage,\n    dispatch,\n    history,\n  ]);\n\n  // SEP-6 Deposit asset\n  useEffect(() => {\n    if (\n      sep6DepositAsset.status === ActionStatus.SUCCESS &&\n      sep6DepositAsset.data.trustedAssetAdded\n    ) {\n      handleRemoveUntrustedAsset(sep6DepositAsset.data.trustedAssetAdded);\n    }\n\n    if (sep6DepositAsset.data.currentStatus === TransactionStatus.COMPLETED) {\n      handleRefreshAccount();\n      handleFetchClaimableBalances();\n    }\n\n    setActiveAssetStatusAndToastMessage({\n      status: sep6DepositAsset.status,\n      message: \"SEP-6 deposit in progress\",\n    });\n  }, [\n    sep6DepositAsset.status,\n    sep6DepositAsset.data.currentStatus,\n    sep6DepositAsset.data.trustedAssetAdded,\n    handleRefreshAccount,\n    handleFetchClaimableBalances,\n    handleRemoveUntrustedAsset,\n    setActiveAssetStatusAndToastMessage,\n  ]);\n\n  // SEP-6 Withdraw asset\n  useEffect(() => {\n    if (\n      sep6WithdrawAsset.status === ActionStatus.SUCCESS &&\n      sep6WithdrawAsset.data.currentStatus === TransactionStatus.COMPLETED\n    ) {\n      handleRefreshAccount();\n    }\n\n    setActiveAssetStatusAndToastMessage({\n      status: sep6WithdrawAsset.status,\n      message: \"SEP-6 withdrawal in progress\",\n    });\n  }, [\n    sep6WithdrawAsset.status,\n    sep6WithdrawAsset.data.currentStatus,\n    handleRefreshAccount,\n    setActiveAssetStatusAndToastMessage,\n  ]);\n\n  // SEP-24 Deposit asset\n  useEffect(() => {\n    if (sep24DepositAsset.status === ActionStatus.SUCCESS) {\n      dispatch(resetSep24DepositAssetAction());\n\n      if (sep24DepositAsset.data.trustedAssetAdded) {\n        handleRemoveUntrustedAsset(sep24DepositAsset.data.trustedAssetAdded);\n      }\n\n      if (\n        sep24DepositAsset.data.currentStatus === TransactionStatus.COMPLETED\n      ) {\n        handleRefreshAccount();\n        handleFetchClaimableBalances();\n      }\n    }\n\n    setActiveAssetStatusAndToastMessage({\n      status: sep24DepositAsset.status,\n      message: \"SEP-24 deposit in progress\",\n    });\n  }, [\n    sep24DepositAsset.status,\n    sep24DepositAsset.data.currentStatus,\n    sep24DepositAsset.data.trustedAssetAdded,\n    handleRefreshAccount,\n    handleFetchClaimableBalances,\n    handleRemoveUntrustedAsset,\n    setActiveAssetStatusAndToastMessage,\n    dispatch,\n    history,\n  ]);\n\n  // SEP-24 Withdraw asset\n  useEffect(() => {\n    if (sep24WithdrawAsset.status === ActionStatus.SUCCESS) {\n      dispatch(resetSep24WithdrawAssetAction());\n\n      if (\n        sep24WithdrawAsset.data.currentStatus === TransactionStatus.COMPLETED\n      ) {\n        handleRefreshAccount();\n      }\n    }\n\n    setActiveAssetStatusAndToastMessage({\n      status: sep24WithdrawAsset.status,\n      message: \"SEP-24 withdrawal in progress\",\n    });\n  }, [\n    sep24WithdrawAsset.status,\n    sep24WithdrawAsset.data.currentStatus,\n    handleRefreshAccount,\n    setActiveAssetStatusAndToastMessage,\n    dispatch,\n    history,\n  ]);\n\n  // Claim asset\n  useEffect(() => {\n    if (claimAsset.status === ActionStatus.SUCCESS) {\n      handleRemoveUntrustedAsset(claimAsset.data.trustedAssetAdded);\n      dispatch(resetClaimAssetAction());\n      handleRefreshAccount();\n      handleFetchClaimableBalances();\n    }\n\n    setActiveAssetStatusAndToastMessage({\n      status: claimAsset.status,\n      message: \"Claim asset in progress\",\n    });\n  }, [\n    claimAsset.status,\n    claimAsset.data.trustedAssetAdded,\n    account.data?.id,\n    handleRefreshAccount,\n    handleFetchClaimableBalances,\n    handleRemoveUntrustedAsset,\n    setActiveAssetStatusAndToastMessage,\n    dispatch,\n  ]);\n\n  // SEP-31 Send\n  useEffect(() => {\n    setActiveAssetStatusAndToastMessage({\n      status: sep31Send.status,\n      message: \"SEP-31 send in progress\",\n    });\n  }, [sep31Send.status, setActiveAssetStatusAndToastMessage]);\n\n  // Remove untrusted asset\n  useEffect(() => {\n    if (\n      untrustedAssets.status === ActionStatus.SUCCESS ||\n      untrustedAssets.status === ActionStatus.ERROR\n    ) {\n      dispatch(getAllAssetsAction());\n      dispatch(resetUntrustedAssetStatusAction());\n      dispatch(resetActiveAssetAction());\n    }\n  }, [untrustedAssets.status, dispatch]);\n\n  return (\n    <>\n      {/* Balances */}\n      <div className=\"Section\">\n        <Layout.Inset>\n          <Heading2>Balances</Heading2>\n        </Layout.Inset>\n        <div className=\"Balances\">\n          <Balance onSend={onSendPayment} onAssetAction={handleAssetAction} />\n          <UntrustedBalance onAssetAction={handleAssetAction} />\n        </div>\n\n        <Layout.Inset>\n          <div className=\"BalancesButtons\">\n            <Button\n              onClick={() => setActiveModal(ModalType.ADD_ASSET)}\n              disabled={Boolean(activeAsset.action)}\n            >\n              Add asset\n            </Button>\n\n            {!settings.pubnet && getPresetAssets(allAssets.data).length > 0 && (\n              <TextLink\n                onClick={() => setActiveModal(ModalType.ADD_PRESET_ASSET)}\n                disabled={Boolean(activeAsset.action)}\n              >\n                Select from preset assets\n              </TextLink>\n            )}\n          </div>\n        </Layout.Inset>\n      </div>\n\n      {/* Claimable balances */}\n      <ClaimableBalance onAssetAction={handleAssetAction} />\n\n      <Modal\n        visible={Boolean(activeModal)}\n        onClose={handleCloseModal}\n        parentId={CSS_MODAL_PARENT_ID}\n      >\n        {/* Action confirmation */}\n        {activeModal === ModalType.CONFIRM_ACTION && (\n          <ConfirmAssetAction onClose={handleCloseModal} />\n        )}\n\n        {/* Add asset */}\n        {activeModal === ModalType.ADD_ASSET && (\n          <AddAsset onClose={handleCloseModal} />\n        )}\n\n        {/* Add preset asset */}\n        {activeModal === ModalType.ADD_PRESET_ASSET && (\n          <AddPresetAsset onClose={handleCloseModal} />\n        )}\n      </Modal>\n\n      <ToastBanner parentId=\"app-wrapper\" visible={Boolean(toastMessage)}>\n        <div className=\"Layout__inline\">\n          <div>{toastMessage}</div>\n          <Loader />\n        </div>\n      </ToastBanner>\n    </>\n  );\n};\n","// TODO: move to SDS\nimport React from \"react\";\nimport \"./styles.scss\";\n\ninterface ErrorMessageProps {\n  message: React.ReactNode | undefined;\n  marginTop?: string;\n  marginBottom?: string;\n  textAlign?: \"left\" | \"center\" | \"right\";\n}\n\nexport const ErrorMessage: React.FC<ErrorMessageProps> = ({\n  message,\n  marginTop = \"0\",\n  marginBottom = \"0\",\n  textAlign = \"left\",\n}) => {\n  if (!message) {\n    return null;\n  }\n\n  return (\n    <div\n      className=\"ErrorMessage\"\n      style={{ marginTop, marginBottom, textAlign }}\n    >\n      {message}\n    </div>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  Button,\n  InfoBlock,\n  Input,\n  TextLink,\n  Modal,\n} from \"@stellar/design-system\";\nimport { DataProvider } from \"@stellar/wallet-sdk\";\nimport { StrKey } from \"stellar-sdk\";\n\nimport { ErrorMessage } from \"components/ErrorMessage\";\nimport { fetchAccountAction } from \"ducks/account\";\nimport { resetActiveAssetAction } from \"ducks/activeAsset\";\nimport { sendPaymentAction, resetSendPaymentAction } from \"ducks/sendPayment\";\nimport { getNetworkConfig } from \"helpers/getNetworkConfig\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { ActionStatus, Asset, AssetType } from \"types/types.d\";\n\nexport const SendPayment = ({\n  asset,\n  onClose,\n}: {\n  asset?: Asset;\n  onClose: () => void;\n}) => {\n  const { account, sendPayment, settings } = useRedux(\n    \"account\",\n    \"sendPayment\",\n    \"settings\",\n  );\n  const { data, secretKey } = account;\n  const dispatch = useDispatch();\n\n  // Form data\n  const [destination, setDestination] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [assetCode, setAssetCode] = useState(asset?.assetCode);\n  const [assetIssuer, setAssetIssuer] = useState(asset?.assetIssuer || \"\");\n  const [isDestinationFunded, setIsDestinationFunded] = useState(true);\n\n  const resetFormState = () => {\n    setDestination(\"\");\n    setAmount(\"\");\n    setAssetCode(\"\");\n    setAssetIssuer(\"\");\n    setIsDestinationFunded(true);\n  };\n\n  useEffect(\n    () => () => {\n      // Reset when component unmounts\n      dispatch(resetSendPaymentAction());\n      dispatch(resetActiveAssetAction());\n      resetFormState();\n    },\n    [dispatch],\n  );\n\n  useEffect(() => {\n    if (sendPayment.status === ActionStatus.SUCCESS && data?.id) {\n      dispatch(\n        fetchAccountAction({\n          publicKey: data.id,\n          secretKey,\n        }),\n      );\n      dispatch(resetSendPaymentAction());\n      dispatch(resetActiveAssetAction());\n      resetFormState();\n      onClose();\n    }\n  }, [sendPayment.status, secretKey, data?.id, dispatch, onClose]);\n\n  const checkAndSetIsDestinationFunded = async () => {\n    if (!destination || !StrKey.isValidEd25519PublicKey(destination)) {\n      return;\n    }\n\n    const dataProvider = new DataProvider({\n      serverUrl: getNetworkConfig(settings.pubnet).url,\n      accountOrKey: destination,\n      networkPassphrase: getNetworkConfig(settings.pubnet).network,\n    });\n\n    setIsDestinationFunded(await dataProvider.isAccountFunded());\n  };\n\n  const handleSubmit = () => {\n    if (data?.id) {\n      const params = {\n        destination,\n        isDestinationFunded,\n        amount,\n        assetCode,\n        assetIssuer,\n        publicKey: data.id,\n      };\n\n      dispatch(sendPaymentAction(params));\n    }\n  };\n\n  return (\n    <>\n      <Modal.Heading>Send payment</Modal.Heading>\n\n      <Modal.Body>\n        <Input\n          id=\"send-destination\"\n          label=\"Destination\"\n          value={destination}\n          onChange={(e) => setDestination(e.target.value)}\n          onBlur={() => {\n            checkAndSetIsDestinationFunded();\n          }}\n        />\n        <Input\n          id=\"send-amount\"\n          label=\"Amount\"\n          type=\"number\"\n          value={amount}\n          onChange={(e) => setAmount(e.target.value)}\n        />\n        <Input\n          id=\"send-asset-code\"\n          label=\"Asset code\"\n          value={assetCode}\n          onChange={(e) => setAssetCode(e.target.value)}\n        />\n        {asset?.assetType !== AssetType.NATIVE && (\n          <Input\n            id=\"send-asset-issuer\"\n            label=\"Asset issuer\"\n            value={assetIssuer}\n            onChange={(e) => setAssetIssuer(e.target.value)}\n          />\n        )}\n\n        {!isDestinationFunded && (\n          <InfoBlock>\n            The destination account doesn’t exist. A create account operation\n            will be used to create this account.{\" \"}\n            <TextLink href=\"https://developers.stellar.org/docs/tutorials/create-account/\">\n              Learn more about account creation\n            </TextLink>\n          </InfoBlock>\n        )}\n        <ErrorMessage message={sendPayment.errorString} />\n      </Modal.Body>\n\n      <Modal.Footer>\n        <Button\n          onClick={handleSubmit}\n          isLoading={sendPayment.status === ActionStatus.PENDING}\n        >\n          Submit\n        </Button>\n      </Modal.Footer>\n    </>\n  );\n};\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  Button,\n  Select,\n  TextLink,\n  Modal,\n  Heading3,\n  Input,\n  DetailsTooltip,\n} from \"@stellar/design-system\";\n\nimport { CSS_MODAL_PARENT_ID } from \"constants/settings\";\nimport { resetActiveAssetAction } from \"ducks/activeAsset\";\nimport {\n  resetSep6DepositAction,\n  submitSep6DepositFields,\n  sep6DepositAction,\n} from \"ducks/sep6DepositAsset\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { ActionStatus } from \"types/types.d\";\n\nexport const Sep6Deposit = () => {\n  const { sep6DepositAsset } = useRedux(\"sep6DepositAsset\");\n  const {\n    data: { depositResponse },\n  } = sep6DepositAsset;\n\n  interface FormData {\n    amount?: string;\n    depositType: {\n      type: string;\n    };\n    infoFields: {\n      [key: string]: string;\n    };\n    customerFields: {\n      [key: string]: string;\n    };\n  }\n\n  const formInitialState: FormData = {\n    amount: \"\",\n    depositType: {\n      type: \"\",\n    },\n    infoFields: {},\n    customerFields: {},\n  };\n\n  const [formData, setFormData] = useState<FormData>(formInitialState);\n  const dispatch = useDispatch();\n\n  const depositTypeChoices = useMemo(\n    () => sep6DepositAsset.data.infoFields?.type?.choices || [],\n    [sep6DepositAsset],\n  );\n\n  useEffect(() => {\n    if (sep6DepositAsset.status === ActionStatus.NEEDS_INPUT) {\n      setFormData({\n        amount: \"\",\n        depositType: {\n          type: depositTypeChoices[0],\n        },\n        infoFields: {},\n        customerFields: {},\n      });\n    }\n  }, [sep6DepositAsset.status, depositTypeChoices, dispatch]);\n\n  const resetLocalState = () => {\n    setFormData(formInitialState);\n  };\n\n  const handleClose = () => {\n    dispatch(resetSep6DepositAction());\n    dispatch(resetActiveAssetAction());\n    resetLocalState();\n  };\n\n  const handleDepositTypeChange = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    const { id, value } = event.target;\n\n    const updatedState = {\n      ...formData,\n      depositType: {\n        ...formData.depositType,\n        [id]: value,\n      },\n    };\n\n    setFormData(updatedState);\n  };\n\n  const handleInfoFieldChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const { id, value } = event.target;\n\n    const updatedState = {\n      ...formData,\n      infoFields: {\n        ...formData.infoFields,\n        [id]: value,\n      },\n    };\n\n    setFormData(updatedState);\n  };\n\n  const handleCustomerFieldChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const { id, value } = event.target;\n\n    const updatedState = {\n      ...formData,\n      customerFields: {\n        ...formData.customerFields,\n        [id]: value,\n      },\n    };\n\n    setFormData(updatedState);\n  };\n\n  const handleAmountChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { id, value } = event.target;\n\n    const updatedState = {\n      ...formData,\n      [id]: value.toString(),\n    };\n\n    setFormData(updatedState);\n  };\n\n  const handleSubmit = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    event.preventDefault();\n    dispatch(submitSep6DepositFields({ ...formData }));\n  };\n\n  const renderMinMaxAmount = () => {\n    const { minAmount, maxAmount } = sep6DepositAsset.data;\n\n    if (minAmount === 0 && maxAmount === 0) {\n      return null;\n    }\n\n    return `Min: ${minAmount} | Max: ${maxAmount}`;\n  };\n\n  if (sep6DepositAsset.status === ActionStatus.NEEDS_INPUT) {\n    return (\n      <Modal visible onClose={handleClose} parentId={CSS_MODAL_PARENT_ID}>\n        <Modal.Heading>SEP-6 Deposit Info</Modal.Heading>\n        <Modal.Body>\n          <div className=\"vertical-spacing\">\n            <Input\n              id=\"amount\"\n              // TODO: change type in SDS\n              // @ts-ignore\n              label={\n                <DetailsTooltip\n                  details={\n                    <>\n                      The amount of the asset the user would like to deposit\n                      with the anchor. This field may be necessary for the\n                      anchor to determine what KYC information is necessary to\n                      collect.{\" \"}\n                      <TextLink href=\"https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0006.md#1-success-no-additional-information-needed\">\n                        Learn more\n                      </TextLink>\n                    </>\n                  }\n                  isInline\n                  tooltipPosition={DetailsTooltip.tooltipPosition.left}\n                >\n                  <>Amount (optional)</>\n                </DetailsTooltip>\n              }\n              onChange={handleAmountChange}\n              type=\"number\"\n              note={renderMinMaxAmount()}\n            />\n          </div>\n\n          <Heading3>\n            <DetailsTooltip\n              details={\n                <>\n                  These are the fields the receiving anchor requires. The\n                  sending client obtains them from the /info endpoint.{\" \"}\n                  <TextLink href=\"https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0006.md#info\">\n                    Learn more\n                  </TextLink>\n                </>\n              }\n              isInline\n              tooltipPosition={DetailsTooltip.tooltipPosition.left}\n            >\n              <>SEP-6 Required Info</>\n            </DetailsTooltip>\n          </Heading3>\n          <div className=\"vertical-spacing\">\n            {Object.entries(sep6DepositAsset.data.infoFields || {}).map(\n              ([id, input]) =>\n                id === \"type\" ? (\n                  <div key={id}>\n                    <Select\n                      label={input.description}\n                      id={id}\n                      key={id}\n                      onChange={handleDepositTypeChange}\n                    >\n                      {depositTypeChoices.map((choice: string) => (\n                        <option key={choice} value={choice}>\n                          {choice}\n                        </option>\n                      ))}\n                    </Select>\n                  </div>\n                ) : (\n                  <Input\n                    key={id}\n                    id={id}\n                    label={input.description}\n                    required\n                    onChange={handleInfoFieldChange}\n                  />\n                ),\n            )}\n          </div>\n\n          {Object.keys(sep6DepositAsset.data.customerFields).length ? (\n            <Heading3>\n              <DetailsTooltip\n                details={\n                  <>\n                    These are the fields the receiving anchor requires. The\n                    sending client obtains them from the /customer endpoint.{\" \"}\n                    <TextLink href=\"https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0012.md#customer-get\">\n                      Learn more\n                    </TextLink>\n                  </>\n                }\n                isInline\n              >\n                <>SEP-12 Required Info</>\n              </DetailsTooltip>\n            </Heading3>\n          ) : null}\n          <div className=\"vertical-spacing\">\n            {Object.entries(sep6DepositAsset.data.customerFields || {}).map(\n              ([id, input]) => (\n                <Input\n                  key={id}\n                  id={id}\n                  label={input.description}\n                  required\n                  onChange={handleCustomerFieldChange}\n                />\n              ),\n            )}\n          </div>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button onClick={handleSubmit}>Submit</Button>\n          <Button onClick={handleClose} variant={Button.variant.secondary}>\n            Cancel\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n\n  if (sep6DepositAsset.status === ActionStatus.CAN_PROCEED) {\n    return (\n      <Modal visible onClose={handleClose} parentId={CSS_MODAL_PARENT_ID}>\n        <Modal.Heading>SEP-6 Deposit Success</Modal.Heading>\n\n        <Modal.Body>\n          <p>{depositResponse.how}</p>\n\n          {depositResponse.extra_info?.message && (\n            <p>{depositResponse.extra_info.message}</p>\n          )}\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button onClick={() => dispatch(sep6DepositAction())}>Proceed</Button>\n          <Button onClick={handleClose} variant={Button.variant.secondary}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n\n  return null;\n};\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  Button,\n  Input,\n  Select,\n  TextLink,\n  Modal,\n  Heading3,\n  DetailsTooltip,\n} from \"@stellar/design-system\";\nimport { ErrorMessage } from \"components/ErrorMessage\";\nimport { CSS_MODAL_PARENT_ID } from \"constants/settings\";\nimport { resetActiveAssetAction } from \"ducks/activeAsset\";\nimport {\n  resetSep6WithdrawAction,\n  submitSep6WithdrawFields,\n  sep6WithdrawAction,\n} from \"ducks/sep6WithdrawAsset\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { shortenStellarKey } from \"helpers/shortenStellarKey\";\nimport { ActionStatus, AnyObject } from \"types/types.d\";\n\nexport const Sep6Withdraw = () => {\n  const { sep6WithdrawAsset } = useRedux(\"sep6WithdrawAsset\");\n  const {\n    data: { assetCode, transactionResponse, withdrawResponse },\n  } = sep6WithdrawAsset;\n\n  interface FormData {\n    withdrawType: {\n      type: string;\n    };\n    customerFields: AnyObject;\n    infoFields: AnyObject;\n  }\n\n  const formInitialState: FormData = {\n    withdrawType: {\n      type: \"\",\n    },\n    customerFields: {},\n    infoFields: {},\n  };\n\n  const [formData, setFormData] = useState<FormData>(formInitialState);\n  const [withdrawAmount, setWithdrawAmount] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const withdrawTypes = useMemo(\n    () => sep6WithdrawAsset.data.withdrawTypes?.types || { fields: {} },\n    [sep6WithdrawAsset],\n  );\n\n  const [activeWithdrawType, setActiveWithdrawType] = useState(\n    Object.keys(withdrawTypes)[0],\n  );\n\n  const withdrawTypesArr = useMemo(\n    () => Object.entries(withdrawTypes),\n    [withdrawTypes],\n  );\n\n  useEffect(() => {\n    if (sep6WithdrawAsset.status === ActionStatus.NEEDS_INPUT) {\n      const initialWithdrawType = withdrawTypesArr[0][0];\n      setFormData({\n        withdrawType: {\n          type: initialWithdrawType,\n        },\n        customerFields: {},\n        infoFields: {},\n      });\n      setActiveWithdrawType(initialWithdrawType);\n    }\n  }, [sep6WithdrawAsset.status, withdrawTypesArr, dispatch]);\n\n  const resetLocalState = () => {\n    setFormData(formInitialState);\n  };\n\n  const handleClose = () => {\n    dispatch(resetSep6WithdrawAction());\n    dispatch(resetActiveAssetAction());\n    resetLocalState();\n  };\n\n  const handleWithdrawTypeChange = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    const { value } = event.target;\n    setActiveWithdrawType(value);\n    setFormData({\n      ...formData,\n      withdrawType: {\n        type: value,\n      },\n    });\n  };\n\n  const handleInfoFieldChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const { id, value } = event.target;\n\n    const updatedState = {\n      ...formData,\n      infoFields: {\n        ...formData.infoFields,\n        [id]: value,\n      },\n    };\n\n    setFormData(updatedState);\n  };\n\n  const handleCustomerFieldChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const { id, value } = event.target;\n\n    const updatedState = {\n      ...formData,\n      customerFields: {\n        ...formData.customerFields,\n        [id]: value,\n      },\n    };\n\n    setFormData(updatedState);\n  };\n\n  const handleFieldsSubmit = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    event.preventDefault();\n    dispatch(submitSep6WithdrawFields({ ...formData }));\n  };\n\n  const handleAmountFieldChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const { value } = event.target;\n\n    setWithdrawAmount(value);\n  };\n\n  const handleAmountSubmit = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    event.preventDefault();\n    dispatch(sep6WithdrawAction(withdrawAmount));\n  };\n\n  if (sep6WithdrawAsset.status === ActionStatus.NEEDS_INPUT) {\n    return (\n      <Modal visible onClose={handleClose} parentId={CSS_MODAL_PARENT_ID}>\n        <Modal.Heading>SEP-6 Withdrawal Info</Modal.Heading>\n\n        <Modal.Body>\n          <Heading3>\n            <DetailsTooltip\n              details={\n                <>\n                  These are the fields the receiving anchor requires. The\n                  sending client obtains them from the /info endpoint.{\" \"}\n                  <TextLink href=\"https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0006.md#info\">\n                    Learn more\n                  </TextLink>\n                </>\n              }\n              isInline\n              tooltipPosition={DetailsTooltip.tooltipPosition.left}\n            >\n              <>SEP-6 Required Info</>\n            </DetailsTooltip>\n          </Heading3>\n\n          <div className=\"vertical-spacing\">\n            <Select\n              label=\"Withdrawal Type\"\n              id=\"withdrawal-type\"\n              onChange={handleWithdrawTypeChange}\n            >\n              {withdrawTypesArr.map(([type]) => (\n                <option key={type} value={type}>\n                  {type}\n                </option>\n              ))}\n            </Select>\n            {Object.entries(\n              withdrawTypes[activeWithdrawType]?.fields || {},\n            ).map(([field, fieldInfo]) => (\n              <Input\n                key={field}\n                id={field}\n                label={fieldInfo?.description}\n                required\n                onChange={handleInfoFieldChange}\n              />\n            ))}\n          </div>\n          {Object.keys(sep6WithdrawAsset.data.fields).length ? (\n            <Heading3>\n              <DetailsTooltip\n                details={\n                  <>\n                    These are the fields the receiving anchor requires. The\n                    sending client obtains them from the /customer endpoint.{\" \"}\n                    <TextLink href=\"https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0012.md#customer-get\">\n                      Learn more\n                    </TextLink>\n                  </>\n                }\n                isInline\n              >\n                <>SEP-12 Required Info</>\n              </DetailsTooltip>\n            </Heading3>\n          ) : null}\n\n          <div className=\"vertical-spacing\">\n            {Object.entries(sep6WithdrawAsset.data.fields || {}).map(\n              ([field, fieldInfo]) => (\n                <Input\n                  key={field}\n                  id={field}\n                  label={fieldInfo?.description}\n                  required\n                  onChange={handleCustomerFieldChange}\n                />\n              ),\n            )}\n          </div>\n\n          <ErrorMessage message={sep6WithdrawAsset.errorString} />\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button onClick={handleFieldsSubmit}>Submit</Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n\n  if (sep6WithdrawAsset.status === ActionStatus.CAN_PROCEED) {\n    return (\n      <Modal visible onClose={handleClose} parentId={CSS_MODAL_PARENT_ID}>\n        <Modal.Heading>Payment Sending</Modal.Heading>\n\n        <Modal.Body>\n          <div className=\"vertical-spacing\">\n            <strong>Sending Payment To: </strong>\n\n            {shortenStellarKey(withdrawResponse.account_id)}\n          </div>\n\n          <Input\n            id=\"withdraw-amount\"\n            label=\"Amount to Withdraw\"\n            required\n            onChange={handleAmountFieldChange}\n          />\n          {withdrawResponse.min_amount || withdrawResponse.max_amount ? (\n            <div className=\"vertical-spacing\">\n              {withdrawResponse.min_amount && (\n                <p>\n                  <strong>Min Amount: </strong>\n                  {withdrawResponse.min_amount}\n                </p>\n              )}\n              {withdrawResponse.max_amount && (\n                <p>\n                  <strong>Max Amount: </strong>\n                  {withdrawResponse.max_amount}\n                </p>\n              )}\n            </div>\n          ) : null}\n\n          {withdrawResponse.id && (\n            <div className=\"vertical-spacing\">\n              <strong>Transaction ID: </strong>\n              {withdrawResponse.id}\n            </div>\n          )}\n          {withdrawResponse.extra_info?.message && (\n            <div className=\"vertical-spacing\">\n              {withdrawResponse.extra_info.message}\n            </div>\n          )}\n\n          {withdrawResponse.memo_type && (\n            <div className=\"vertical-spacing\">\n              <strong>Memo Type: </strong>\n\n              {withdrawResponse.memo_type}\n            </div>\n          )}\n\n          {withdrawResponse.memo && (\n            <div className=\"vertical-spacing\">\n              <strong>Memo: </strong>\n\n              {withdrawResponse.memo}\n            </div>\n          )}\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button onClick={handleAmountSubmit}>Submit</Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n\n  if (sep6WithdrawAsset.status === ActionStatus.SUCCESS) {\n    return (\n      <Modal visible onClose={handleClose} parentId={CSS_MODAL_PARENT_ID}>\n        <Modal.Heading>SEP-6 Withdrawal Completed</Modal.Heading>\n\n        <Modal.Body>\n          {transactionResponse.to && (\n            <div className=\"vertical-spacing\">\n              <strong>Account Withdrawn To: </strong>\n              <p>{transactionResponse.to}</p>\n              <p>{transactionResponse.external_extra_text}</p>\n            </div>\n          )}\n\n          {transactionResponse.more_info_url && (\n            <div className=\"vertical-spacing\">\n              <strong>More Info: </strong>\n              <p>{transactionResponse.more_info_url}</p>\n            </div>\n          )}\n          {transactionResponse.amount_in && (\n            <div className=\"vertical-spacing\">\n              Amount Withdrawn: {transactionResponse.amount_in}\n              <p>\n                {transactionResponse.amount_fee && (\n                  <>Fee: {transactionResponse.amount_fee}</>\n                )}\n              </p>\n              <p>\n                {transactionResponse.amount_out && (\n                  <strong>\n                    Total Amount Out: {transactionResponse.amount_out}{\" \"}\n                    {assetCode}\n                  </strong>\n                )}\n              </p>\n            </div>\n          )}\n        </Modal.Body>\n      </Modal>\n    );\n  }\n\n  return null;\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Button, Input, Modal } from \"@stellar/design-system\";\nimport { ErrorMessage } from \"components/ErrorMessage\";\nimport { CSS_MODAL_PARENT_ID } from \"constants/settings\";\nimport {\n  initiateSep8SendAction,\n  sep8ReviseTransactionAction,\n  sep8SendActionRequiredFieldsAction,\n} from \"ducks/sep8Send\";\nimport { Sep9Field, Sep9FieldType } from \"helpers/Sep9Fields\";\nimport { useRedux } from \"hooks/useRedux\";\nimport {\n  ActionStatus,\n  Sep8ActionRequiredResultType,\n  Sep8Step,\n} from \"types/types.d\";\n\nexport const Sep8ActionRequiredForm = ({\n  onClose,\n}: {\n  onClose: () => void;\n}) => {\n  const { account, sep8Send } = useRedux(\"account\", \"sep8Send\");\n  const [fieldValues, setFieldValues] = useState<{\n    [key: string]: string | File;\n  }>({});\n  const { actionFields, message, actionMethod, actionUrl } =\n    sep8Send.data.actionRequiredInfo;\n  const { nextUrl, result } = sep8Send.data.actionRequiredResult;\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const shouldOpenActionUrl = actionMethod === \"GET\";\n    if (\n      shouldOpenActionUrl ||\n      sep8Send.data.sep8Step === Sep8Step.SENT_ACTION_REQUIRED_FIELDS\n    ) {\n      if (shouldOpenActionUrl) {\n        window.open(actionUrl, \"_blank\");\n      }\n\n      if (nextUrl && result === Sep8ActionRequiredResultType.FOLLOW_NEXT_URL) {\n        window.open(nextUrl, \"_blank\");\n\n        if (account.data) {\n          dispatch(\n            initiateSep8SendAction({\n              assetCode: sep8Send.data.assetCode,\n              assetIssuer: sep8Send.data.assetIssuer,\n              homeDomain: sep8Send.data.homeDomain,\n            }),\n          );\n        }\n      }\n\n      if (\n        account.data &&\n        result === Sep8ActionRequiredResultType.NO_FURTHER_ACTION_REQUIRED\n      ) {\n        const params = {\n          destination: sep8Send.data.revisedTransaction.destination,\n          isDestinationFunded: true,\n          amount: sep8Send.data.revisedTransaction.amount,\n          assetCode: sep8Send.data.assetCode,\n          assetIssuer: sep8Send.data.assetIssuer,\n          publicKey: account.data?.id,\n          approvalServer: sep8Send.data.approvalServer,\n        };\n\n        dispatch(sep8ReviseTransactionAction(params));\n      }\n    }\n  }, [\n    actionMethod,\n    actionUrl,\n    account.data,\n    dispatch,\n    nextUrl,\n    result,\n    sep8Send.data.approvalServer,\n    sep8Send.data.assetCode,\n    sep8Send.data.assetIssuer,\n    sep8Send.data.homeDomain,\n    sep8Send.data.revisedTransaction.amount,\n    sep8Send.data.revisedTransaction.destination,\n    sep8Send.data.sep8Step,\n  ]);\n\n  const handleSubmitActionRequiredFields = () => {\n    dispatch(\n      sep8SendActionRequiredFieldsAction({\n        actionFields: fieldValues,\n        actionMethod,\n        actionUrl,\n      }),\n    );\n  };\n\n  const handleOnChangeField = ({\n    fieldName,\n    event,\n  }: {\n    fieldName: string;\n    event: React.ChangeEvent<HTMLInputElement>;\n  }) => {\n    const files = event.target.files;\n    const fieldValue = files?.length ? files[0] : event.target.value;\n    const buffFieldValue = { ...fieldValues };\n    buffFieldValue[fieldName] = fieldValue;\n    setFieldValues(buffFieldValue);\n  };\n\n  const getInputParams = ({ sep9Field }: { sep9Field: Sep9Field }) => {\n    const { name: fieldName, type: fieldType } = sep9Field;\n\n    let inputValue: { [key: string]: any } = {\n      value: fieldValues[fieldName] || \"\",\n    };\n    let inputType = \"text\";\n\n    switch (fieldType) {\n      case Sep9FieldType.DATE:\n        inputType = \"date\";\n        break;\n\n      case Sep9FieldType.BINARY:\n        inputType = \"file\";\n        inputValue = {};\n        break;\n\n      case Sep9FieldType.NUMBER:\n        inputType = \"number\";\n        break;\n\n      default:\n        break;\n    }\n    if (fieldName === \"email_address\") {\n      inputType = \"email\";\n    }\n\n    return { inputType, inputValue };\n  };\n\n  const renderSendPayment = () => (\n    <>\n      <Modal.Heading>SEP-8 Action Required</Modal.Heading>\n\n      <Modal.Body>\n        <div className=\"ModalMessage\">\n          <p>{message}</p>\n        </div>\n\n        <div className=\"ModalMessage\">\n          <p>The following information is needed before we can proceed:</p>\n        </div>\n\n        {actionFields?.map((sep9Field) => {\n          const { name: fieldName, description } = sep9Field;\n          const { inputType, inputValue } = getInputParams({ sep9Field });\n\n          return (\n            <Input\n              key={fieldName}\n              id={`sep8-action-field-${fieldName}`}\n              type={inputType}\n              label={fieldName}\n              onChange={(event) => handleOnChangeField({ fieldName, event })}\n              multiple={false}\n              note={description}\n              {...inputValue}\n            />\n          );\n        })}\n\n        <ErrorMessage message={sep8Send.errorString} />\n      </Modal.Body>\n\n      <Modal.Footer>\n        <Button\n          onClick={handleSubmitActionRequiredFields}\n          isLoading={sep8Send.status === ActionStatus.PENDING}\n        >\n          Submit\n        </Button>\n      </Modal.Footer>\n    </>\n  );\n\n  return (\n    <Modal onClose={onClose} visible parentId={CSS_MODAL_PARENT_ID}>\n      {renderSendPayment()}\n    </Modal>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { StrKey } from \"stellar-sdk\";\nimport {\n  Button,\n  InfoBlock,\n  Input,\n  TextLink,\n  Modal,\n} from \"@stellar/design-system\";\nimport { DataProvider } from \"@stellar/wallet-sdk\";\nimport { ErrorMessage } from \"components/ErrorMessage\";\nimport { CSS_MODAL_PARENT_ID } from \"constants/settings\";\nimport {\n  sep8ClearErrorAction,\n  sep8ReviseTransactionAction,\n} from \"ducks/sep8Send\";\nimport { getNetworkConfig } from \"helpers/getNetworkConfig\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { ActionStatus, Sep8Step } from \"types/types.d\";\n\nexport const Sep8Approval = ({ onClose }: { onClose: () => void }) => {\n  const { account, sep8Send, settings } = useRedux(\n    \"account\",\n    \"sep8Send\",\n    \"settings\",\n  );\n  const { approvalCriteria, approvalServer, assetCode, assetIssuer } =\n    sep8Send.data;\n  const [amount, setAmount] = useState(sep8Send.data.revisedTransaction.amount);\n  const [destination, setDestination] = useState(\n    sep8Send.data.revisedTransaction.destination,\n  );\n  const [isDestinationFunded, setIsDestinationFunded] = useState(true);\n  const dispatch = useDispatch();\n\n  const resetFormState = () => {\n    setDestination(\"\");\n    setAmount(\"\");\n    setIsDestinationFunded(true);\n  };\n\n  useEffect(() => {\n    if (sep8Send.data.sep8Step === Sep8Step.PENDING) {\n      onClose();\n    }\n  }, [onClose, sep8Send.data.sep8Step]);\n\n  // user interaction handlers\n  const handleSubmitPayment = () => {\n    if (account.data?.id) {\n      const params = {\n        destination,\n        isDestinationFunded,\n        amount,\n        assetCode,\n        assetIssuer,\n        publicKey: account.data?.id,\n        approvalServer,\n      };\n\n      dispatch(sep8ReviseTransactionAction(params));\n    }\n  };\n\n  const handleCloseModal = () => {\n    resetFormState();\n    onClose();\n  };\n\n  // helper function(s)\n  const checkAndSetIsDestinationFunded = async () => {\n    if (!destination || !StrKey.isValidEd25519PublicKey(destination)) {\n      return;\n    }\n\n    const dataProvider = new DataProvider({\n      serverUrl: getNetworkConfig(settings.pubnet).url,\n      accountOrKey: destination,\n      networkPassphrase: getNetworkConfig(settings.pubnet).network,\n    });\n\n    setIsDestinationFunded(await dataProvider.isAccountFunded());\n  };\n\n  const renderApprovePayment = () => (\n    <>\n      <Modal.Heading>Send SEP-8 Payment</Modal.Heading>\n\n      <Modal.Body>\n        <Input\n          id=\"send-destination\"\n          label=\"Destination\"\n          value={destination}\n          onChange={(e) => {\n            setDestination(e.target.value);\n            if (sep8Send.errorString) {\n              dispatch(sep8ClearErrorAction());\n            }\n          }}\n          onBlur={checkAndSetIsDestinationFunded}\n        />\n\n        <Input\n          id=\"send-amount\"\n          label=\"Amount\"\n          type=\"number\"\n          value={amount}\n          onChange={(e) => {\n            setAmount(e.target.value);\n            if (sep8Send.errorString) {\n              dispatch(sep8ClearErrorAction());\n            }\n          }}\n        />\n\n        <Input\n          id=\"send-asset-code\"\n          label=\"Asset code\"\n          value={assetCode}\n          disabled\n        />\n\n        <Input\n          id=\"send-asset-issuer\"\n          label=\"Asset issuer\"\n          value={assetIssuer}\n          disabled\n        />\n\n        <InfoBlock>\n          <strong>Approval criteria: </strong>\n          {approvalCriteria}\n        </InfoBlock>\n\n        {!isDestinationFunded && (\n          <InfoBlock>\n            The destination account doesn’t exist. A create account operation\n            will be used to create this account.{\" \"}\n            <TextLink href=\"https://developers.stellar.org/docs/tutorials/create-account/\">\n              Learn more about account creation\n            </TextLink>\n          </InfoBlock>\n        )}\n\n        <ErrorMessage message={sep8Send.errorString} />\n      </Modal.Body>\n\n      <Modal.Footer>\n        <Button\n          onClick={handleSubmitPayment}\n          isLoading={sep8Send.status === ActionStatus.PENDING}\n        >\n          Submit\n        </Button>\n      </Modal.Footer>\n    </>\n  );\n\n  return (\n    <Modal onClose={handleCloseModal} visible parentId={CSS_MODAL_PARENT_ID}>\n      {renderApprovePayment()}\n    </Modal>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Transaction, TransactionBuilder } from \"stellar-sdk\";\nimport { Button, Checkbox, Modal, Heading3 } from \"@stellar/design-system\";\nimport { ErrorMessage } from \"components/ErrorMessage\";\nimport { Json } from \"components/Json\";\nimport { CSS_MODAL_PARENT_ID } from \"constants/settings\";\nimport { fetchAccountAction } from \"ducks/account\";\nimport { sep8SubmitRevisedTransactionAction } from \"ducks/sep8Send\";\nimport { getNetworkConfig } from \"helpers/getNetworkConfig\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { ActionStatus, Sep8Step } from \"types/types.d\";\n\nexport const Sep8Review = ({ onClose }: { onClose: () => void }) => {\n  const { account, sep8Send, settings } = useRedux(\n    \"account\",\n    \"sep8Send\",\n    \"settings\",\n  );\n  const [submittedTx, setSubmittedTx] = useState<Transaction | undefined>();\n  const [revisedTx, setRevisedTx] = useState<Transaction | undefined>();\n  const [isApproved, setIsApproved] = useState(false);\n  const dispatch = useDispatch();\n  const { revisedTxXdr, submittedTxXdr } = sep8Send.data.revisedTransaction;\n  const { sep8Step } = sep8Send.data;\n\n  // user interaction handlers\n  const handleSubmitPayment = () => {\n    if (revisedTxXdr && isApproved) {\n      dispatch(sep8SubmitRevisedTransactionAction());\n    }\n  };\n\n  // use effect: complete action, close modal and refresh account balances\n  useEffect(() => {\n    if (sep8Step === Sep8Step.COMPLETE && account.data?.id) {\n      dispatch(\n        fetchAccountAction({\n          publicKey: account.data.id,\n          secretKey: account.secretKey,\n        }),\n      );\n      onClose();\n    }\n  }, [account.data?.id, account.secretKey, dispatch, onClose, sep8Step]);\n\n  // use effect: parse transaction XDRs\n  useEffect(() => {\n    const networkPassphrase = getNetworkConfig(settings.pubnet).network;\n\n    if (submittedTxXdr) {\n      const tx = TransactionBuilder.fromXDR(\n        submittedTxXdr,\n        networkPassphrase,\n      ) as Transaction;\n      setSubmittedTx(tx);\n    }\n\n    if (revisedTxXdr) {\n      const tx = TransactionBuilder.fromXDR(\n        revisedTxXdr,\n        networkPassphrase,\n      ) as Transaction;\n      setRevisedTx(tx);\n    }\n  }, [revisedTxXdr, submittedTxXdr, settings.pubnet]);\n\n  const renderSendPayment = () => (\n    <>\n      <Modal.Heading>Review & Submit SEP-8 Transaction</Modal.Heading>\n\n      <Modal.Body>\n        <div className=\"ModalMessage\">\n          <p>\n            {sep8Send.data.actionRequiredResult.result &&\n              \"KYC has been approved. \"}\n            Please review the updated operations before submitting your SEP-8\n            payment.\n          </p>\n        </div>\n\n        {submittedTx?.operations && (\n          <>\n            <Heading3>Original transaction operations</Heading3>\n            <Json src={submittedTx.operations} />\n          </>\n        )}\n\n        {revisedTx?.operations && (\n          <>\n            <Heading3>Revised transaction operations</Heading3>\n            <Json src={revisedTx.operations} />\n          </>\n        )}\n\n        <ErrorMessage marginBottom=\"1rem\" message={sep8Send.errorString} />\n\n        <Checkbox\n          id=\"sep8-send-approve\"\n          label=\"I approve executing these operations.\"\n          checked={isApproved}\n          onChange={() => {\n            setIsApproved(!isApproved);\n          }}\n          disabled={sep8Send.status === ActionStatus.PENDING}\n        />\n      </Modal.Body>\n\n      <Modal.Footer>\n        <Button\n          onClick={handleSubmitPayment}\n          disabled={!isApproved}\n          isLoading={sep8Send.status === ActionStatus.PENDING}\n        >\n          Submit\n        </Button>\n      </Modal.Footer>\n    </>\n  );\n\n  return (\n    <Modal onClose={onClose} visible parentId={CSS_MODAL_PARENT_ID}>\n      {renderSendPayment()}\n    </Modal>\n  );\n};\n","import { useDispatch } from \"react-redux\";\nimport { Sep8ActionRequiredForm } from \"components/Sep8Send/Sep8ActionRequiredForm\";\nimport { Sep8Approval } from \"components/Sep8Send/Sep8Approval\";\nimport { Sep8Review } from \"components/Sep8Send/Sep8Review\";\nimport { resetActiveAssetAction } from \"ducks/activeAsset\";\nimport { resetSep8SendAction } from \"ducks/sep8Send\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { Sep8Step } from \"types/types.d\";\n\nexport const Sep8Send = () => {\n  const { sep8Send } = useRedux(\"sep8Send\");\n  const sep8Step = sep8Send.data.sep8Step;\n  const dispatch = useDispatch();\n\n  const onClose = () => {\n    dispatch(resetActiveAssetAction());\n    dispatch(resetSep8SendAction());\n  };\n\n  return (\n    <>\n      {[Sep8Step.STARTING, Sep8Step.PENDING].includes(sep8Step) && (\n        <Sep8Approval onClose={onClose} />\n      )}\n\n      {[Sep8Step.TRANSACTION_REVISED, Sep8Step.COMPLETE].includes(sep8Step) && (\n        <Sep8Review onClose={onClose} />\n      )}\n\n      {[\n        Sep8Step.ACTION_REQUIRED,\n        Sep8Step.SENT_ACTION_REQUIRED_FIELDS,\n      ].includes(sep8Step) && <Sep8ActionRequiredForm onClose={onClose} />}\n    </>\n  );\n};\n","export const capitalizeString = (phrase: string) => {\n  const [firstLetter, ...restOfWord] = phrase.split(\"\");\n  return firstLetter.toUpperCase() + restOfWord.join(\"\");\n};\n","import { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Modal } from \"@stellar/design-system\";\nimport { AccountInfo } from \"components/AccountInfo\";\nimport { Assets } from \"components/Assets\";\nimport { SendPayment } from \"components/SendPayment\";\nimport { Sep6Deposit } from \"components/Sep6/Sep6Deposit\";\nimport { Sep6Withdraw } from \"components/Sep6/Sep6Withdraw\";\nimport { Sep8Send } from \"components/Sep8Send\";\nimport { Sep31Send } from \"components/Sep31Send\";\nimport { CSS_MODAL_PARENT_ID } from \"constants/settings\";\nimport { resetActiveAssetAction } from \"ducks/activeAsset\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { Asset } from \"types/types.d\";\n\nexport const Account = () => {\n  const { account } = useRedux(\"account\");\n  const [sendPaymentModalVisible, setSendPaymentModalVisible] = useState(false);\n  const [currentAsset, setCurrentAsset] = useState<Asset | undefined>();\n\n  const dispatch = useDispatch();\n\n  const handleCloseModal = () => {\n    setSendPaymentModalVisible(false);\n    dispatch(resetActiveAssetAction());\n  };\n\n  const handleSendPayment = (asset?: Asset) => {\n    setCurrentAsset(asset);\n    setSendPaymentModalVisible(true);\n  };\n\n  if (!account.data?.id) {\n    return null;\n  }\n\n  return (\n    <>\n      {/* Account */}\n      <AccountInfo />\n\n      {/* Assets / Balances */}\n      <Assets onSendPayment={handleSendPayment} />\n\n      {/* SEP-6 Deposit */}\n      <Sep6Deposit />\n\n      {/* SEP-6 Withdraw */}\n      <Sep6Withdraw />\n\n      {/* SEP-8 Send */}\n      <Sep8Send />\n\n      {/* SEP-31 Send */}\n      <Sep31Send />\n\n      <Modal\n        visible={Boolean(sendPaymentModalVisible)}\n        onClose={handleCloseModal}\n        parentId={CSS_MODAL_PARENT_ID}\n      >\n        {/* Send payment */}\n        <SendPayment asset={currentAsset} onClose={handleCloseModal} />\n      </Modal>\n    </>\n  );\n};\n","export const METRIC_NAMES = {\n  viewHome: \"loaded screen: home\",\n};\n","import { useState } from \"react\";\nimport { Button, Checkbox, Input, Modal } from \"@stellar/design-system\";\nimport { useHistory } from \"react-router-dom\";\nimport { searchParam } from \"helpers/searchParam\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { ActionStatus, SearchParams } from \"types/types.d\";\n\nexport const ConnectAccount = () => {\n  const { account, settings } = useRedux(\"account\", \"settings\");\n  const [secretKey, setSecretKey] = useState(\"\");\n  const history = useHistory();\n\n  const handleSetSecretKey = () => {\n    history.push(searchParam.update(SearchParams.SECRET_KEY, secretKey));\n  };\n\n  const handleSwitchNetwork = () => {\n    history.push(\n      searchParam.update(SearchParams.PUBNET, (!settings.pubnet).toString()),\n    );\n  };\n\n  return (\n    <>\n      <Modal.Heading>Connect with a secret key</Modal.Heading>\n\n      <Modal.Body>\n        <Input\n          id=\"secretKey\"\n          label=\"Your secret key\"\n          onChange={(e) => setSecretKey(e.target.value)}\n          value={secretKey}\n          placeholder=\"Starts with S, example: SCHK…ZLJK\"\n        />\n\n        <Checkbox\n          id=\"use-pubnet\"\n          label=\"Operate on pubnet (NOT RECOMMENDED)\"\n          checked={settings.pubnet}\n          onChange={handleSwitchNetwork}\n        />\n      </Modal.Body>\n\n      <Modal.Footer>\n        <Button\n          onClick={handleSetSecretKey}\n          disabled={!secretKey}\n          isLoading={account.status === ActionStatus.PENDING}\n        >\n          Connect\n        </Button>\n      </Modal.Footer>\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  Heading3,\n  Loader,\n  TextLink,\n  Modal,\n  Layout,\n} from \"@stellar/design-system\";\nimport { metrics } from \"@stellar/frontend-helpers\";\n\nimport { METRIC_NAMES } from \"constants/metricNames\";\nimport { CSS_MODAL_PARENT_ID } from \"constants/settings\";\nimport { createRandomAccount } from \"ducks/account\";\nimport { ConnectAccount } from \"components/ConnectAccount\";\nimport { searchParam } from \"helpers/searchParam\";\nimport { useRedux } from \"hooks/useRedux\";\nimport { ActionStatus, SearchParams } from \"types/types.d\";\n\nexport const Landing = () => {\n  const { account } = useRedux(\"account\");\n  const [isConnectAccountModalVisible, setIsConnectAccountModalVisible] =\n    useState(false);\n\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const history = useHistory();\n\n  useEffect(() => {\n    metrics.emitMetric(METRIC_NAMES.viewHome);\n  }, []);\n\n  useEffect(() => {\n    if (account.status === ActionStatus.SUCCESS && !account.isAuthenticated) {\n      history.push(\n        searchParam.update(SearchParams.SECRET_KEY, account.secretKey),\n      );\n    }\n  }, [\n    account.secretKey,\n    account.status,\n    account.isAuthenticated,\n    history,\n    location,\n  ]);\n\n  const handleCreateAccount = () => {\n    // Make sure we are on testnet\n    history.push(searchParam.update(SearchParams.PUBNET, \"false\"));\n    dispatch(createRandomAccount());\n  };\n\n  const isPending = account.status === ActionStatus.PENDING;\n\n  return (\n    <Layout.Inset>\n      <div className=\"Landing__container\">\n        <Heading3>Import or generate keypair</Heading3>\n\n        <div className=\"Landing__buttons\">\n          <TextLink\n            onClick={() => setIsConnectAccountModalVisible(true)}\n            variant={TextLink.variant.secondary}\n            disabled={isPending}\n            underline\n          >\n            Provide a secret key (testnet or mainnet)\n          </TextLink>\n\n          <div className=\"Layout__inline\">\n            <TextLink\n              onClick={handleCreateAccount}\n              variant={TextLink.variant.secondary}\n              disabled={isPending}\n              underline\n            >\n              Generate keypair for new account (testnet only)\n            </TextLink>\n\n            {!isConnectAccountModalVisible && isPending && <Loader />}\n          </div>\n        </div>\n\n        <Modal\n          visible={isConnectAccountModalVisible}\n          onClose={() => setIsConnectAccountModalVisible(false)}\n          parentId={CSS_MODAL_PARENT_ID}\n        >\n          <ConnectAccount />\n        </Modal>\n      </div>\n    </Layout.Inset>\n  );\n};\n","import { useHistory } from \"react-router-dom\";\nimport { Button, Heading1, Layout, Eyebrow } from \"@stellar/design-system\";\n\nexport const NotFound = () => {\n  const history = useHistory();\n\n  const handleBack = () => {\n    history.push({ pathname: \"/\", search: history.location.search });\n  };\n\n  return (\n    <Layout.Inset>\n      <div className=\"NotFoundPage\">\n        <Eyebrow>Error 404</Eyebrow>\n        <Heading1>Sorry, that page couldn’t be found.</Heading1>\n        <p>Have you tried turning it off and on again?</p>\n        <Button onClick={handleBack}>Go back</Button>\n      </div>\n    </Layout.Inset>\n  );\n};\n","import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { Layout, TextLink } from \"@stellar/design-system\";\nimport { errorReporting } from \"@stellar/frontend-helpers\";\n\nimport { store } from \"config/store\";\nimport { Header } from \"components/Header\";\nimport { Footer } from \"components/Footer\";\nimport { Logs } from \"components/Logs\";\nimport { PrivateRoute } from \"components/PrivateRoute\";\nimport { SettingsHandler } from \"components/SettingsHandler\";\nimport { WarningBanner } from \"components/WarningBanner\";\n\nimport { Account } from \"pages/Account\";\nimport { Landing } from \"pages/Landing\";\nimport { NotFound } from \"pages/NotFound\";\nimport \"./App.scss\";\n\nerrorReporting.reportErrors({\n  projectName: \"demo-wallet\",\n  tracingOrigins: [/^\\/[^/]/],\n});\n\nexport const App = () => (\n  <Provider store={store}>\n    <Router>\n      <SettingsHandler>\n        <WarningBanner />\n\n        <div id=\"app-wrapper\" className=\"Wrapper\">\n          <div className=\"SplitContainer Main\">\n            <div className=\"Main__content\">\n              <Header />\n\n              <Layout.Content>\n                <Layout.Inset>\n                  <p>\n                    This demo wallet lets financial application developers test\n                    their integrations and learn how Stellar ecosystem protocols\n                    (SEPs) work.\n                  </p>\n\n                  <p>\n                    <TextLink\n                      variant={TextLink.variant.secondary}\n                      underline\n                      href=\"https://github.com/stellar/stellar-demo-wallet#stellar-demo-wallet\"\n                    >\n                      Learn more\n                    </TextLink>{\" \"}\n                    about the tool and{\" \"}\n                    <TextLink\n                      variant={TextLink.variant.secondary}\n                      underline\n                      href=\"https://github.com/stellar/stellar-demo-wallet/issues\"\n                    >\n                      report issues or request features\n                    </TextLink>{\" \"}\n                    on GitHub.\n                  </p>\n                </Layout.Inset>\n\n                <Switch>\n                  <Route exact path=\"/\">\n                    <Landing />\n                  </Route>\n\n                  <PrivateRoute exact path=\"/account\">\n                    <Account />\n                  </PrivateRoute>\n\n                  <Route component={NotFound} />\n                </Switch>\n              </Layout.Content>\n\n              <Footer />\n            </div>\n          </div>\n\n          <Logs />\n        </div>\n      </SettingsHandler>\n    </Router>\n  </Provider>\n);\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// Import global CSS from Stellar Design System\nimport \"@stellar/design-system/build/styles.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Memo, MemoHash, MemoID, MemoText } from \"stellar-sdk\";\n\nexport const createMemoFromType = (\n  memoString: string,\n  memoType: string,\n): Memo => {\n  let memo;\n\n  switch (memoType) {\n    case \"hash\":\n      memo = new Memo(\n        MemoHash,\n        Buffer.from(memoString, \"base64\").toString(\"hex\"),\n      );\n      break;\n    case \"id\":\n      memo = new Memo(MemoID, memoString);\n      break;\n    case \"text\":\n      memo = new Memo(MemoText, memoString);\n      break;\n    default:\n    // do nothing\n  }\n\n  if (!memo) {\n    throw new Error(`Invalid memo_type: ${memoString} (${memoType})`);\n  }\n\n  return memo;\n};\n","export const LOG_MESSAGE_EVENT = \"logEventMessage\";\nexport const URL_ITEM_SEPARATOR_CHAR = \"|\";\nexport const URL_KEY_PAIR_SEPARATOR_CHAR = \">\";\nexport const CSS_MODAL_PARENT_ID = \"app-wrapper\";\n","import { captureMessage as sentryCaptureMessage } from \"@sentry/browser\";\nimport { LOG_MESSAGE_EVENT } from \"constants/settings\";\nimport { LogType, LogItemProps, AnyObject } from \"types/types.d\";\n\nconst dispatchLog = (detail: LogItemProps) => {\n  document.dispatchEvent(\n    new CustomEvent(LOG_MESSAGE_EVENT, {\n      detail,\n    }),\n  );\n};\n\nexport const log = {\n  request: ({\n    title,\n    body = \"\",\n  }: {\n    title: string;\n    body?: string | AnyObject;\n  }) => {\n    console.log(\"🚀\", title, body);\n    dispatchLog({\n      timestamp: new Date().getTime(),\n      type: LogType.REQUEST,\n      title,\n      body,\n    });\n  },\n\n  response: ({\n    title,\n    body = \"\",\n  }: {\n    title: string;\n    body?: string | AnyObject;\n  }) => {\n    console.log(\"✅\", title, body);\n    dispatchLog({\n      timestamp: new Date().getTime(),\n      type: LogType.RESPONSE,\n      title,\n      body,\n    });\n  },\n\n  instruction: ({\n    title,\n    body = \"\",\n  }: {\n    title: string;\n    body?: string | AnyObject;\n  }) => {\n    console.info(\"💬\", title, body);\n    dispatchLog({\n      timestamp: new Date().getTime(),\n      type: LogType.INSTRUCTION,\n      title,\n      body,\n    });\n  },\n\n  error: ({\n    title,\n    body = \"\",\n  }: {\n    title: string;\n    body?: string | AnyObject;\n  }) => {\n    sentryCaptureMessage(title);\n    console.error(title, body);\n    dispatchLog({\n      timestamp: new Date().getTime(),\n      type: LogType.ERROR,\n      title,\n      body,\n    });\n  },\n};\n","import { getCatchError } from \"@stellar/frontend-helpers\";\nimport {\n  Account,\n  Asset,\n  BASE_FEE,\n  Keypair,\n  Memo,\n  Operation,\n  Server,\n  TransactionBuilder,\n} from \"stellar-sdk\";\nimport { log } from \"helpers/log\";\nimport { MemoTypeString } from \"types/types.d\";\n\ninterface SendPaymentProps {\n  secretKey: string;\n  assetCode: string;\n  assetIssuer: string;\n  networkUrl: string;\n  networkPassphrase: string;\n  amount: string;\n  sendMemo: string;\n  sendMemoType: MemoTypeString;\n  receiverAddress: string;\n}\n\ninterface SendPaymentError extends Error {\n  result?: {\n    data: {\n      status: string;\n      extras: {\n        // eslint-disable-next-line camelcase\n        result_codes: {\n          transaction: string;\n          operations: string[];\n        };\n      };\n    };\n  };\n}\n\nexport const sendPayment = async ({\n  secretKey,\n  assetCode,\n  assetIssuer,\n  networkUrl,\n  networkPassphrase,\n  amount,\n  sendMemo,\n  sendMemoType,\n  receiverAddress,\n}: SendPaymentProps) => {\n  log.instruction({ title: \"Sending Stellar payment to the receiving anchor\" });\n\n  const keypair = Keypair.fromSecret(secretKey);\n  const server = new Server(networkUrl);\n  const asset = new Asset(assetCode, assetIssuer);\n  const publicKey = keypair.publicKey();\n  const account = await server.loadAccount(publicKey);\n  const { sequence } = await server.accounts().accountId(publicKey).call();\n\n  const accountBalance = account.balances.find(\n    (b: any) =>\n      b.asset_code === asset.getCode() && b.asset_issuer === asset.getIssuer(),\n  );\n\n  if (!accountBalance) {\n    throw new Error(\n      `${assetCode} is not a trusted asset, a trusline must be added`,\n    );\n  }\n\n  if (Number(accountBalance.balance) < Number(amount)) {\n    throw new Error(\n      `The sending anchor does not have enough ${assetCode} balance`,\n    );\n  }\n\n  let memo;\n\n  try {\n    const memoType = {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      [MemoTypeString.TEXT]: Memo.text,\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      [MemoTypeString.ID]: Memo.id,\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      [MemoTypeString.HASH]: Memo.hash,\n    }[sendMemoType];\n\n    if (sendMemoType === MemoTypeString.HASH) {\n      memo = memoType(Buffer.from(sendMemo, \"base64\").toString(\"hex\"));\n    } else {\n      memo = memoType(sendMemo);\n    }\n  } catch (e) {\n    throw new Error(\n      `The memo \\`${sendMemo}\\` could not be encoded to type \\`${sendMemoType}\\``,\n    );\n  }\n\n  const tx = new TransactionBuilder(new Account(publicKey, sequence), {\n    fee: (Number(BASE_FEE) * 5).toString(),\n    networkPassphrase,\n  })\n    .addOperation(\n      Operation.payment({\n        destination: receiverAddress,\n        amount,\n        asset,\n      }),\n    )\n    .addMemo(memo)\n    .setTimeout(30)\n    .build();\n\n  tx.sign(keypair);\n  submitTransaction({ tx, server });\n};\n\nconst submitTransaction = async ({ tx, server }: { tx: any; server: any }) => {\n  let result;\n\n  log.instruction({ title: \"Submitting payment transaction\" });\n\n  try {\n    result = await server.submitTransaction(tx);\n  } catch (e) {\n    const error: SendPaymentError = getCatchError(e);\n    const data = error?.result?.data;\n    const status = data?.status;\n    const txStatus = data?.extras.result_codes.transaction;\n    const codes = data?.extras.result_codes.operations;\n    const codesList = codes ? codes.join(\", \") : \"\";\n\n    throw new Error(\n      `Sending transaction failed with error code ${status}: ${txStatus}, ${codesList}`,\n    );\n  }\n\n  log.instruction({ title: \"Payment transaction submitted\", body: result });\n\n  return result;\n};\n"],"sourceRoot":""}